{
    "articles": [
        {
            "content": [
                "<p>Consider the following JSON object:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n  \"sides\":  4,\n  \"colour\": \"red\",\n  \"sides\":  5,\n  \"colour\": \"blue\"\n}\n</code></pre></div></div>\n\n<p>Notice that <code class=\"language-plaintext highlighter-rouge\">sides</code> and <code class=\"language-plaintext highlighter-rouge\">colour</code> both appear twice.\nThis looks invalid, but I learnt recently that this is actually legal JSON syntax!\nIt\u2019s unusual and discouraged, but it\u2019s not completely forbidden.</p>\n\n<p>This was a big surprise to me.\nI think of JSON objects as key/value pairs, and I associate them with data structures like a <code class=\"language-plaintext highlighter-rouge\">dict</code> in Python or a <code class=\"language-plaintext highlighter-rouge\">Hash</code> in Ruby \u2013 both of which only allow unique keys.\nJSON has no such restriction, and I started thinking about how to handle it.</p>\n\n<h2 id=\"what-does-the-json-spec-say-about-duplicate-names\">What does the JSON spec say about duplicate names?</h2>\n\n<p>JSON is described by several standards, which <a href=\"https://en.wikipedia.org/wiki/JSON#Standards\">Wikipedia</a> helpfully explains for us:</p>\n\n<blockquote>\n  <p>After RFC\u00a04627 had been available as its \u201cinformational\u201d specification since 2006, JSON was first standardized in 2013, as <a href=\"https://ecma-international.org/publications-and-standards/standards/ecma-404/\">ECMA\u2011404</a>.</p>\n\n  <p><a href=\"https://ecma-international.org/publications-and-standards/standards/ecma-404/\">RFC\u00a08259</a>, published in 2017, is the current version of the Internet Standard STD 90, and it remains consistent with ECMA\u2011404.</p>\n\n  <p>That same year, JSON was also standardized as <a href=\"https://www.iso.org/standard/71616.html\">ISO/IEC\u00a021778:2017</a>.</p>\n\n  <p>The ECMA and ISO/IEC standards describe only the allowed syntax, whereas the RFC covers some security and interoperability considerations.</p>\n</blockquote>\n\n<p>All three of these standards explicitly allow the use of duplicate names in objects.</p>\n\n<p>ECMA\u2011404 and ISO/IEC\u00a021778:2017 have identical text to describe the syntax of JSON objects, and they say (emphasis mine):</p>\n\n<blockquote>\n  <p>An object structure is represented as a pair of curly bracket tokens surrounding zero or more name/value pairs.\n[\u2026]\nThe JSON syntax does not impose any restrictions on the <em>strings</em> used as names, <strong>does not require that name <em>strings</em> be unique</strong>, and does not assign any significance to the ordering of name/value pairs.\nThese are all semantic considerations that may be defined by JSON processors or in specifications defining specific uses of JSON for data interchange.</p>\n</blockquote>\n\n<p>RFC\u00a08259 goes further and strongly recommends against duplicate names, but the use of <a href=\"https://datatracker.ietf.org/doc/html/rfc2119#section-3\">SHOULD</a> means it isn\u2019t completely forbidden:</p>\n\n<blockquote>\n  <p>The names within an object SHOULD be unique.</p>\n</blockquote>\n\n<p>The same document warns about the consequences of ignoring this recommendation:</p>\n\n<blockquote>\n  <p>An object whose names are all unique is interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings.\nWhen the names within an object are not unique, the behavior of software that receives such an object is unpredictable.\nMany implementations report the last name/value pair only.\nOther implementations report an error or fail to parse the object, and some implementations report all of the name/value pairs, including duplicates.</p>\n</blockquote>\n\n<p>So it\u2019s technically valid, but it\u2019s unusual and discouraged.</p>\n\n<p>I\u2019ve never heard of a use case for JSON objects with duplicate names.\nI\u2019m sure there was a good reason for it being allowed by the spec, but I can\u2019t think of it.</p>\n\n<p>Most JSON parsers \u2013 including jq, JavaScript, and Python \u2013 will silently discard all but the last instance of a duplicate name.\nHere\u2019s an example in Python:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">{</span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 4, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 5, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"s\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"go\">{'colour': 'blue', 'sides': 5}\n</span></code></pre></div></div>\n\n<p>What if I wanted to decode the whole object, or throw an exception if I see duplicate names?</p>\n\n<p>This happened to me recently.\nI was editing a JSON file by hand, and I\u2019d copy/paste objects to update the data.\nI also had scripts which could update the file.\nI forgot to update the name on one of the JSON objects, so there were two name/value pairs with the same name.\nWhen I ran the script, it silently erased the first value.</p>\n\n<p>I was able to recover the deleted value from the Git history, but I wondered how I could prevent this happening again.\nHow could I make the script fail, rather than silently delete data?</p>\n\n<h2 id=\"decoding-duplicate-names-in-python\">Decoding duplicate names in Python</h2>\n\n<p>When Python decodes a JSON object, it first parses the object as a list of name/value pairs, then it turns that list of name value pairs into a dictionary.</p>\n\n<p>We can see this by looking at the <a href=\"https://github.com/python/cpython/blob/a247dd300ea0c839154e2e38dbc0fdc9fdff673f/Lib/json/decoder.py#L137-L219\">JSONObject function</a> in the CPython source code: it builds a list <code class=\"language-plaintext highlighter-rouge\">pairs</code>, and at the end of the function, it calls <code class=\"language-plaintext highlighter-rouge\">dict(pairs)</code> to turn the list into a dictionary.\nThis relies on the fact that <code class=\"language-plaintext highlighter-rouge\">dict()</code> can take an iterable of key/value tuples and create a dictionary:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">colour</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">)])</span>\n<span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">colour</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The docs for <code class=\"language-plaintext highlighter-rouge\">dict()</code> tell us that it` will <a href=\"https://docs.python.org/3/library/stdtypes.html#dict\">discard duplicate keys</a>: \u201cif a key occurs more than once, the last value for that key becomes the corresponding value in the new dictionary\u201d.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">colour</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">colour</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">blue</span><span class=\"sh\">'</span><span class=\"p\">)])</span>\n<span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">colour</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">blue</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We can customise what Python does with the list of name/value pairs.\nRather than calling <code class=\"language-plaintext highlighter-rouge\">dict()</code>, we can pass our own function to the <code class=\"language-plaintext highlighter-rouge\">object_pairs_hook</code> parameter of <code class=\"language-plaintext highlighter-rouge\">json.loads()</code>, and Python will call that function on the list of pairs.\nThis allows us to parse objects in a different way.</p>\n\n<p>For example, we can just return the literal list of name/value pairs:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"sh\">'</span><span class=\"s\">{</span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 4, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 5, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"s\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"n\">object_pairs_hook</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">pairs</span><span class=\"p\">:</span> <span class=\"n\">pairs</span>\n<span class=\"gp\">...</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"c\">...\n</span><span class=\"go\">[('sides', 4), ('colour', 'red'), ('sides', 5), ('colour', 'blue')]\n</span></code></pre></div></div>\n\n<p>We could also use the <a href=\"https://multidict.aio-libs.org/en/stable/\">multidict library</a> to get a dict-like data structure which supports multiple values per key.\nThis is based on HTTP headers and URL query strings, two environments where it\u2019s common to have multiple values for a single key:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"kn\">from</span> <span class=\"n\">multidict</span> <span class=\"kn\">import</span> <span class=\"n\">MultiDict</span>\n<span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"sh\">'</span><span class=\"s\">{</span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 4, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 5, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"s\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"n\">object_pairs_hook</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">pairs</span><span class=\"p\">:</span> <span class=\"nc\">MultiDict</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"c\">...\n</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">md</span>\n<span class=\"go\">&lt;MultiDict('sides': 4, 'colour': 'red', 'sides': 5, 'colour': 'blue')&gt;\n</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">md</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"go\">4\n</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">md</span><span class=\"p\">.</span><span class=\"nf\">getall</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"go\">[4, 5]\n</span></code></pre></div></div>\n\n<h2 id=\"preventing-silent-data-loss\">Preventing silent data loss</h2>\n\n<p>If we want to throw an exception when we see duplicate names, we need a longer function.\nHere\u2019s the code I wrote:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">collections</span>\n<span class=\"kn\">import</span> <span class=\"n\">typing</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">dict_with_unique_names</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"p\">.</span><span class=\"n\">Any</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"p\">.</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Convert a list of name/value pairs to a dict, but only if the\n    names are unique.\n\n    If there are non-unique names, this function throws a ValueError.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># First try to parse the object as a dictionary; if it's the same\n</span>    <span class=\"c1\"># length as the pairs, then we know all the names were unique and\n</span>    <span class=\"c1\"># we can return immediately.\n</span>    <span class=\"n\">pairs_as_dict</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">pairs_as_dict</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">pairs_as_dict</span>\n\n    <span class=\"c1\"># Otherwise, let's work out what the repeated name(s) were, so we\n</span>    <span class=\"c1\"># can throw an appropriate error message for the user.\n</span>    <span class=\"n\">name_tally</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"p\">.</span><span class=\"nc\">Counter</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">pairs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">repeated_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"ow\">in</span> <span class=\"n\">name_tally</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">assert</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">repeated_names</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">repeated_names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Found repeated name in JSON object: </span><span class=\"si\">{</span><span class=\"n\">repeated_names</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Found repeated names in JSON object: </span><span class=\"si\">{</span><span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">repeated_names</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>If I use this as my <code class=\"language-plaintext highlighter-rouge\">object_pairs_hook</code> when parsing an object which has all unique names, it returns the normal <code class=\"language-plaintext highlighter-rouge\">dict</code> I\u2019d expect:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"sh\">'</span><span class=\"s\">{</span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 4, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"s\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"n\">object_pairs_hook</span><span class=\"o\">=</span><span class=\"n\">dict_with_unique_names</span>\n<span class=\"gp\">...</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"c\">...\n</span><span class=\"go\">{'colour': 'red', 'sides': 4}\n</span></code></pre></div></div>\n\n<p>But if I\u2019m parsing an object with one or more repeated names, the parsing fails and throws a <code class=\"language-plaintext highlighter-rouge\">ValueError</code>:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"sh\">'</span><span class=\"s\">{</span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 4, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 5}</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"gp\">...</span><span class=\"w\">      </span><span class=\"n\">object_pairs_hook</span><span class=\"o\">=</span><span class=\"n\">dict_with_unique_names</span>\n<span class=\"gp\">...</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"go\">Traceback (most recent call last):\n[\u2026]\nValueError: Found repeated name in JSON object: sides\n\n</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"sh\">'</span><span class=\"s\">{</span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 4, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"s\">sides</span><span class=\"sh\">\"</span><span class=\"s\">: 5, </span><span class=\"sh\">\"</span><span class=\"s\">colour</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"s\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"gp\">...</span><span class=\"w\">     </span><span class=\"n\">object_pairs_hook</span><span class=\"o\">=</span><span class=\"n\">dict_with_unique_names</span>\n<span class=\"gp\">...</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"go\">Traceback (most recent call last):\n[\u2026]\nValueError: Found repeated names in JSON object: sides, colour\n</span></code></pre></div></div>\n\n<p>This is precisely the behaviour I want \u2013 throwing an exception, not silently dropping data.</p>\n\n<h2 id=\"encoding-non-unique-names-in-python\">Encoding non-unique names in Python</h2>\n\n<p>It\u2019s hard to think of a use case, but this post feels incomplete without at least a brief mention.</p>\n\n<p>If you want to encode custom data structures with Python\u2019s JSON library, you can subclass <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\"><code class=\"language-plaintext highlighter-rouge\">JSONEncoder</code></a> and define how those structures should be serialised.\nHere\u2019s a rudimentary attempt at doing that for a <code class=\"language-plaintext highlighter-rouge\">MultiDict</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MultiDictEncoder</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">JSONEncoder</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"p\">.</span><span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If this is a MultiDict, we need to construct the JSON string\n</span>        <span class=\"c1\"># manually -- first encode each name/value pair, then construct\n</span>        <span class=\"c1\"># the JSON object literal.\n</span>        <span class=\"k\">if</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">MultiDict</span><span class=\"p\">):</span>\n            <span class=\"n\">name_value_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span>\n                <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">{</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">name_value_pairs</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">}</span><span class=\"sh\">'</span>\n\n        <span class=\"k\">return</span> <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>and here\u2019s how you use it:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nc\">MultiDict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">colour</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">sides</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">colour</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">blue</span><span class=\"sh\">'</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">md</span><span class=\"p\">,</span> <span class=\"n\">cls</span><span class=\"o\">=</span><span class=\"n\">MultiDictEncoder</span><span class=\"p\">)</span>\n<span class=\"go\">{\"sides\": 4, \"colour\": \"red\", \"sides\": 5, \"colour\": \"blue\"}\n</span></code></pre></div></div>\n\n<p>This is rough code, and you shouldn\u2019t use it \u2013 it\u2019s only an example.\nI\u2019m constructing the JSON string manually, so it doesn\u2019t handle edge cases like indentation or special characters.\nThere are almost certainly bugs, and you\u2019d need to be more careful if you wanted to use this for real.</p>\n\n<p>In practice, if I had to encode a multi-dict as JSON, I\u2019d encode it as a list of objects which each have a <code class=\"language-plaintext highlighter-rouge\">key</code> and a <code class=\"language-plaintext highlighter-rouge\">value</code> field.\nFor example:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[\n  {\"key\": \"sides\",  \"value\": 4     },\n  {\"key\": \"colour\", \"value\": \"red\" },\n  {\"key\": \"sides\",  \"value\": 5     },\n  {\"key\": \"colour\", \"value\": \"blue\"},\n]\n</code></pre></div></div>\n\n<p>This is a pretty standard pattern, and it won\u2019t trip up JSON parsers which aren\u2019t expecting duplicate names.</p>\n\n<h2 id=\"do-you-need-to-worry-about-this\">Do you need to worry about this?</h2>\n\n<p>This isn\u2019t a big deal.\nJSON objects with duplicate names are pretty unusual \u2013 this is the first time I\u2019ve ever encountered one, and it was a mistake.</p>\n\n<p>Trying to account for this edge case in every project that uses JSON would be overkill.\nIt would add complexity to my code and probably never catch a single error.</p>\n\n<p>This started when I made a copy/paste error that introduced the initial duplication, and then a script modified the JSON file and caused some data loss.\nThat\u2019s a somewhat unusual workflow, because most JSON files are exclusively modified by computers, and this wouldn\u2019t be an issue.</p>\n\n<p>I\u2019ve added this error handling to my <a href=\"https://github.com/alexwlchan/javascript-data-files\">javascript-data-files library</a>, but I don\u2019t anticipate adding it to other projects.\nI use that library for my <a href=\"https://alexwlchan.net/2025/mildly-dynamic-websites/\">static website archives</a>, which is where I had this issue.</p>\n\n<p>Although I won\u2019t use this code exactly, it\u2019s been good practice at writing custom encoders/decoders in Python.\nThat <em>is</em> something I do all the time \u2013 I\u2019m often encoding native Python types as JSON, and I want to get the same type back when I decode later.</p>\n\n<p>I\u2019ve been writing my own subclasses of <code class=\"language-plaintext highlighter-rouge\">JSONEncoder</code> and <code class=\"language-plaintext highlighter-rouge\">JSONDecoder</code> for a while.\nNow I know a bit more about how Python decodes JSON, and <code class=\"language-plaintext highlighter-rouge\">object_pairs_hook</code> is another tool I can consider using.\nThis was a fun deep dive for me, and I hope you found it helpful too.</p>\n\n\n    <p>[If the formatting of this post looks odd in your feed reader, <a href=\"https://alexwlchan.net/2025/duplicate-names-in-json/\">visit the original article</a>]</p>"
            ],
            "link": "https://alexwlchan.net/2025/duplicate-names-in-json/?utm_source=rss",
            "publishedAt": "2025-05-04",
            "source": "Alex Chan",
            "summary": "It's possible, although uncommon, for a JSON object to contain the same name multiple times. Here are some ways to handle that in Python.",
            "title": "Handling JSON objects with duplicate names in Python"
        },
        {
            "content": [],
            "link": "https://eugeneyan.com//writing/news-agents/",
            "publishedAt": "2025-05-04",
            "source": "Eugene Yan",
            "summary": "Learning to automate simple agentic workflows with Amazon Q CLI, Anthropic MCP, and tmux.",
            "title": "Building News Agents for Daily News Recaps with MCP, Q, and tmux"
        },
        {
            "content": [
                "<p>We talk a lot about AI \"hallucinations\"<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-1\" id=\"footnote-anchor-1\" target=\"_self\">1</a> &#8211; when Large Language Models (LLMs) confidently state falsehoods or make things up. As these models become more and more integrated into our daily workflows, there ends up being three types of people:</p><ol><li><p>Those who can&#8217;t use AI non-trivially without a debilitating amount of \"hallucinations\". They know AI makes them less productive.</p></li><li><p>Those who use AI for most things without realizing how much they are blindly trusting its inaccuracies. They don&#8217;t realize when AI makes them less productive or how to cope with inconsistency.</p></li><li><p>Those who use AI for most things but have redirected more time and effort into context communication and review. They understand how to cope with limitations while still being able to leaning on AI consistently (see <a href=\"https://blog.sshh.io/p/working-with-systems-smarter-than\">Working with Systems Smarter Than You</a>).</p></li></ol><p>More recently I&#8217;ve been reflecting on parallels between these archetypes and human systems (e.g. managers managing people ~ people managing AI assistants). Originally, I was thinking through how human organization can influence <a href=\"https://blog.sshh.io/p/building-multi-agent-systems\">multi-agent system design</a>, but also how LLM-based agent design can improve human organization and processes. While being cautious with my anthropomorphizing, I can&#8217;t help but think that types 1 and 2 could be more successful if they considered an LLM&#8217;s flaws more similar to human ones.</p><p>In this post, I wanted to give some concrete examples of where human systems can go wrong in the same ways LLMs \"hallucinate\" and how this informs better human+AI system design.</p><h2>Meet Alice &amp; Team</h2><p>Meet <strong>Alice</strong>, a hypothetical manager at a small high growth social media company. As a systems thinker, Alice believes good processes beat heroics. She can't keep up with her workload doing everything herself, so when finance approves budget for three new workers, she leaps at the chance to build a scalable \"people system\".<br /><br />After several rounds of interviews, she hires her team:</p><ul><li><p><strong>Bob</strong> &#8211; Marketing analyst, hired to build growth forecasts. </p></li><li><p><strong>Charlie</strong> &#8211; Software engineer, hired to untangle legacy auth. </p></li><li><p><strong>Dave</strong> &#8211; Recruiter, tasked with doubling team size by EOY.</p></li></ul><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9788fe43-b343-4b24-8353-3486fd2e89c9_1536x1024.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"348.1195054945055\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9788fe43-b343-4b24-8353-3486fd2e89c9_1536x1024.png\" width=\"522\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\">Alice and the team. Generated with ChatGPT.</figcaption></figure></div><p>All three are undeniably smart. All three will &#8220;hallucinate&#8221; in spectacularly different ways<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-2\" id=\"footnote-anchor-2\" target=\"_self\">2</a>. When they do Alice doesn&#8217;t ask them to redo, re-hire, or do the work herself but instead redesigns each of their processes to make them and their future teams more effective.</p><div class=\"subscription-widget-wrap-editor\"><div class=\"subscription-widget show-subscribe\"><div class=\"preamble\"><p class=\"cta-caption\">Thanks for reading Shrivu&#8217;s Substack! Subscribe for free to receive new posts and support my work.</p></div><form class=\"subscription-widget-subscribe\"><input class=\"email-input\" name=\"email\" tabindex=\"-1\" type=\"email\" /><input class=\"button primary\" type=\"submit\" value=\"Subscribe\" /><div class=\"fake-input-wrapper\"><div class=\"fake-input\"></div><div class=\"fake-button\"></div></div></form></div></div><h2>Case 1: Bob&#8217;s Phantom Growth Curve</h2><p>Monday 09:10 AM &#8212; someone drops a Slack:</p><blockquote><p><strong>&#8220;Please prep a 2024 </strong><em><strong>organic-growth</strong></em><strong> forecast for QBR.<br />&#8226; Use the most recent 30-day data<br />&#8226; Break it down by channel<br />&#8226; Include the Activation segment we track for PLG&#8221;</strong></p></blockquote><p>Bob, two weeks in, types &#8220;organic growth&#8221; into Looker. Nineteen dashboards appear; the top hit is <code>ga_sessions_all</code>&#8212;huge row count, nightly refresh, so it <em>looks</em> authoritative.</p><p>Halfway through, they add:</p><blockquote><p><strong>&#8220;Need a quarter-over-quarter 2023 comparison so we can show the delta.&#8221;</strong></p></blockquote><p>Those tables don&#8217;t exist for the new server-side pipeline, so Bob sticks with Google Analytics (GA) and splices in a 2023 view an intern built for hack-week.<br /><br />Slides ship at 6 PM: <strong>&#8220;Activation Drives 17% MoM Organic Lift.&#8221;</strong></p><p>At Tuesday&#8217;s rehearsal: Product asks which &#8220;Activation&#8221; he used. Bob blinks&#8212;there&#8217;s only one to him. Ten minutes later everyone realises the entire forecast rides on the wrong metric, the wrong source, and a one-off intern table.</p><p><strong>What went wrong:</strong></p><ul><li><p><strong>Constraint collision</strong>: &#8220;Last 30 days&#8221; and &#8220;QoQ 2023&#8221; forced him to choose a dataset that satisfied only one request.</p></li><li><p><strong>No signal hierarchy</strong>: An intern&#8217;s hack-week table looked as &#8220;official&#8221; as the curated view.</p></li><li><p><strong>Jargon clash</strong>: &#8220;Activation&#8221; is generic marketing slang, but internally it marks users who complete an onboarding quiz.</p></li><li><p><strong>Hidden documentation</strong>: The correct dataset lived four folders deep; search indexing buried it.</p></li><li><p><strong>Outdated pipeline</strong>: GA misses 50% of traffic now captured server-side; Bob never knew.</p></li></ul><p><strong>How Alice adjusted:</strong></p><ul><li><p><strong>Surface-the-canon</strong>: Dashboards and tables now carry a <em>Source-of-Truth</em> badge and float to the top of search; deprecated assets auto-label <strong>DEPRECATED</strong>.</p></li><li><p><strong>Constraint-aware dashboards</strong>: Every canonical view lists guaranteed fields, supported time ranges, and shows a red banner, &#8220;QoQ view not available&#8221;, if a request exceeds its scope. Analysts can&#8217;t export mismatched slices without reading this warning.</p></li><li><p><strong>Language safety-net</strong>: A mandatory onboarding docs provides the company-specific meaning, owner, and freshness for terms like <strong>Activation</strong>, killing jargon drift.</p></li></ul><p><em>Bob experienced a &#8220;bad inputs hallucination&#8221;. Alice addressed these by cleaning up and refining context.</em></p><h3><strong>Case 2: Charlie&#8217;s One-Line Patch that Broke Mobile</strong></h3><p>Wednesday 11:42 AM, PagerDuty flares: sporadic race-condition errors in the auth service. Alice Slacks Charlie, the new engineer:</p><blockquote><p><strong>&#8220;Mobile log-ins are spiking. Can you hot-patch the mutex logic before the 1 PM exec review?&#8221;</strong></p></blockquote><p>Charlie opens <code>AuthHandler.java</code>, wraps <code>refreshToken()</code> in a <code>synchronized</code> block, and runs unit tests&#8212;green across the board. Jira still blocks merge until he fills ten mandatory fields (impact score, rollout plan, risk level). He copies placeholder text from yesterday&#8217;s ticket, hits Merge, and grabs a coffee.</p><p>Twelve minutes after deploy, Android log-ins leap to 500 ms. Mobile clients call <code>refreshToken()</code> twice, deadlocking on Charlie&#8217;s new lock. Rollback ensues.</p><p><strong>What went wrong:</strong></p><ul><li><p><strong>Time-crunch override</strong>: &#8220;Patch before exec review&#8221; compressed the thinking window to near zero.</p></li><li><p><strong>Field-first autopilot</strong>: Jira&#8217;s ten required fields were completed <em>before</em> Charlie articulated his approach, so the ticket captured no real reasoning.</p></li><li><p><strong>No plan</strong>: He typed code without first jotting ideas &amp; alternatives, leaving assumptions unexamined.</p></li><li><p><strong>Shallow review</strong>: the tiny three-line PR was rubber-stamped&#8212;reviewer glanced at syntax but had no checklist for concurrency side-effects, so the deadlock risk slid by.</p></li></ul><p><strong>How Alice adjusted:</strong></p><ul><li><p><strong>Design first</strong>: Certain prod changes starts with a half-page change-doc (intent, alternatives, blast radius). The ticket fields auto-populate from this draft, explanation precedes form-filling.</p></li><li><p><strong>Self-validation ritual</strong>: Draft must list at least one alternative approach and one failure case; author checks both before coding and secondary reviews.</p></li><li><p><strong>Encourage exploration</strong>: Engineers block the first few minutes of a fix to free-write sketches, no format, just possibilities. Rough notes are reviewed in a same-day sync so risky branches surface before any code is written.</p></li></ul><p><em>Charlie experienced a &#8220;constrained thought hallucination&#8221;. Alice addressed these by creating space and checkpoints for when solving complex problems.</em></p><h3><strong>Case 3: Dave&#8217;s Pipeline to Nowhere</strong></h3><p>Thursday 09:30 AM &#8212; Budget finally lands to grow the team. Alice fires off a quick Slack to Dave, the new recruiter:</p><blockquote><p><strong>&#8220;Goal: fill every open role ASAP. First slate in two weeks&#8212;use the JD we sent out for last year&#8217;s Staff Backend hire as a reference.&#8221;</strong></p></blockquote><p>Dave dives in, copies the old job post, tweaks a few lines, and launches a LinkedIn blitz: 500 InMails, 40 screens booked. Two weeks later he delivers a spreadsheet titled &#8220;Backend Slate&#8221;, 30 senior engineers, half require relocation, none match the targets Finance just announced, and exactly zero are data scientists (the role Product cares about most).</p><p>Engineering leads groan; PMs are confused; Finance is furious that relocation wasn&#8217;t budgeted. Dave is equally baffled: he <em>did</em> what the Slack said.</p><p><strong>What went wrong:</strong></p><ul><li><p><strong>Blurry objective</strong>: &#8220;Fill every open role&#8221; masked eight unique positions&#8212;backend, data science, ML Ops, and two internships.</p></li><li><p><strong>Example overfitting</strong>: Dave treated last year&#8217;s Staff Backend JD as the canonical spec; every search term, filter, and boolean string anchored there.</p></li><li><p><strong>Missing Do/Don&#8217;t list</strong>: No &#8220;Supported vs Not Supported&#8221; notes on level, location, visa status, or diversity goals.</p></li><li><p><strong>Collaboration gap</strong>: Dave had no interface map&#8212;he didn&#8217;t know Product owns data-science roles or that Finance owns relocation budgets.</p></li><li><p><strong>Hidden assumptions</strong>: &#8220;Remote-friendly&#8221; means &#8220;within U.S. time zones&#8221; internally, but Dave took it literally and sourced from 13 countries.</p></li><li><p><strong>Zero acceptance criteria</strong>: Spreadsheet columns didn&#8217;t match ATS import; hiring managers couldn&#8217;t even load the data.</p></li><li><p><strong>No back-out clause</strong>: When goals changed mid-search, Dave had no explicit stop-and-clarify trigger, so he just kept sourcing.</p></li></ul><p><strong>How Alice adjusted:</strong></p><ul><li><p><strong>Scope charter</strong>: A one-page Role-Intake doc for every search&#8212;lists <em>Do / Don&#8217;t</em>, <em>Supported / Not Supported</em>, critical assumptions, and an &#8220;If unknown, ask X&#8221; field.</p></li><li><p><strong>Collaboration map &amp; back-out clause</strong>: Doc names the decision-owner for comp, diversity, tech stack, and visa. Any conflicting info triggers a mandatory pause in the Slack channel #scope-check.</p></li><li><p><strong>Definition of done</strong>: Each role ships with an acceptance checklist (level, location, diversity target, salary band) and an ATS-ready CSV template; slates that miss either bounce automatically.</p></li></ul><p><em>Dave experienced an &#8220;ambiguity hallucination&#8221;. Alice addressed these by clarifying instructions and providing a back-out clause.</em></p><h2>Empathy for people (and LLMs trained on them)</h2><p>In each of these contrived cases, no one is acting dumb or maliciously, and yet the systems and context set things up for failure. Alice, rather than resorting to doing the work herself or trying to hire a more capable team, invests in the systemic failure points. </p><p>Now if we swapped out these new hires for LLM-based agents (and reduced their scope a bit based on today&#8217;s model capabilities) there&#8217;s a strong chance that a type-1 user, in-place of Alice, would have just dismissed their usefulness because &#8220;they keep hallucinating&#8221;. LLMs aren&#8217;t perfect and many applications are indeed &#8220;just hype&#8221; but I&#8217;ll claim that <em>most</em> modern LLM<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-3\" id=\"footnote-anchor-3\" target=\"_self\">3</a> &#8220;hallucinations&#8221; actually fall into the mostly solvable case studies above. You just have to think more like Alice (for software engineers see <a href=\"https://blog.sshh.io/p/ai-powered-software-engineering\">AI-powered Software Engineering</a>).</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F77e280b5-3e77-4818-8b78-af5fe8d268d3_1536x1024.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"347.4526098901099\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F77e280b5-3e77-4818-8b78-af5fe8d268d3_1536x1024.png\" width=\"521\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\">Alice and her AI tools. Generated with ChatGPT.</figcaption></figure></div><p>Admittedly, there are a few critical differences with LLMs that make it less intuitive to solve these types of systemic problems compared to working with people:</p><ul><li><p><strong>A lack of native continuous and multimodal learning</strong></p><ul><li><p>Unlike a human who can continuously learn from experience, most people work with stateless LLMs<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-4\" id=\"footnote-anchor-4\" target=\"_self\">4</a>. To get an LLM to improve, a person needs to both understand what context was lacking and provide that manually as text in all future sessions. This workflow isn&#8217;t very intuitive and relies on conscious effort by the user (as the AI&#8217;s manager) to make any improvement.</p></li><li><p>For now: continuously update the context of your GPTs/Projects/etc to encode your constraints, instructions, and expected outcomes.</p></li></ul></li><li><p><strong>Poor defaults and Q&amp;A calibration</strong></p><ul><li><p>A human, even if explicitly told to provide advice from an <a href=\"https://www.theverge.com/2024/5/23/24162896/google-ai-overview-hallucinations-glue-in-pizza\">article about putting glue on pizza</a>, will know that this is not right nor aligned with the goals of their manager. LLMs on the other hand will often default to doing exactly as they are told to do even if that goes against common sense or means providing an incorrect answer to an unsolvable problem. For people building apps on LLMs, the trick is often to provide strong language and back-out clauses (&#8220;only provide answers from the context provided, don&#8217;t make things up, if you don&#8217;t know say you don&#8217;t know&#8221;) but ideally these statements should be baked into the model itself.</p></li><li><p>For now: calibrate your LLMs manually with prompts that include the scope of decisions (both what to do and what not to) and information it can use.</p></li></ul></li><li><p><strong>Hidden application context</strong></p><ul><li><p>It can sometimes be more obvious what context a human has compared to an LLM you are interacting with. Applications, often via <a href=\"https://blog.sshh.io/i/159137566/line-by-line-cursor-system-prompt-analysis\">system prompts</a>, include detailed behavioral instructions that are completely hidden to the user. These prompts can often heavily steer the LLM in ways that are opaque and unintuitive to an end-user. They may also be presented with false information (e.g. via some <a href=\"https://en.wikipedia.org/wiki/Retrieval-augmented_generation\">RAG system</a>) without context on whether it&#8217;s up-to-date, whether it applies, or how much it can be trusted.</p></li><li><p>For now: find and understand the hidden system prompts in the applications you use while preferring assistants with transparent context<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-5\" id=\"footnote-anchor-5\" target=\"_self\">5</a>.</p></li></ul></li></ul><h3>A Law of Relative Intelligence</h3><p>To take this a step farther, I think what most people consider \"hallucinations\" are actually pretty fundamental to any generally intelligent system.</p><blockquote><p><strong>Law:</strong><a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-6\" id=\"footnote-anchor-6\" target=\"_self\">6</a> Any generally intelligent Q&amp;A system &#8212; human, silicon, or alien &#8212; will emit confident falsehoods when:</p><ol><li><p>Inputs are under-constrained, inconsistent, and/or ambiguous</p></li><li><p>Reasoning &#8220;compute&#8221; budget is limited</p></li><li><p>Incentives reward giving an answer more than withholding one or asking for clarification</p></li></ol></blockquote><p>Assuming this, there&#8217;s also no such thing as \"solving hallucinations\", instead I expect model providers will continue to calibrate LLMs to align with human preferences and applications will find ways to integrate continuous learning and intuitively instructed assistants. Ultimately, it&#8217;s about building more effective human+AI systems through understanding and smarter process design, recognizing that the flaws we see in LLMs often reflect the complexities inherent in the environment rather than purely limitations of the technology.</p><div class=\"subscription-widget-wrap-editor\"><div class=\"subscription-widget show-subscribe\"><div class=\"preamble\"><p class=\"cta-caption\">Thanks for reading Shrivu&#8217;s Substack! Subscribe for free to receive new posts and support my work.</p></div><form class=\"subscription-widget-subscribe\"><input class=\"email-input\" name=\"email\" tabindex=\"-1\" type=\"email\" /><input class=\"button primary\" type=\"submit\" value=\"Subscribe\" /><div class=\"fake-input-wrapper\"><div class=\"fake-input\"></div><div class=\"fake-button\"></div></div></form></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-1\" id=\"footnote-1\" target=\"_self\">1</a><div class=\"footnote-content\"><p>I&#8217;m sure some will debate what &#8220;hallucinations&#8221; in the context of LLMs means and whether that&#8217;s even the right word to use. <a href=\"https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence)\">Wikipedia describes it as</a>, &#8220;a response generated by AI that contains false or misleading information presented as fact.&#8221; Personally, I see why we started calling it that but I think I also would prefer a better term (I&#8217;m open to ideas).</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-2\" id=\"footnote-2\" target=\"_self\">2</a><div class=\"footnote-content\"><p>If it&#8217;s not obvious, these case narratives are heavily AI-generated. I thought it was best to explain the human-LLM analogy with examples like this from my raw notes on types of hallucinations. The examples are just meant to be illustrative and framed to show the similarities between human and LLM failure modes.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-3\" id=\"footnote-3\" target=\"_self\">3</a><div class=\"footnote-content\"><p>Referring to &#8220;modern&#8221; LLMs as models that are OpenAI <a href=\"https://livebench.ai/\">o1-class and above</a>, although it&#8217;s not easy to draw a clear line between &#8220;hallucinations&#8221; due to a truly limited model versus &#8220;hallucinations&#8221; due to missing or poor context. My main claim is that with today&#8217;s models it&#8217;s mostly the latter but of course there&#8217;s no obvious way to measure this.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-4\" id=\"footnote-4\" target=\"_self\">4</a><div class=\"footnote-content\"><p>This kind of stateless intelligence is sometimes compared to the concept of a <a href=\"https://en.wikipedia.org/wiki/Boltzmann_brain\">Boltzmann brain</a>. I think it&#8217;s also fun to think of them similar to a real life <a href=\"https://rickandmorty.fandom.com/wiki/Mr._Meeseeks\">Mr. Meeseeks</a>. For entertainment, here&#8217;s a Gemini generated essay: <a href=\"https://docs.google.com/document/d/1Lw1XAeZs3FoEEBoJaHYAeeZGnqdsJ1t6q9w8XG2R43k/edit?tab=t.0\">Existence is Pain: Mr. Meeseeks, Boltzmann Brains, and Stateless LLMs</a>. It&#8217;s possible that features like <a href=\"https://help.openai.com/en/articles/8590148-memory-faq\">ChatGPT memory</a> will mitigate this but I think we are still in the early stages of figuring out how to make LLMs actually learn from experience.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-5\" id=\"footnote-5\" target=\"_self\">5</a><div class=\"footnote-content\"><p>This reminded me of <a href=\"https://simonwillison.net/2025/Mar/11/using-llms-for-code/\">Simon Willison&#8217;s</a> article, &#8220;One of the reasons I mostly work directly with the ChatGPT and Claude web or app interfaces is that it makes it easier for me to understand exactly what is going into the context. LLM tools that obscure that context from me are less effective.&#8221;</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-6\" id=\"footnote-6\" target=\"_self\">6</a><div class=\"footnote-content\"><p>I am in no way qualified to formalize a &#8220;law&#8221; like this but thought it would be handy to get Gemini to write something up more formal to pressure test this: <a href=\"https://docs.google.com/document/d/1U3zH0klPgiYVjIoZZaRY8CZqMb1fZ_DE6nntC2sCZLA/edit?tab=t.0\">Justification for the Law of Relative Intelligence</a>. I had 2.5-pro and o3 battle this out until I felt the counterarguments became unreasonable.</p></div></div>"
            ],
            "link": "https://blog.sshh.io/p/how-to-stop-your-human-from-hallucinating",
            "publishedAt": "2025-05-04",
            "source": "Shrivu Shankar",
            "summary": "<p>We talk a lot about AI \"hallucinations\"<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-1\" id=\"footnote-anchor-1\" target=\"_self\">1</a> &#8211; when Large Language Models (LLMs) confidently state falsehoods or make things up. As these models become more and more integrated into our daily workflows, there ends up being three types of people:</p><ol><li><p>Those who can&#8217;t use AI non-trivially without a debilitating amount of \"hallucinations\". They know AI makes them less productive.</p></li><li><p>Those who use AI for most things without realizing how much they are blindly trusting its inaccuracies. They don&#8217;t realize when AI makes them less productive or how to cope with inconsistency.</p></li><li><p>Those who use AI for most things but have redirected more time and effort into context communication and review. They understand how to cope with limitations while still being able to leaning on AI consistently (see <a href=\"https://blog.sshh.io/p/working-with-systems-smarter-than\">Working with Systems Smarter Than You</a>).</p></li></ol><p>More recently I&#8217;ve been reflecting on parallels between these archetypes and human systems (e.g. managers managing people ~ people managing AI assistants). Originally, I was thinking through how human organization can influence <a href=\"https://blog.sshh.io/p/building-multi-agent-systems\">multi-agent system design</a>, but also how LLM-based agent design can improve human organization and processes. While being cautious with my anthropomorphizing, I can&#8217;t help but think that types 1 and 2 could be",
            "title": "How to Stop Your Human From Hallucinating"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-05-04"
}