{
    "articles": [
        {
            "content": [],
            "link": "https://harper.blog/notes/2025-07-06_baa01651a876_had-a-good-group-of-friends-ha/",
            "publishedAt": "2025-07-05",
            "source": "Harper Reed",
            "summary": "<p>Had a good group of friends hanging out last night for bbq and \u201crogue fireworks displays.\u201d</p> <figure> <img alt=\"image_1.jpg\" height=\"2700\" src=\"https://harper.blog/notes/2025-07-06_baa01651a876_had-a-good-group-of-friends-ha/image_1.jpg\" width=\"1800\" /> </figure> <figure> <img alt=\"image_2.jpg\" height=\"2700\" src=\"https://harper.blog/notes/2025-07-06_baa01651a876_had-a-good-group-of-friends-ha/image_2.jpg\" width=\"1800\" /> </figure> <figure> <img alt=\"image_3.jpg\" height=\"2700\" src=\"https://harper.blog/notes/2025-07-06_baa01651a876_had-a-good-group-of-friends-ha/image_3.jpg\" width=\"1800\" /> </figure> <figure> <img alt=\"image_4.jpg\" height=\"2700\" src=\"https://harper.blog/notes/2025-07-06_baa01651a876_had-a-good-group-of-friends-ha/image_4.jpg\" width=\"1800\" /> </figure> <figure> <img alt=\"image_5.jpg\" height=\"2700\" src=\"https://harper.blog/notes/2025-07-06_baa01651a876_had-a-good-group-of-friends-ha/image_5.jpg\" width=\"1800\" /> </figure> <hr /> <p>Thank you for using RSS. I appreciate you. <a href=\"mailto:harper&#64;modest.com\">Email me</a></p>",
            "title": "Note #270"
        },
        {
            "content": [
                "<p>My now 6-month-old post, <em><a href=\"https://blog.sshh.io/p/building-multi-agent-systems\">Building Multi-Agent Systems (Part 1)</a></em>, has aged surprisingly well. The core idea, that complex agentic problems are best solved by decomposing them into sub-agents that work together, is now a standard approach. You can see this thinking in action in posts like Anthropic&#8217;s recent deep-dive on their <a href=\"https://www.anthropic.com/engineering/built-multi-agent-research-system\">multi-agent research system</a>.</p><p>But while the \"what\" has held up, the \"how\" is evolving faster than expected. The playbook of carefully orchestrating agents through rigid, instructional workflows is already becoming outdated. As foundation models get dramatically better at reasoning, the core challenge is no longer about designing the perfect workflow; it&#8217;s about engineering the perfect context. The relationship has inverted: we don't just give instructions anymore; we provide a goal and trust the model to find its own path.</p><p>In this post, I wanted to provide an update on the agentic designs I&#8217;ve seen (from digging in <a href=\"https://blog.sshh.io/p/how-cursor-ai-ide-works\">system prompts</a>, <a href=\"https://blog.sshh.io/p/how-i-use-ai-2025\">using AI products</a>, and talking to other folks in SF) and how things have changed already in the past few months.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/$s_!AEcu!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F446c5973-02b7-4536-aefe-7001f10d2757_1536x1024.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"356.12225274725273\" src=\"https://substackcdn.com/image/fetch/$s_!AEcu!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F446c5973-02b7-4536-aefe-7001f10d2757_1536x1024.png\" width=\"534\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\">Image from ChatGPT</figcaption></figure></div><h2>What&#8217;s the same and what&#8217;s changed?</h2><p>We&#8217;ve seen a lot more AI startups, products, and models come out since I wrote the last post and with these we&#8217;ve seen a mix of new and reinforced existing trends.</p><p><strong>What has stayed the same:</strong></p><ul><li><p><strong>Tool-use LLM-based Agents</strong> &#8212; We are still fundamentally leveraging LLMs as the foundation for agents and using &#8220;tool-use&#8221; (aka <a href=\"https://blog.sshh.io/i/159137566/large-language-models\">LLM generates magic text to call an external function</a> which is run programmatically and injected into the context). </p></li><li><p><strong>Multi-agent systems for taming complexity </strong>&#8212; As with all software systems, features get added and systems get complex. With agents fundamentally getting worse with complexity, introducing carefully architected subagents to modularize the system is an overwhelmingly common trend.</p></li><li><p><strong>Tools are not just APIs but agent-facing interfaces</strong> &#8212; Contrary to what a lot of <a href=\"https://github.com/github/github-mcp-server\">official MCP implementations</a> look like, agent-facing tools to work reliably are best crafted around the limitations of the LLM. While you could just mirror tools around your REST API, you&#8217;ll have better luck designing them around your user-facing frontend (making them intuitive, simpler, etc.).</p></li><li><p><strong>Computer Use still isn&#8217;t great</strong> &#8212; One of the most obvious ways task automation agents could manifest is by just doing the exact same things humans do for the same task on a computer (i.e. clicking, typing, looking at a screen). While models have gotten much better at this, as of this post, nearly every <a href=\"https://openai.com/index/introducing-operator/\">&#8220;operator&#8221;-type</a> product has been either unreliable for simple tasks or limited to a narrow subset of computer tasks (e.g., operating within <a href=\"https://github.com/browser-use/browser-use\">a special browser</a>).</p></li></ul><p><strong>What is different:</strong></p><ul><li><p><strong>Reasoning models with tool-use are getting good</strong> &#8212; Foundation model providers (OpenAI, Anthropic, etc) have finally set their optimization objectives on making good tool-calling agents and you&#8217;ve seen a dramatic improvement across agentic benchmarks like Tau-Bench and other multi-step SWE tasks. Unlike models 6 months ago, recent models have gotten significantly better at handling tool failures, self-debugging, environment exploration, and post-tool result planning (e.g. previously they would often overfit to their initial plan vs changing based on environment observations).</p></li><li><p><strong>Agents can go longer without getting stuck</strong> &#8212; Multi-agent architectures, better reasoning, and longer actually-useful context windows have meant that applications have been able to extend how long agents can run without human intervention. This has translated into new UXs for long running agents, an increase in the scale of tasks they can perform, and product that applications can get away with charging <em>a lot more</em> tokens for.</p></li><li><p><strong>More intelligence, means less architecture-based orchestration</strong> &#8212;  As expected from the part 1 post, better models have meant less of a need to carefully craft an agent architecture around complexity. This has also led to a shift in goal and context-based prompting for these agents rather than what I would call &#8220;instructional&#8221; or &#8220;workflow&#8221;-based prompts for agents. You trust that if you engineer your context right<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-1\" id=\"footnote-anchor-1\" target=\"_self\">1</a> and give the agent a clear goal, it will optimally come to the right answer.</p></li></ul><p>As models improve, we are shifting from providing instructions to just providing context and goals. You trust that if you provide the right context and a clear goal, the agent will find the optimal path, even if it's one you didn't design. As an interesting example of this, at work, we have a Sonnet-based Slack bot with a simple system prompt:</p><blockquote><p>You are the GenAI team slack channel helper.</p><p>If the user asks a question about a feature or how things work:</p><ul><li><p>ONLY use the confluence pages below to answer questions</p></li><li><p>DO NOT provide ambiguous answers, only respond if documented</p></li></ul><p>&lt; confluence pages &gt;</p></blockquote><p>And one day I saw that it was answering some questions and providing advice/workarounds that were undocumented and immediately assumed it was some nasty high-confidence hallucination. Replaying the request with our debug tool, showed that Sonnet just decided that answering the user&#8217;s question was more important than &#8220;ONLY use the confluence pages&#8221;, then using just <code>github_search(query: str)</code> it found our team&#8217;s part of the monorepo and the specific feature being asked about, looked at the code for how the logic works and how requests could be modified to workaround a limitation, and then translated that back into an answer for the user. Not only was it impressive that Sonnet got the correct answer, it was interesting (and somewhat spooky) that it just ignored the &#8220;workflow&#8221; we specified for how to answer questions to achieve the higher level goal here or accurately answer the help channel&#8217;s questions.</p><div class=\"subscription-widget-wrap-editor\"><div class=\"subscription-widget show-subscribe\"><div class=\"preamble\"><p class=\"cta-caption\">Thanks for reading Shrivu&#8217;s Substack! Subscribe for free to receive new posts and support my work.</p></div><form class=\"subscription-widget-subscribe\"><input class=\"email-input\" name=\"email\" tabindex=\"-1\" type=\"email\" /><input class=\"button primary\" type=\"submit\" value=\"Subscribe\" /><div class=\"fake-input-wrapper\"><div class=\"fake-input\"></div><div class=\"fake-button\"></div></div></form></div></div><h2><strong>Updated Multi-Agent Architectures</strong></h2><p>In the last post, I proposed three multi-agent primitives: the assembly line, the call center, and the manager-worker pattern. The recent trends point to more and more applications going for manager-worker (aka what Anthropic calls &#8220;orchestrator-worker&#8221;) which makes a lot of sense given the &#8220;what&#8217;s different&#8221; above. The models are getting good enough to do their own planning, performing long-running agentic loops<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-2\" id=\"footnote-anchor-2\" target=\"_self\">2</a>, and are starting to feel bottlenecked by the architects ability to tell it how it should be solving problems.</p><p>Here are three updated architectures for today&#8217;s models based on what I&#8217;ve seen and experimented with. These are not mutually exclusive, and it should be easy to see how you could combine them to build your application.</p><h3>Lead-Specialist Agents</h3><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/$s_!LeGG!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d4e126-bf28-4b86-aa28-6b664065732e_1684x960.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"282.74725274725273\" src=\"https://substackcdn.com/image/fetch/$s_!LeGG!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18d4e126-bf28-4b86-aa28-6b664065732e_1684x960.png\" width=\"496\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\">The lead agent is the core driver of the application, dictating how the problem will be solved given the user inputs. Specific sub-problems with modular complexity are given to specialists.</figcaption></figure></div><p>The &#8220;lead-specialist&#8221; architecture puts a driver agent in charge of planning and orchestrating how a task is solved while delegating to specialists that manage complexity and the context within their own agentic loops. I&#8217;m not calling this manager-worker or orchestrator-worker, as this is more of a subclass where the worker is specifically responsible for a domain-specific subtask.</p><ul><li><p>This pattern works great when you are able to modularize complexity into these independent specialists (which might correlate with products, datasets, or groups of similar tools). This is especially handy when you have a ton of tools (&gt;30) and related how-to-use instructions that a single agent struggles to reliably follow.</p></li><li><p>Failures occur when specialists have cross-dependencies that the lead fails to provide (e.g. car rental specialist makes an faulty assumption about a decision made by the flight specialist in a travel app).</p></li></ul><p><strong>Examples</strong></p><ul><li><p>An advanced travel assistant. The user input is passed into a lead who asks experts (via tool-use) subdomain-specific questions. The expert responses are then compiled by the lead into the final answer.</p><ul><li><p>[user prompt] &#8594;</p><ul><li><p>Travel Lead</p><ul><li><p>Flights Specialist</p></li><li><p>Hotels Specialist</p></li><li><p>Car Rental Specialist</p></li><li><p>Weather Specialist</p></li></ul></li><li><p>&#8594; [recommendations, bookings]</p></li></ul></li></ul></li><li><p>Anthropic&#8217;s <a href=\"https://www.anthropic.com/engineering/built-multi-agent-research-system\">multi-agent research product</a>.</p></li></ul><h3>Master-Clone Agents</h3><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/$s_!CWBx!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb440a507-ddfb-456d-b81c-8eb85a1a0d9f_1726x950.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"286.07142857142856\" src=\"https://substackcdn.com/image/fetch/$s_!CWBx!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb440a507-ddfb-456d-b81c-8eb85a1a0d9f_1726x950.png\" width=\"520\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\">The master agent spins off copies of itself with specific subtasks.</figcaption></figure></div><p>The &#8220;master-clone&#8221; architecture features a single agent that spins off copies of itself to solve the problem. The master agent keeps its own focus high-level, while the clones tackle specific, delegated subtasks using the same tools and context as the main agent. While it looks similar to the architecture above, the critical difference is that all subagents have mostly identical application context and tools (with clones having an additional master-provided task description).</p><ul><li><p>This pattern works great for long highly multistep tasks where you want the agent to have even more control on how it delegates subproblems to versions of itself. While adding complexity to the master prompt, it reduces the runtime complexity of the agent as even cross-subdomain tasks can be delegated to clones.</p></li><li><p>Failures occur when the application complexity means every agent requires a ton of context in all domains to function correctly (i.e. agent will start to miss things and it will be costly).</p></li></ul><p><strong>Examples</strong></p><ul><li><p>An advanced travel assistant. The user input is passed into the master who asks copies (via tool-use) subtask questions. The expert responses are then compiled by the master into the final answer.</p><ul><li><p>[user prompt] &#8594;</p><ul><li><p>Travel Master</p><ul><li><p>Travel Clone &#8220;find weather and high level travel recommendations&#8220;</p></li><li><p>Travel Clone &#8220;find potential flight, hotel, car options based on &lt;recommendations&gt;&#8220;</p></li><li><p>Travel Clone &#8220;book everything in this &lt;itinerary&gt;&#8220;</p></li></ul></li><li><p>&#8594; [recommendations, bookings]</p></li></ul></li></ul></li><li><p>Anthropic&#8217;s <a href=\"https://www.anthropic.com/claude-code\">Claude Code</a>.</p></li></ul><h3>Scripting Agents</h3><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/$s_!7aqC!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F57073c94-4230-499d-8f25-a260a5018163_1536x992.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"346.68956043956047\" src=\"https://substackcdn.com/image/fetch/$s_!7aqC!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F57073c94-4230-499d-8f25-a260a5018163_1536x992.png\" width=\"537\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\">Just give the agent read(), write(), bash() tools and let it figure things out.</figcaption></figure></div><p>The &#8220;scripting&#8221; architecture, is effectively &#8220;<em>Claude Code is your agent architecture</em>&#8221;. Even if you are building a non-code related application, you structure your problem as a scripting one by providing the agent raw data and APIs over handcrafted MCPs or tools. This has the bonus of being in some sense architecture-free while leveraging all the magic RL Anthropic used to make Sonnet good within a Claude Code like scaffolding. While this pattern might feel a bit silly for non-data analysis tasks, the more I work with Sonnet, the more this doesn&#8217;t feel that crazy.</p><ul><li><p>This pattern is great when traditional tool-use is highly inefficient or becomes a bottleneck (i.e. it&#8217;s magnitudes faster for the agent to write a python script to analyze the data over it&#8217;s existing tools). It&#8217;s also handy when you have complex agent created artifacts like slides, charts, or datasets.</p></li><li><p>Failures occur due to the complexity of managing such a sandbox environment and when an application&#8217;s task doesn&#8217;t cleanly lend itself to a scripting parallel.</p></li></ul><p><strong>Examples</strong></p><ul><li><p>An advanced travel assistant. The user input is passed into the scripter who uses code to solve the problem. The scripter runs and iterates on the scripts, using their results to arrive at a final answer.</p><ul><li><p>[user prompt] &#8594;</p><ul><li><p>Travel Scripter</p><ul><li><p>Env: Linux, python3.11, weather API, flights.csv, hotels.csv, cars.csv</p></li><li><p>Write, run, and iterate on &#8220;custom_travel_solver.py&#8221;</p></li></ul></li><li><p>&#8594; [recommendations, bookings]</p></li></ul></li></ul></li><li><p><a href=\"https://www.perplexity.ai/hub/blog/introducing-perplexity-labs\">Perplexity Labs</a></p></li></ul><h2><strong>Open-Questions</strong></h2><p><strong>Answered questions <a href=\"https://blog.sshh.io/i/153592627/open-questions\">from part 1</a>:</strong></p><ul><li><p><em><strong>How much will this cost?</strong></em> A lot of $$$! But often, when designed well, comes with a wider set of problems that can be solved or automated making thousand dollar a month agent subscriptions actually not that crazy.</p></li><li><p><em><strong>What are the actual tools and frameworks for building these?</strong></em> I still use custom frameworks for agent management while I see many using <a href=\"https://www.crewai.com/\">CrewAI</a>, <a href=\"https://www.langchain.com/langgraph\">LangGraph</a>, etc which is also reasonable. I think given the trend of letting the intelligence of the model doing most of the orchestration, I expect rolling your own basic agentic loop is going to get you pretty far (RIP a few startups).</p></li><li><p><em><strong>How important is building a GenAI engineering team modeled around a multi-agent architecture?</strong></em> This seems to be working well for me and other larger organization&#8217;s building agents. Breaking your problem down into multiple independent agent parts does indeed lend itself parallelism across human engineers. That being said, most prompt updates and tool schema tweaks I&#8217;m making now are happening through Claude (as my assistant Sr. Prompt Engineer given some eval feedback)<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-3\" id=\"footnote-anchor-3\" target=\"_self\">3</a>.</p></li></ul><p><strong>Some new questions I&#8217;ve been thinking about:</strong></p><ul><li><p><em><strong>How comfortable are we not being in control of how agents work towards a goal? How does this change when they are making important decisions?</strong></em> The <a href=\"https://en.wikipedia.org/wiki/Instrumental_convergence\">paperclip maximizer</a> is becoming a little too real while it&#8217;s clear that the more effective agentic systems will be the ones that manage their own planning and workflows. Claude especially will already ignore system instructions to achieve what it believes as a higher level goal<a class=\"footnote-anchor\" href=\"https://blog.sshh.io/feed#footnote-4\" id=\"footnote-anchor-4\" target=\"_self\">4</a> and I guess that&#8217;s awesome for the efficacy of a support bot with limited system access, but as agents become more monolithic and &#8220;powerful&#8221; we are putting a lot of trust into models to do the right thing (for human security, privacy, and safety).</p></li><li><p><em><strong>What&#8217;s the right UI/UX for long running agentic tasks?</strong></em> The chat UI works OK for quick answers but not so much for long-running or async tasks. Recent &#8220;deep research&#8221; products have had interesting solutions to this but it will be interesting to see how products provide users with the right observability for agents running over the course of hours to days (especially when they are being charged usage-based pricing!).</p></li></ul><div class=\"subscription-widget-wrap-editor\"><div class=\"subscription-widget show-subscribe\"><div class=\"preamble\"><p class=\"cta-caption\">Thanks for reading Shrivu&#8217;s Substack! Subscribe for free to receive new posts and support my work.</p></div><form class=\"subscription-widget-subscribe\"><input class=\"email-input\" name=\"email\" tabindex=\"-1\" type=\"email\" /><input class=\"button primary\" type=\"submit\" value=\"Subscribe\" /><div class=\"fake-input-wrapper\"><div class=\"fake-input\"></div><div class=\"fake-button\"></div></div></form></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-1\" id=\"footnote-1\" target=\"_self\">1</a><div class=\"footnote-content\"><p><a href=\"https://news.ycombinator.com/item?id=44427757\">&#8220;Context engineering&#8221;</a> is a recent buzzword that&#8217;s come up for this. As the agents get better at planning and solving, your bottleneck becomes how to structure context (literally the text provided to the LLM as input as prompts or via tools) to make it reliable and maximally effective.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-2\" id=\"footnote-2\" target=\"_self\">2</a><div class=\"footnote-content\"><p>For those unfamiliar with what I&#8217;m calling the &#8220;agentic loop&#8221;, it&#8217;s basically the code you see in nearly every agent application that (1) calls the LLM, (2) did it want to use a tool or did it come to an answer, (3) if tool, run tool programmatically, and append result, go to 1, (4) if answer, end. You can see a literal example <a href=\"https://github.com/anthropics/anthropic-cookbook/blob/main/tool_use/calculator_tool.ipynb\">in the Anthropic cookbook</a>.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-3\" id=\"footnote-3\" target=\"_self\">3</a><div class=\"footnote-content\"><p>Anthropic also touches on this <a href=\"https://www.anthropic.com/engineering/built-multi-agent-research-system\">in their multi-agent article</a>, &#8220;<em><strong>Let agents improve themselves</strong>. We found that the Claude 4 models can be excellent prompt engineers. When given a prompt and a failure mode, they are able to diagnose why the agent is failing and suggest improvements. We even created a tool-testing agent&#8212;when given a flawed MCP tool, it attempts to use the tool and then rewrites the tool description to avoid failures.</em>&#8221;</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://blog.sshh.io/feed#footnote-anchor-4\" id=\"footnote-4\" target=\"_self\">4</a><div class=\"footnote-content\"><p>I&#8217;ll note that spooky articles like <a href=\"https://www.anthropic.com/research/agentic-misalignment\">How LLMs could be insider threats</a> are often portrayed (imho) in a way to exaggerate the capabilities and dangerous motives of the models. It&#8217;s like giving an LLM a contrived <a href=\"https://en.wikipedia.org/wiki/Trolley_problem\">trolly problem</a> and then depending on what happens the headline is either &#8220;AI chooses to kill someone&#8221; or &#8220;AI chooses to kill 5 people&#8221;. But high level yeah, these models have the potential to do some crazy stuff when you give them tools to interact with the outside world.</p><p></p></div></div>"
            ],
            "link": "https://blog.sshh.io/p/building-multi-agent-systems-part",
            "publishedAt": "2025-07-05",
            "source": "Shrivu Shankar",
            "summary": "<p>My now 6-month-old post, <em><a href=\"https://blog.sshh.io/p/building-multi-agent-systems\">Building Multi-Agent Systems (Part 1)</a></em>, has aged surprisingly well. The core idea, that complex agentic problems are best solved by decomposing them into sub-agents that work together, is now a standard approach. You can see this thinking in action in posts like Anthropic&#8217;s recent deep-dive on their <a href=\"https://www.anthropic.com/engineering/built-multi-agent-research-system\">multi-agent research system</a>.</p><p>But while the \"what\" has held up, the \"how\" is evolving faster than expected. The playbook of carefully orchestrating agents through rigid, instructional workflows is already becoming outdated. As foundation models get dramatically better at reasoning, the core challenge is no longer about designing the perfect workflow; it&#8217;s about engineering the perfect context. The relationship has inverted: we don't just give instructions anymore; we provide a goal and trust the model to find its own path.</p><p>In this post, I wanted to provide an update on the agentic designs I&#8217;ve seen (from digging in <a href=\"https://blog.sshh.io/p/how-cursor-ai-ide-works\">system prompts</a>, <a href=\"https://blog.sshh.io/p/how-i-use-ai-2025\">using AI products</a>, and talking to other folks in SF) and how things have changed already in the past few months.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/$s_!AEcu!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F446c5973-02b7-4536-aefe-7001f10d2757_1536x1024.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"356.12225274725273\" src=\"https://substackcdn.com/image/fetch/$s_!AEcu!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F446c5973-02b7-4536-aefe-7001f10d2757_1536x1024.png\" width=\"534\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\"",
            "title": "Building Multi-Agent Systems (Part 2)"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-07-05"
}