{
    "articles": [
        {
            "content": [],
            "link": "https://bernsteinbear.com/blog/compiling-a-lisp-12/?utm_source=rss",
            "publishedAt": "2025-08-10",
            "source": "Max Bernstein",
            "summary": "<p><span> <em><a href=\"https://bernsteinbear.com/blog/compiling-a-lisp-0/\">first</a></em> \u2013 <em><a href=\"https://bernsteinbear.com/blog/compiling-a-lisp-11/\">previous</a></em> </span></p> <p><em>EDIT: /u/thunderseethe correctly points out that this is closure conversion, not lambda lifting, so I have adjusted the post title from \u201clambda lifting\u201d to \u201cclosure conversion\u201d accordingly. Thanks!</em></p> <p>I didn\u2019t think this day would come, but I picked up the <a href=\"https://bernsteinbear.com/assets/img/11-ghuloum.pdf\">Ghuloum tutorial</a> (PDF) again and I got a little bit further. There\u2019s just one caveat: I have rewritten the implementation in Python. It\u2019s available in the <a href=\"https://github.com/tekknolagi/ghuloum\">same repo</a> in <a href=\"https://github.com/tekknolagi/ghuloum/blob/trunk/compiler.py\">compiler.py</a>. It\u2019s brief, coming in at a little over 300 LOC + tests (compared to the C version\u2019s 1200 LOC + tests).</p> <p>I guess there\u2019s another caveat, too, which is that the Python version has no S-expression reader. But that\u2019s fine: consider it an exercise for you, dear reader. That\u2019s hardly the most interesting part of the tutorial.</p> <p>Oh, and I also dropped the instruction encoding. I\u2019m doing text assembly now. Womp womp.</p> <p>Anyway, converting the lambdas as required in the paper requires three things:</p> <ul> <li>Keeping track of which variables are bound</li> <li>Keeping track of which variables are free in a given lambda</li> <li>Keeping a running list of <code class=\"language-plaintext highlighter-rouge\">code</code> objects that we create as we recurse</li> </ul> <p>We",
            "title": "Compiling a Lisp: Closure conversion"
        },
        {
            "content": [],
            "link": "https://simonwillison.net/2025/Aug/10/qwen3-4b/#atom-entries",
            "publishedAt": "2025-08-10",
            "source": "Simon Willison",
            "summary": "<p>I've fallen a few days behind keeping up with Qwen. They released two new 4B models last week: <a href=\"https://huggingface.co/Qwen/Qwen3-4B-Instruct-2507\">Qwen3-4B-Instruct-2507</a> and its thinking equivalent <a href=\"https://huggingface.co/Qwen/Qwen3-4B-Thinking-2507\">Qwen3-4B-Thinking-2507</a>.</p> <p>These are relatively tiny models that punch <em>way</em> above their weight. I\u2019ve been running the 8bit GGUF varieties via LM Studio (here's <a href=\"https://huggingface.co/lmstudio-community/Qwen3-4B-Instruct-2507-GGUF\">Instruct</a>, here's <a href=\"https://huggingface.co/lmstudio-community/Qwen3-4B-Thinking-2507-GGUF\">Thinking</a>) - both of them are 4GB downloads that use around 4.3GB of my M2 MacBook Pro\u2019s system RAM while running. Both are way more capable than I would expect from such small files.</p> <p>Qwen3-4B-Thinking is the first model I've tried which called out the absurdity of being asked to draw <a href=\"https://simonwillison.net/tags/pelican-riding-a-bicycle/\">a pelican riding a bicycle</a>!</p> <p>Here's <a href=\"https://gist.github.com/simonw/cd41769de4791b98ba43a17c6ff32ee1\">the full transcript</a> - some highlights from the thinking trace:</p> <blockquote> <p>Okay, the user asked for an SVG of a pelican riding a bicycle. That's... oddly specific and completely unrealistic.</p> <p>First reaction: Pelicans don't ride bicycles. They're birds that fly or swim, not human-like vehicles. This feels like a mix-up - maybe they meant \"a cyclist\" but typed \"pelican\"? Or perhaps it's a joke?</p> <p>Hmm, user might be:</p> <ul> <li>A kid playing with words (pelican + bicycle = silly combo)</li> <li>Someone testing if I'll generate impossible images</li> <li>Actually wanting",
            "title": "Qwen3-4B-Thinking: \"This is art - pelicans don't ride bikes!\""
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-08-10"
}