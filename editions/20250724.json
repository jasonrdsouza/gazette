{
    "articles": [
        {
            "content": [
                "<p>I minify all the HTML on this website \u2013 removing unnecessary whitespace, tidying up attributes, optimising HTML entities, and so on.\nThis makes each page smaller, and theoretically the website should be slightly faster.</p>\n\n<p>I\u2019m not going to pretend this step is justified by the numbers.\nMy pages are already pretty small pre-minification, and it only reduces the average page size by about 4%.\nIn June, minification probably saved less than MiB of bandwidth.</p>\n\n<p>But I do it anyway.\nI minify HTML because I like tinkering with the website, and I enjoy finding ways to make it that little bit faster or more efficient.\nI recently changed the way I\u2019m minifying HTML, and I thought this would be a good time to compare the three approaches I\u2019ve used and share a few things I learned about HTML along the way.</p>\n\n<p>I build this website using <a href=\"https://jekyllrb.com\">Jekyll</a>, so I\u2019ve looked for Jekyll or Ruby-based solutions.</p>\n\n<blockquote class=\"toc\">\n  <h3>Table of contents</h3>\n  <ul>\n    <li><a href=\"https://alexwlchan.net/2025/minifying-html/#layout\">Approach #1: Compress HTML in Jekyll, by Anatol Broder</a></li>\n    <li><a href=\"https://alexwlchan.net/2025/minifying-html/#htmlcompressor\">Approach #2: The htmlcompressor gem, by Paolo Chiodi</a></li>\n    <li><a href=\"https://alexwlchan.net/2025/minifying-html/#minifyhtml\">Approach #3: The minify-html library, by Wilson Lin</a></li>\n    <li><a href=\"https://alexwlchan.net/2025/minifying-html/#verify\">Minify, but verify</a></li>\n    <li><a href=\"https://alexwlchan.net/2025/minifying-html/#comparison\">Comparing the three approaches</a></li>\n  </ul>\n</blockquote>\n\n\n\n<h2 id=\"layout\">Approach #1: <a href=\"http://jch.penibelst.de/\">Compress HTML in Jekyll</a>, by Anatol Broder</h2>\n\n<p>This is a Jekyll layout that compresses HTML.\nIt\u2019s a single HTML file written in pure <a href=\"https://shopify.github.io/liquid/\">Liquid</a> (the templating language used by Jekyll).</p>\n\n<p>First you save the HTML file to <code>_layouts/compress.html</code>, then reference it in your highest-level layout.\nFor example, in <code>_layouts/default.html</code> you might write:</p>\n<pre><code>---\nlayout: compress\n---\n\n<span class=\"nt\">&lt;html&gt;</span>\n{{ content }}\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<p>Because it\u2019s a single HTML file, it\u2019s easy to install and doesn\u2019t require any plugins.\nThis is useful if you\u2019re running in an environment where plugins are restricted or disallowed (which I think includes <a href=\"https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll#plugins\">GitHub Pages</a>, although I\u2019m not 100% sure).</p>\n\n<p>The downside is that the single HTML file can be tricky to debug, it only minifies HTML (not CSS or JavaScript), and there\u2019s no easy way to cache the output.</p>\n\n<h2 id=\"htmlcompressor\">Approach #2: The <a href=\"https://github.com/paolochiodi/htmlcompressor/\">htmlcompressor gem</a>, by Paolo Chiodi</h2>\n\n<p>The <a href=\"https://github.com/paolochiodi/htmlcompressor/\">htmlcompressor gem</a> is a Ruby port of <a href=\"https://code.google.com/archive/p/htmlcompressor/\">Google\u2019s Java-based HtmlCompressor</a>.\nThe README describes it as an \u201calpha version\u201d, but in my usage it was very stable and it has a simple API.</p>\n\n<p>I start by changing my <code>compress.html</code> layout to pass the page content to a <code>compress_html</code> filter:</p>\n<pre><code>---\n---\n\n{{ content | compress_html }}\n</code></pre>\n<p>This filter is defined as <a href=\"https://jekyllrb.com/docs/plugins/filters/\">a\u00a0custom plugin</a>; I save the following code in <code>_plugins/compress_html.rb</code>:</p>\n<pre><code><span class=\"k\">def</span> <span class=\"nf\">run_compress_html</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n  <span class=\"nb\">require</span> <span class=\"s1\">'htmlcompressor'</span>\n\n  <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"ss\">remove_intertag_spaces: </span><span class=\"kp\">true</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">compressor</span> <span class=\"o\">=</span> <span class=\"no\">HtmlCompressor</span><span class=\"o\">::</span><span class=\"no\">Compressor</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n  <span class=\"n\">compressor</span><span class=\"p\">.</span><span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">module</span> <span class=\"nn\">Jekyll</span>\n  <span class=\"k\">module</span> <span class=\"nn\">CompressHtmlFilter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">compress_html</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n      <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"no\">Jekyll</span><span class=\"o\">::</span><span class=\"no\">Cache</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"s1\">'CompressHtml'</span><span class=\"p\">)</span>\n\n      <span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"nf\">getset</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">run_compress_html</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"no\">Liquid</span><span class=\"o\">::</span><span class=\"no\">Template</span><span class=\"p\">.</span><span class=\"nf\">register_filter</span><span class=\"p\">(</span><span class=\"no\">Jekyll</span><span class=\"o\">::</span><span class=\"no\">CompressHtmlFilter</span><span class=\"p\">)</span>\n</code></pre>\n<p>I mostly stick with the default options; the only extra rule I enabled was to remove inter-tag spaces.\nConsider the following example:</p>\n<pre><code><span class=\"nt\">&lt;p&gt;</span>hello world<span class=\"nt\">&lt;/p&gt;</span> <span class=\"nt\">&lt;p&gt;</span>my name is Alex<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre>\n<p>By default, htmlcompressor will leave the space between the closing <code>&lt;/p&gt;</code> and the opening <code>&lt;p&gt;</code> as-is.\nEnabling <code>remove_intertag_spaces</code> makes it a bit more aggressive, and it removes that space.</p>\n\n<p>I\u2019m using the <a href=\"https://alexwlchan.net/2024/jekyll-caching/\">Jekyll cache</a> to save the results of the compression \u2013 most pages don\u2019t change from build-to-build, and it\u2019s faster to cache the results than recompress the HTML each time.</p>\n\n<p>The gem seems abandoned \u2013 the last push to GitHub was in 2017.</p>\n\n<h2 id=\"minifyhtml\">Approach #3: The <a href=\"https://github.com/wilsonzlin/minify-html\">minify-html library</a>, by Wilson Lin</h2>\n\n<p>This is a Rust-based HTML minifier, with bindings for a variety of languages, including Ruby, Python, and Node.\nIt\u2019s very fast, and even more aggressive than other minifiers.</p>\n\n<p>I use it in a very similar way to <code>htmlcompressor</code>.\nI call the same <code>compress_html</code> filter in <code>_layouts/compress.html</code>, and then my <code>run_compress_html</code> in <code>_plugins/compress_html.rb</code> is a bit different:</p>\n<pre><code><span class=\"k\">def</span> <span class=\"nf\">run_compress_html</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n  <span class=\"nb\">require</span> <span class=\"s1\">'minify_html'</span>\n\n  <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"ss\">keep_html_and_head_opening_tags: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n    <span class=\"ss\">keep_closing_tags: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n    <span class=\"ss\">minify_css: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n    <span class=\"ss\">minify_js: </span><span class=\"kp\">true</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">minify_html</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>This is a much more aggressive minifier.\nFor example, it turns out that the <code>&lt;html&gt;</code> and <code>&lt;head&gt;</code> elements are optional in an HTML5 document, so this minifier removes them if it can.\nI\u2019ve disabled this behaviour, because I\u2019m old-fashioned and I like my pages to have <code>&lt;html&gt;</code> and <code>&lt;head&gt;</code> tags.</p>\n\n<p>This library also allows minifying inline CSS and JavaScript, which is a nice bonus.\nThat has some rough edges though: there\u2019s <a href=\"https://github.com/wilsonzlin/minify-html/issues/242\">an\u00a0open issue with JS minification</a>, and I had to tweak several of my if-else statements to work with the minifier.\nActivity on the GitHub repository is sporadic, so I don\u2019t know if that will get fixed any time soon.</p>\n\n<h2 id=\"verify\">Minify, but verify</h2>\n\n<p>After I minify HTML, but before I publish the site, I run <a href=\"https://alexwlchan.net/2019/checking-jekyll-sites-with-htmlproofer/\">HTML-Proofer to validate my HTML</a>.</p>\n\n<p>I\u2019m not sure this has ever caught an issue introduced by a minifer, but it gives me peace of mind that these tools aren\u2019t mangling my HTML.\n(It has caught plenty of issues caused by my mistakes!)</p>\n\n<h2 id=\"comparison\">Comparing the three approaches</h2>\n\n\n\n<p>There are two key metrics for HTML minifiers:</p>\n\n<ul>\n  <li>\n    <p><strong>Speed:</strong> this is a dead heat.\nWhen I built the site with a warm cache, it takes about 2.5s whatever minifier I\u2019m using.\nThe <code>htmlcompressor</code> gem and <code>minify-html</code> library are much slower if I have a cold cache, but that\u2019s only a few extra seconds and it\u2019s rare for me to build the site that way.</p>\n  </li>\n  <li>\n    <p><strong>File size:</strong> the Ruby and Rust-based minifiers achieve slightly better minification, because they\u2019re more aggressive in what they trim.\nFor example, they\u2019re smarter about removing unnecessary spaces and quoting around attribute values.</p>\n\n    <p>Here\u2019s the average page size after minification:</p>\n\n    <table id=\"sizes\">\n  <tr>\n    <th>Approach</th>\n    <th>Average HTML page size</th>\n  </tr>\n  <tr>\n    <td>Without minification</td>\n    <td title=\"15,306\u00a0bytes\">14.9 KiB</td>\n  </tr>\n  <tr>\n    <td>Compress HTML in Jekyll 3.2.0</td>\n    <td title=\"14,617\u00a0bytes\">14.3 KiB</td>\n  </tr>\n  <tr>\n    <td>htmlcompressor 0.4.0</td>\n    <td title=\"14,383\u00a0bytes\">14.0 KiB</td>\n  </tr>\n  <tr>\n    <td>minify-html 0.16.4</td>\n    <td title=\"13,844\u00a0bytes\">13.5 KiB</td>\n  </tr>\n</table>\n  </li>\n</ul>\n\n<p>I\u2019m currently using minify-html.\nThis is partly because it gets slightly smaller page sizes, and partly because it has bindings in other languages.\nThis website is my only major project that uses Ruby, and so I\u2019m always keen to find things I can share in my other non-Ruby projects.\nIf minify-html works for me (and it is so far), I can imagine using it elsewhere.</p>\n\n\n    <p>[If the formatting of this post looks odd in your feed reader, <a href=\"https://alexwlchan.net/2025/minifying-html/?ref=rss\">visit the original article</a>]</p>"
            ],
            "link": "https://alexwlchan.net/2025/minifying-html/?ref=rss",
            "publishedAt": "2025-07-24",
            "source": "Alex Chan",
            "summary": "<p>I minify all the HTML on this website \u2013 removing unnecessary whitespace, tidying up attributes, optimising HTML entities, and so on. This makes each page smaller, and theoretically the website should be slightly faster.</p> <p>I\u2019m not going to pretend this step is justified by the numbers. My pages are already pretty small pre-minification, and it only reduces the average page size by about 4%. In June, minification probably saved less than MiB of bandwidth.</p> <p>But I do it anyway. I minify HTML because I like tinkering with the website, and I enjoy finding ways to make it that little bit faster or more efficient. I recently changed the way I\u2019m minifying HTML, and I thought this would be a good time to compare the three approaches I\u2019ve used and share a few things I learned about HTML along the way.</p> <p>I build this website using <a href=\"https://jekyllrb.com\">Jekyll</a>, so I\u2019ve looked for Jekyll or Ruby-based solutions.</p> <blockquote class=\"toc\"> <h3>Table of contents</h3> <ul> <li><a href=\"https://alexwlchan.net/2025/minifying-html/#layout\">Approach #1: Compress HTML in Jekyll, by Anatol Broder</a></li> <li><a href=\"https://alexwlchan.net/2025/minifying-html/#htmlcompressor\">Approach #2: The htmlcompressor gem, by Paolo Chiodi</a></li> <li><a href=\"https://alexwlchan.net/2025/minifying-html/#minifyhtml\">Approach #3: The minify-html library, by Wilson Lin</a></li> <li><a href=\"https://alexwlchan.net/2025/minifying-html/#verify\">Minify, but verify</a></li> <li><a href=\"https://alexwlchan.net/2025/minifying-html/#comparison\">Comparing the three approaches</a></li> </ul> </blockquote>",
            "title": "Minifying HTML on my Jekyll website"
        },
        {
            "content": [
                "<p>I wrote a lot of blog posts over my time at Parse, but they all evaporated after <a href=\"https://charity.wtf/2016/02/03/how-to-survive-an-acquisition/\">Facebook killed the product</a>. Most of them I didn&#8217;t care about (there were, ahem, a lot of &#8220;service reliability updates&#8221;), but I was mad about losing one specific piece, a deceptively casual retrospective of the grueling, murderous two-year rewrite of our entire API from Ruby on Rails to Golang..</p>\n<p>I could have sworn I&#8217;d looked for it before, but someone asked me a question about migrations this morning, which spurred me to pull up the Wayback Machine again and dig in harder, and &#8230; <img alt=\"\u2728\" class=\"wp-smiley\" src=\"https://s.w.org/images/core/emoji/16.0.1/72x72/2728.png\" style=\"height: 1em;\" />I FOUND IT!!<img alt=\"\u2728\" class=\"wp-smiley\" src=\"https://s.w.org/images/core/emoji/16.0.1/72x72/2728.png\" style=\"height: 1em;\" /></p>\n<p>Honestly, it is entirely possible that if we had not done this rewrite, there might be no Honeycomb. In the early days of the rewrite, we would ship something in Go and the world would break, over and over and over. As I said,</p>\n<blockquote><p>Rails HTTP processing is built on a philosophy of \u201cbe liberal in what you accept\u201d. So developers end up inadvertently sending API requests that are undocumented or even non-RFC compliant \u2026 but Rails middleware cleans them up and handles it fine.</p></blockquote>\n<p>Rails would accept any old trash, Go would not. Breakage ensues. Tests couldn&#8217;t catch what we didn&#8217;t know to look for. Eventually we lit upon a workflow where we would split incoming production traffic, run each request against a Go API server and a Ruby API server, each backed by its own set of MongoDB replicas, and diff the responses. This is when we first got turned on to how incredibly powerful Scuba was, in its ability to compare individual responses, field by field, line by line.</p>\n<p>Once you&#8217;ve used a tool like that, you&#8217;re hooked.. you can&#8217;t possibly go back to metrics and aggregates. The rest, as they say, is history.</p>\n<p>The whole thing is still pretty fun to read, even if I can still smell the blood and viscera a decade later. Enjoy.</p>\n<hr />\n<h1>&#8220;How We Moved Our API From Ruby to Go and Saved Our Sanity&#8221;</h1>\n<p><em>Originally posted on blog.parse.com on June 10th, 2015.</em></p>\n<p>The first lines of Parse code were written nearly four years ago. In 2011 Parse was a crazy little idea to solve the problem of building mobile apps.</p>\n<p>Those first few lines were written in Ruby on Rails.</p>\n<hr />\n<h2>Ruby on Rails</h2>\n<p>Ruby let us get the first versions of Parse out the door quickly. It let a small team of engineers iterate on it and add functionality very fast. There was a deep bench of library support, gems, deploy tooling, and best practices available, so we didn\u2019t have to reinvent very many wheels.</p>\n<p>We used Unicorn as our HTTP server, Capistrano to deploy code, RVM to manage the environment, and a zillion open source gems to handle things like YAML parsing, oauth, JSON parsing, MongoDB, and MySQL. We also used Chef which is Ruby-based to manage our infrastructure so everything played together nicely. For a while.</p>\n<p>The first signs of trouble bubbled up in the deploy process. As our code base grew, it took longer and longer to deploy, and the \u201cgraceful\u201d unicorn restarts really weren\u2019t very graceful. So, we monkeypatched rolling deploy groups in to Capistrano.</p>\n<p>\u201cMonkeypatch\u201d quickly became a key technical term that we learned to associate with our Ruby codebase.</p>\n<p>A year and a half in, at the end of 2012, we had 200 API servers running on\u00a0<a href=\"https://web.archive.org/web/20150611004347/http://ec2instances.info/\">m1.xlarge</a>\u00a0instance types with 24 unicorn workers per instance. This was to serve 3000 requests per second for 60,000 mobile apps. It took 20 minutes to do a full deploy or rollback, and we had to do a bunch of complicated load balancer shuffling and pre-warming to prevent the API from being impacted during a deploy.</p>\n<p>Then, Parse really started to take off and experience hockey-stick growth.</p>\n<hr />\n<h2>Problems</h2>\n<p>When our API traffic and number of apps started growing faster, we started having to rapidly spin up more database machines to handle the new request traffic. That is when the \u201cone process per request\u201d part of the Rails model started to fall apart.</p>\n<p>With a typical Ruby on Rails setup, you have a fixed pool of worker processes, and each worker can handle only one request at a time. So any time you have a type of request that is particularly slow, your worker pool can rapidly fill up with that type of request. This happens too fast for things like auto-scaling groups to react. It\u2019s also wasteful because the vast majority of these workers are just waiting on another service. In the beginning, this happened pretty rarely and we could manage the problem by paging a human and doing whatever was necessary to keep the API up. But as we started growing faster and adding more databases and workers, we added more points of failure and more ways for performance to get degraded.</p>\n<p>We started looking ahead to when Parse would 10x its size, and realized that the one-process-per-request model just wouldn\u2019t scale. We had to move to an async model that was fundamentally different from the Rails way. Yeah, rewrites are hard, and yeah they always take longer than anyone ever anticipates, but we just didn\u2019t see how we could make the Rails codebase scale while it was tied to one process per request.</p>\n<hr />\n<h2>What next?</h2>\n<p>We knew we needed asynchronous operations. We considered a bunch of options:</p>\n<h3>EventMachine</h3>\n<p>We already had some of our push notification service using EventMachine, but our experience was not great as it too was scaling. We had constant trouble with accidentally introducing synchronous behavior or parallelism bugs. The vast majority of Ruby gems are not asynchronous, and many are not threadsafe, so it was often hard to find a library that did some common task asynchronously.</p>\n<h3>JRuby</h3>\n<p>This might seem like the obvious solution \u2013 after all, Java has threads and can handle massive concurrency. Plus it\u2019s Ruby already, right?\u00a0<a href=\"https://web.archive.org/web/20150611004347/http://www.infoq.com/articles/twitter-java-use\">This is the solution Twitter investigated before settling on Scala</a>. But since JRuby is still basically Ruby, it still has the problem of asynchronous library support. We were concerned about needing a second rewrite later, from JRuby to Java. And literally nobody at all on our backend or ops teams wanted to deal with deploying and tuning the JVM. The groans were audible from outer space.</p>\n<h3>C++</h3>\n<p>We had a lot of experienced C++ developers on our team. We also already had some C++ in our stack, in our Cloud Code servers that ran embedded V8. However, C++ didn\u2019t seem like a great choice. Our C++ code was harder to debug and maintain. It seemed clear that C++ development was generally less productive than more modern alternatives. It was missing a lot of library support for things we knew were important to us, like HTTP request handling. Asynchronous operation was possible but often awkward. And nobody really\u00a0<i>wanted</i>\u00a0to write a lot of C++ code.</p>\n<h3>C#</h3>\n<p>C# was a strong contender. It arguably had the best concurrency model with Async and Await. The real problem was that C# development on Linux always felt like a second-class citizen. Libraries that interoperate with common open source tools are often unavailable on C#, and our toolchain would have to change a lot.</p>\n<h3>Go</h3>\n<p>Go and C# both have asynchronous operation built into the language at a low level, making it easy for large groups of people to write asynchronous code. The MongoDB Go driver is probably the best MongoDB driver in existence, and complex interaction with MongoDB is core to Parse. Goroutines were much more lightweight than threads. And frankly we were most excited about writing Go code. We thought it would be a lot easier to recruit great engineers to write Go code than any of the other solid async languages.</p>\n<p>In the end, the choice boiled down to C# vs Go, and we chose Go.</p>\n<hr />\n<h2>Wherein we rewrite the world</h2>\n<p>We started out rewriting our EventMachine push backend from Ruby to Go. We did some preliminary benchmarking with Go concurrency and found that each network connection ate up only 4kb of RAM. After rewriting the EventMachine push backend to Go we went from 250k connections per node to 1.5 million connections per node without even touching things like kernel tuning. Plus it seemed really fun. So, Go it was.</p>\n<p>We rewrote some other minor services and starting building new services in Go. The main challenge, though, was to rewrite the core API server that handles requests to\u00a0<a href=\"https://web.archive.org/web/20150611004347/http://api.parse.com/\">api.parse.com</a>\u00a0while seamlessly maintaining backward compatibility. We rewrote this endpoint by endpoint, using a live shadowing system to avoid impacting production, and monitored the differential metrics to make sure the behaviors matched.</p>\n<p>During this time, Parse 10x\u2019d the number of apps on our backend and more than 10x\u2019d our request traffic. We also 10x\u2019d the number of storage systems backed by Ruby. We were chasing a rapidly moving target.</p>\n<p>The hardest part of the rewrite was dealing with all the undocumented behaviors and magical mystery bits that you get with Rails middleware. Parse exposes a REST API, and Rails HTTP processing is built on a philosophy of \u201cbe liberal in what you accept\u201d. So developers end up inadvertently sending API requests that are undocumented or even non-RFC compliant \u2026 but Rails middleware cleans them up and handles it fine.</p>\n<p>So we had to port a lot of delightful behavior from the Ruby API to the Go API, to make sure we kept handling the weird requests that Rails handled. Stuff like doubly encoded URLs, weird content-length requirements, bodies in HTTP requests that shouldn\u2019t have bodies, horrible oauth misuse, horrible mis-encoded Unicode.</p>\n<p>Our Go code is now peppered with fun, cranky comments like these:</p>\n<pre class=\"line-numbers language-javascript\"><code class=\" language-javascript\"><span class=\"token comment\">// Note: an unset cache version is treated by ruby as \u201c\u201d.</span>\n<span class=\"token comment\">// Because of this, dirtying this isn\u2019t as simple as deleting it \u2013 we need to</span>\n<span class=\"token comment\">// actually set a new value.</span>\n\n<span class=\"token comment\">// This byte sequence is what ruby expects.</span>\n<span class=\"token comment\">// yes that\u2019s a paren after the second 180, per ruby.</span>\n\n<span class=\"token comment\">// Inserting and having an op is kinda weird: We already know</span>\n<span class=\"token comment\">// state zero. But ruby supports it, so go does too.</span>\n\n<span class=\"token comment\">// single geo query, don\u2019t do anything. stupid and does not make sense</span>\n<span class=\"token comment\">// but ruby does it. Changing this will break a lot of client tests.</span>\n<span class=\"token comment\">// just be nice and fix it here.</span>\n\n<span class=\"token comment\">// Ruby sets various defaults directly in the structure and expects them to appear in cache.</span>\n<span class=\"token comment\">// For consistency, we\u2019ll do the same thing.</span></code></pre>\n<h3>Results</h3>\n<p>Was the rewrite worth it? Hell yes it was.\u00a0<b>Our reliability improved by an order of magnitude</b>. More importantly, our API is not getting more and more fragile as we spin up more databases and backing services. Our codebase got cleaned up and we got rid of a ton of magical gems and implicit assumptions. Co-tenancy issues improved for customers across the board. Our ops team stopped getting massively burned out from getting paged and trying to track down and manually remediate Ruby API outages multiple times a week. And needless to say, our customers were happier too.</p>\n<p>We now almost never have reliability-impacting events that can be tracked back to the API layer \u2013 a massive shift from a year ago. Now when we have timeouts or errors, it\u2019s usually constrained to a single app \u2013 because one app is issuing a very inefficient query that causes timeouts or full table scans for their app, or it\u2019s a database-related co-tenancy problem that we can resolve by automatically rebalancing or filtering bad actors.</p>\n<p>An asynchronous model had many other benefits. We were also able to instrument everything the API was doing with counters and metrics, because these were no longer blocking operations that interfered with communicating to other services. We could downsize our provisioned API server pool by about 90%. And we were also able to remove silos of isolated Rails API servers from our stack, drastically simplifying our architecture.</p>\n<p>As if that weren\u2019t enough, the time it takes to run our full integration test suite dropped from 25 minutes to 2 minutes, and the time to do a full API server deploy with rolling restarts dropped from 30 minutes to 3 minutes. The go API server\u00a0<a href=\"https://web.archive.org/web/20150611004347/https://github.com/facebookgo/grace\">restarts gracefully</a>\u00a0so no load balancer juggling and prewarming is necessary.</p>\n<p>We love Go. We\u2019ve found it really fast to deploy, really easy to instrument, really lightweight and inexpensive in terms of resources. It\u2019s taken a while to get here, but the journey was more than worth it.</p>\n<h3>Credits/Blames</h3>\n<p>Credits/Blames go to Shyam Jayaraman for driving the initial decision to use Go, Ittai Golde for shepherding the bulk of the API server rewrite from start to finish, Naitik Shah for writing and open sourcing a ton of\u00a0<a href=\"https://web.archive.org/web/20150611004347/https://github.com/facebookgo\">libraries and infrastructure</a>\u00a0underpinning our Go code base, and the rest of the amazing Parse backend SWE team who performed the rewrite.</p>\n<p><img alt=\"\" class=\"size-medium wp-image-10078 alignleft\" height=\"161\" src=\"https://i0.wp.com/charity.wtf/wp-content/uploads/2025/07/Screenshot-2025-07-23-at-18.46.47.png?resize=300%2C161&#038;ssl=1\" width=\"300\" /></p>"
            ],
            "link": "https://charity.wtf/2025/07/24/how-we-migrated-the-parse-api-from-ruby-to-golang-resurrected/",
            "publishedAt": "2025-07-24",
            "source": "Charity Majors",
            "summary": "I wrote a lot of blog posts over my time at Parse, but they all evaporated after Facebook killed the product. Most of them I didn&#8217;t care about (there were, ahem, a lot of &#8220;service reliability updates&#8221;), but I was mad about losing one specific piece, a deceptively casual retrospective of the grueling, murderous two-year [&#8230;]",
            "title": "How We Migrated the Parse API From Ruby to Golang (Resurrected)"
        },
        {
            "content": [
                "<div class=\"trix-content\">\n  <div>People seem to be continuously disappointed by the fact that public companies are run by professional managers who don't operate from deep principles. But they shouldn't be. It's in everyone's interest that corporations set their sails to the wind and whims of the prevailing culture. It's the essence of capitalism: Give people what they want (especially when they change their minds)!&nbsp;<br /><br /></div><div>Now, as an owner-operator, I can afford to have unpopular principles from time to time. I can afford to earn less than the theoretical maximum from the market as a consequence of these principles. That's because I'm playing with my own money. That's the privilege of being privately held.</div><div><br />But even the most powerful professional CEO is on a short leash from the company's real owners, the shareholders. This is often maligned as the root of all evil in modern capitalism. That we've divorced the owner and the operator. And I think there's a worthy critique of that arrangement to be had, like Burnham in The Managerial Society. But I also think not enough appreciation is afforded this arrangement.<br /><br /></div><div>Shareholders, in their Platonic ideal, only care about maximizing profits. That can occasionally be an incentive for amoral behavior, but more often, it's simply a driver towards making stuff that people want. Not what they say they want, but what they actually buy.&nbsp;<br /><br /></div><div>That's why libertarians love to talk about the free-market economy as an information system. Supply-side economics notwithstanding, demand directs production and judges the contestants. If you don't make something people want, they won't buy it, and you'll soon be out of business.<br /><br /></div><div>I thought about this today because of two popular marketing campaigns currently running in America. The one by <a href=\"https://x.com/Nike/status/1946990379942727905\">Nike celebrating family</a>, the other by <a href=\"https://x.com/TheCinesthetic/status/1948051308537409894\">American Eagle celebrating \"good jeans\"</a>. Here's a comparison someone made online using these companies' campaigns from the early 2020s and now:<br /><br />  <figure class=\"attachment attachment--preview attachment--lightboxable attachment--png\">\n      <a href=\"https://world.hey.com/dhh/531988ec/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjIwMjk1NTI0MywicHVyIjoiYmxvYl9pZCJ9fQ--7bcbf107050f4e853e4854c7c03ee3d7ecea1a763316e74cc675f9f6d44ec95c/image.png?disposition=attachment\" title=\"Download image.png\">\n        <img alt=\"image.png\" src=\"https://world.hey.com/dhh/531988ec/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjIwMjk1NTI0MywicHVyIjoiYmxvYl9pZCJ9fQ--7bcbf107050f4e853e4854c7c03ee3d7ecea1a763316e74cc675f9f6d44ec95c/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/image.png\" />\n</a>\n  </figure></div><div>  <figure class=\"attachment attachment--preview attachment--lightboxable attachment--png\">\n      <a href=\"https://world.hey.com/dhh/531988ec/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjIwMjk1NTcxNywicHVyIjoiYmxvYl9pZCJ9fQ--64a65d56feca0919cc3d6b3e8a377e634611d80415ffd08a69ecea448a966a1e/image.png?disposition=attachment\" title=\"Download image.png\">\n        <img alt=\"image.png\" src=\"https://world.hey.com/dhh/531988ec/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjIwMjk1NTcxNywicHVyIjoiYmxvYl9pZCJ9fQ--64a65d56feca0919cc3d6b3e8a377e634611d80415ffd08a69ecea448a966a1e/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/image.png\" />\n</a>\n  </figure><br /><br />Quite the contrast! Almost looks like hypocrisy, doesn't it? How can you celebrate obesity one moment, then hour-glass ideals the next? How can you embrace undirected individualism before, then exalt family values at the height of excellence now?<br /><br /></div><div>Easy: The vibe changed. Demand changed. Selling 2020 woke platitudes into a 2025 market is a clear way to lose your job as a professional manager. Because it's no longer what people want.<br /><br /></div><div>Hell, it's most likely not even the same managers making these diametrically-opposed value judgments. Perhaps not even managers at all, but marketing agencies in tune with said prevailing culture. The big information system of commerce is sending a billion packets of intent all day long and the current message is now crystal clear: Blond babies and boobs are back in business!</div><div><br />This was the original killer insight by <a href=\"https://www.youtube.com/shorts/LSTKs5EpCYM\">the architects</a> of <a href=\"https://world.hey.com/dhh/we-must-say-no-to-these-people-e0fb301c\">the short-lived woke theocracy</a>: If you can capture culture, you can capture capitalism. But it's one thing to capture culture, it's quite another to hold it.<br /><br /></div><div>So now much of mainstream American culture has simply reverted to the roots of capitalism: Making things that most people want. By course-correcting the culture, we've course-corrected commerce. No corporate principles required.</div>\n</div>"
            ],
            "link": "https://world.hey.com/dhh/you-expect-principles-but-should-wish-for-none-531988ec",
            "publishedAt": "2025-07-24",
            "source": "DHH",
            "summary": "<div class=\"trix-content\"> <div>People seem to be continuously disappointed by the fact that public companies are run by professional managers who don't operate from deep principles. But they shouldn't be. It's in everyone's interest that corporations set their sails to the wind and whims of the prevailing culture. It's the essence of capitalism: Give people what they want (especially when they change their minds)!&nbsp;<br /><br /></div><div>Now, as an owner-operator, I can afford to have unpopular principles from time to time. I can afford to earn less than the theoretical maximum from the market as a consequence of these principles. That's because I'm playing with my own money. That's the privilege of being privately held.</div><div><br />But even the most powerful professional CEO is on a short leash from the company's real owners, the shareholders. This is often maligned as the root of all evil in modern capitalism. That we've divorced the owner and the operator. And I think there's a worthy critique of that arrangement to be had, like Burnham in The Managerial Society. But I also think not enough appreciation is afforded this arrangement.<br /><br /></div><div>Shareholders, in their Platonic ideal, only care about maximizing profits. That can occasionally be an incentive",
            "title": "You expect principles but should wish for none"
        },
        {
            "content": [],
            "link": "https://buttondown.com/hillelwayne/archive/programming-language-escape-hatches/",
            "publishedAt": "2025-07-24",
            "source": "Hillel Wayne",
            "summary": "<p>The excellent-but-defunct blog <a href=\"https://prog21.dadgum.com/38.html\" target=\"_blank\">Programming in the 21st Century</a> defines \"puzzle languages\" as languages were part of the appeal is in figuring out how to express a program idiomatically, like a puzzle. As examples, he lists Haskell, Erlang, and J. All puzzle languages, the author says, have an \"escape\" out of the puzzle model that is pragmatic but stigmatized.</p> <p>But many mainstream languages have escape hatches, too.</p> <p>Languages have a lot of properties. One of these properties is the language's <a href=\"https://buttondown.com/hillelwayne/archive/the-capability-tractability-tradeoff/\" target=\"_blank\">capabilities</a>, roughly the set of things you can do in the language. Capability is desirable but comes into conflicts with a lot of other desirable properties, like simplicity or efficiency. In particular, reducing the capability of a language means that all remaining programs share more in common, meaning there's more assumptions the compiler and programmer can make (\"tractability\"). Assumptions are generally used to reason about correctness, but can also be about things like optimization: J's assumption that everything is an array leads to <a href=\"https://code.jsoftware.com/wiki/Vocabulary/SpecialCombinations\" target=\"_blank\">high-performance \"special combinations\"</a>. </p> <p>Rust is the most famous example of <strong>mainstream</strong> language that trades capability for tractability.<sup id=\"fnref:gc\"><a class=\"footnote-ref\" href=\"https://buttondown.com/hillelwayne/rss#fn:gc\">1</a></sup> Rust has a lot of rules designed to prevent common memory",
            "title": "Programming Language Escape Hatches"
        },
        {
            "content": [],
            "link": "https://simonwillison.net/2025/Jul/24/github-spark/#atom-entries",
            "publishedAt": "2025-07-24",
            "source": "Simon Willison",
            "summary": "<p><a href=\"https://github.com/features/spark\">GitHub Spark</a> was released <a href=\"https://github.blog/changelog/2025-07-23-github-spark-in-public-preview-for-copilot-pro-subscribers/\">in public preview</a> yesterday. It's GitHub's implementation of the prompt-to-app pattern also seen in products like Claude Artifacts, Lovable, Vercel v0, Val Town Townie and Fly.io\u2019s Phoenix New. In this post I <a href=\"https://simonwillison.net/2025/Jul/24/github-spark/#reverse-engineering-spark-with-spark\">reverse engineer Spark</a> and <a href=\"https://simonwillison.net/2025/Jul/24/github-spark/#that-system-prompt-in-detail\">explore its fascinating system prompt</a> in detail.</p> <p>I wrote about Spark <a href=\"https://simonwillison.net/2024/Oct/30/copilot-models/\">back in October</a> when they first revealed it at GitHub Universe.</p> <p>GitHub describe it like this:</p> <blockquote> <p>Build and ship full-stack intelligent apps using natural language with access to the full power of the GitHub platform\u2014no setup, no configuration, and no headaches.</p> </blockquote> <p>You give Spark a prompt, it builds you a full working web app. You can then iterate on it with follow-up prompts, take over and edit the app yourself (optionally using GitHub Codespaces), save the results to a GitHub repository, deploy it to Spark's own hosting platform or deploy it somewhere else.</p> <p>Here's a screenshot of the Spark interface mid-edit. That side-panel is the app I'm building, not the docs - more on that in a moment.</p> <p><img alt=\"Screenshot of a development environment showing a file explorer on the left with files like App.tsx, index.css, prompts-content.ts, system_prompt.md, tools.md, index.html, PRD.md, and",
            "title": "Using GitHub Spark to reverse engineer GitHub Spark"
        },
        {
            "content": [
                "<p>We&#8217;re running another ACX Grants round!</p><p>If you already know what this is and just want to apply for a grant, use <strong><a href=\"https://forms.gle/CvvHhoi1cYAG9GiU9\">the form here</a> </strong>(should take 15 - 30 minutes), deadline August 15. </p><p>If you already know what this is and want to help as a <a href=\"https://forms.gle/Ncgvsjn12cAiZmfc8\">funder</a>, <a href=\"https://forms.gle/6tDMjPHuLEDkXZnG9\">VC</a>, <a href=\"https://forms.gle/ATMjAqs2E8EzdT5p7\">partner charity</a>, <a href=\"https://forms.gle/iyZCMZ224bzcvPv17\">evaluator</a>, or <a href=\"https://forms.gle/iyZCMZ224bzcvPv17\">friendly professional</a>, click the link for the relevant form, same deadline.</p><p>Otherwise see below for more information.</p><p><strong>What is ACX Grants?</strong></p><p>ACX Grants is a microgrants program that helps fund ACX readers&#8217; charitable or scientific projects. Click the links to see the <a href=\"https://www.astralcodexten.com/p/acx-grants-results\">2022 </a>and <a href=\"https://www.astralcodexten.com/p/acx-grants-results-2024\">2024 </a>cohorts. </p><p>The program is conducted in partnership with <a href=\"https://manifund.com/\">Manifund</a>, a charity spinoff of Manifold Markets, who handle the administrative/infrastructure side of things.</p><p><strong>How much money is involved?</strong></p><p>I plan to contribute $200K. I expect (but cannot guarantee) an additional $800K from other donors, for a total of about $1 million. </p><p>Most grants will probably be between $5,000 and $50,000, with a rare few up to $100,000. Depending on how much external donor interest there is, we will probably give between 10 and 50 grants.</p><p><strong>What&#8217;s the catch?</strong></p><p>There&#8217;s no <em>catch</em>, but this year we plan to experiment with replacing some grants with <a href=\"https://www.investopedia.com/simple-agreement-for-future-equity-8414773\">SAFEs</a>, and others with convertible grants. That means that if you&#8217;re a startup, we (ACX Grants as an nonprofit institution, not me personally) get some claim to future equity if you succeed. If you&#8217;re not a startup, you&#8217;ll sign an agreement saying that if your project ever becomes a startup, then we&#8217;ll get the equity claim. We&#8217;re still working on the exact details of this agreement, but we intend to have pretty standard terms and err in the favorable-to-you direction; obviously we&#8217;ll show you the final agreement before you sign anything.</p><p>We&#8217;re doing this because some of our previous grantees became valuable companies, and it seems foolish to leave that money on the table when we could be capturing it and reinvesting it into future grants rounds. Please don&#8217;t let this affect your decision to apply. Our top priority remains charity, and we&#8217;ll continue to select grantees based on their philanthropic value and not on their likelihood of making us money.</p><p>If you&#8217;re not a startup and don&#8217;t plan to become one, none of this should affect you. And if you have a good reason not to want to sign these agreements - including &#8220;I&#8217;m not savvy enough to know what this means and it makes me nervous&#8221; - then we&#8217;re happy to opt you out of them. </p><p><strong>What&#8217;s the timeline?</strong></p><p>We&#8217;d like to have grants awarded by October 1 and money in your hands by November 1. This is a goal, not a promise.</p><p><strong>What will the application process be like?</strong></p><p>You fill out a form that should take 15 - 30 minutes. If we have questions, an evaluator might email or call you, in a way that hopefully won&#8217;t take more than another 15 - 30 minutes of your time to answer.</p><p>If you win a grant, Manifund will send you the money, probably by bank wire. Every few years, we might ask you to fill out another 15 - 30 minute form letting us know how your project is doing. </p><p><strong>What kind of projects might you fund?</strong></p><p>There are already lots of good charities that help people directly at scale, for example <a href=\"https://www.againstmalaria.com/\">Against Malaria Foundation</a> (which distributes malaria-preventing bed nets) and <a href=\"https://www.givedirectly.org/\">GiveDirectly</a> (which gives money directly to very poor people in Africa). These are hard to beat.</p><p>We&#8217;re most interested in charities that pursue novel ways to change complex systems, either through technological breakthroughs, new social institutions, or targeted political change. Among the projects we&#8217;ve funded in the past were:</p><ul><li><p>Development of oxfendazole, a drug for treating parasitic worms in developing countries.</p></li><li><p>A platform that lets people create prediction markets on topics of their choice</p></li><li><p>A trip to Nigeria for college students researching lead poisoning prevention.</p></li><li><p>A group of lawyers who sue factory farms under animal cruelty laws.</p></li><li><p>Development of software that helps the FDA run better drug trials.</p></li><li><p>A startup building anti-mosquito drones to fight tropical disease</p></li><li><p>A guide for would-be parents on which IVF clinics have the highest successful rate of successful implantation.</p></li><li><p>A university lab working on artificial kidneys</p></li></ul><p>You can read the full list <a href=\"https://www.astralcodexten.com/p/acx-grants-results\">here </a>and <a href=\"https://www.astralcodexten.com/p/acx-grants-results-2024\">here</a>, and the most recent updates from each project <a href=\"https://www.astralcodexten.com/p/acx-grants-1-3-year-updates\">here</a>.</p><p><strong>Is there anything good about winning an ACX Grant other than getting money?</strong></p><p>You&#8217;ll get my support, which is mostly useful in getting me to blog about your project. For example, I can put out updates or requests for help on Open Threads. I can also try to help connect you to people I know. Some people who won ACX Grants last year were able to leverage the attention to attract larger grantmakers or VCs.</p><p>You can try to pitch me guest posts about your project. This could be a description of what you&#8217;re doing and why, or just a narrative about your experience and what you learned from it. Warning that I&#8217;m terrible to pitch guest posts to, I almost never go through with this, and I&#8217;m very nitpicky when I do. Still, you can try.</p><p>We&#8217;re working on gathering a network of friendly professionals who agree to provide <em>pro bono</em> or heavily discounted support (eg legal, accounting, business advice, cloud compute) to ACX grantees. We&#8217;ve only just begun this process and it might not actually materialize. </p><p>There are occasional virtual and physical meetups of ACX grantees; these don&#8217;t always result in Important Professional Connections, but are pretty interesting.</p><p><strong>What if I want those nonfinancial benefits for my project, but don&#8217;t need money?</strong></p><p>Apply for a grant of $1. But we&#8217;re pretty nervous about giving very-low-cost grants because it&#8217;s too easy to accept all of them and dilute our signaling value; for this reason, it might be harder to get a grant of $1 than a grant of $5,000, and we expect these to make up only 0 - 10% of our cohort. You might be better off coming up with some expansion of your project that takes $5,000 and applying for that.</p><p><strong>What are the tax implications of an ACX Grant?</strong></p><p>Consult your accountant, especially if you live outside the US.</p><p>If you live inside the US, we think it&#8217;s ordinary taxable income. If you&#8217;re an individual, you&#8217;ll have to pay taxes on it at your usual tax rate. If you&#8217;re a 501(c), you&#8217;ll get your normal level of tax exemption.</p><p><strong>I want to fund you, how can I help?</strong></p><p>For bureaucratic reasons, we&#8217;re currently looking for donations mostly in the $5,000+ range. If that&#8217;s you, fill out the <a href=\"https://forms.gle/Ncgvsjn12cAiZmfc8\">Funder Application Form</a>. If we&#8217;ve already talked about this over email, you don&#8217;t need to fill out the form, but we encourage you to do so anyway so we know more about your interests and needs.</p><p><strong>What&#8217;s the story behind why you have $200K to spend on grants every year, but are still asking for more funding?</strong></p><p>Some generous readers sent me crypto during the crypto boom, or advised me on buying crypto, or asked to purchase NFTs of my post for crypto. Some of the crypto went up. Then I reinvested it into AI stocks, and those went up too.</p><p>I think of this as unearned money and want to give some of it back to the community, hence this grants program. I have a lot of it but not an unlimited amount. At the current rate, I can probably afford another ~5 ACX Grants rounds. When it runs out, I&#8216;ll just be a normal person with normal amounts of money (Substack is great, but not great enough for me to afford this level of donation consistently).</p><p>My hope is that I can keep making these medium-sized donations, other people can add more to the pot, and we&#8217;ll be able to drag this out at least five more rounds, after which point maybe we&#8217;ll come up with another plan. </p><p><strong>I&#8217;m a VC, how can I help?</strong></p><p>Some of our applicants are potentially-profitable startups, and we decide they&#8217;re a better match for VC funding than for our grants. If you&#8217;re willing to look these over and get in touch with any that seem interesting, fill out the <a href=\"https://forms.gle/6tDMjPHuLEDkXZnG9\">VC Application Form</a>. It will ask for more information on what kind of opportunities you&#8217;re interested in funding.</p><p><strong>I&#8217;m a philanthropist or work at a philanthropic foundation; how can I help?</strong></p><p>Some of our applicants are good projects, but not a good match for us, and we want to shop them around to other philanthropists and charities who might have different strengths or be able to work with larger amounts of money. If that&#8217;s you, please fill out the <a href=\"https://forms.gle/ATMjAqs2E8EzdT5p7\">Partner Charity Application Form</a></p><p><strong>I&#8217;m good at evaluating grants, or an expert in some specific field; how can I help?</strong></p><p>If you have experience as a grantmaker or VC, or you&#8217;re an expert in some technical field, you might be able to help us evaluate proposals. Fill out the <a href=\"https://forms.gle/iyZCMZ224bzcvPv17\">Evaluator Application Form</a>. By default we expect you&#8217;ll want us to send you one or two grants in your area of expertise, but if you want a challenge you can request more.</p><p>If we&#8217;ve already talked about this over email, you don&#8217;t need to fill out the form, but we encourage you to do so anyway so I know more about your interests and needs.</p><p>We expect to get more volunteers than we need, and most people who fill in the evaluator form won&#8217;t get contacted unless we need someone from their specific field.</p><p><strong>I&#8217;m a professional who wants to do pro bono work for cool charities, how can I help?</strong></p><p>Fill out the <a href=\"https://forms.gle/pQ9Q66Vzbv2Fuyjq7\">Friendly Professional Application Form</a>. If we get enough applicants, we&#8217;ll compile them into a directory for our grantees.</p><p><strong>I participated in the Impact Certificate Market last year, did you forget about me?</strong></p><p><s>Yes until Austin Chen reminded me last month</s>  No! Request final oracular funding by filling in the <a href=\"https://forms.gle/HZRqtYi4hjbSxZYX9\">Impact Applicant Form</a>.</p><p><strong>Sorry, I forgot, where do I go to apply for a grant again?</strong></p><p>See <strong><a href=\"https://forms.gle/CvvHhoi1cYAG9GiU9\">form here</a></strong><em>. </em>Please apply by 11:59 PM on August 15th.</p>"
            ],
            "link": "https://www.astralcodexten.com/p/apply-for-an-acx-grant-2025",
            "publishedAt": "2025-07-24",
            "source": "SlateStarCodex",
            "summary": "<p>We&#8217;re running another ACX Grants round!</p><p>If you already know what this is and just want to apply for a grant, use <strong><a href=\"https://forms.gle/CvvHhoi1cYAG9GiU9\">the form here</a> </strong>(should take 15 - 30 minutes), deadline August 15. </p><p>If you already know what this is and want to help as a <a href=\"https://forms.gle/Ncgvsjn12cAiZmfc8\">funder</a>, <a href=\"https://forms.gle/6tDMjPHuLEDkXZnG9\">VC</a>, <a href=\"https://forms.gle/ATMjAqs2E8EzdT5p7\">partner charity</a>, <a href=\"https://forms.gle/iyZCMZ224bzcvPv17\">evaluator</a>, or <a href=\"https://forms.gle/iyZCMZ224bzcvPv17\">friendly professional</a>, click the link for the relevant form, same deadline.</p><p>Otherwise see below for more information.</p><p><strong>What is ACX Grants?</strong></p><p>ACX Grants is a microgrants program that helps fund ACX readers&#8217; charitable or scientific projects. Click the links to see the <a href=\"https://www.astralcodexten.com/p/acx-grants-results\">2022 </a>and <a href=\"https://www.astralcodexten.com/p/acx-grants-results-2024\">2024 </a>cohorts. </p><p>The program is conducted in partnership with <a href=\"https://manifund.com/\">Manifund</a>, a charity spinoff of Manifold Markets, who handle the administrative/infrastructure side of things.</p><p><strong>How much money is involved?</strong></p><p>I plan to contribute $200K. I expect (but cannot guarantee) an additional $800K from other donors, for a total of about $1 million. </p><p>Most grants will probably be between $5,000 and $50,000, with a rare few up to $100,000. Depending on how much external donor interest there is, we will probably give between 10 and 50 grants.</p><p><strong>What&#8217;s the catch?</strong></p><p>There&#8217;s no <em>catch</em>, but this year we plan to experiment with replacing some grants",
            "title": "Apply For An ACX Grant (2025)"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-07-24"
}