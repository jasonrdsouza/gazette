{
    "articles": [
        {
            "content": [
                "<p>What I want from an array language is:</p>\n\n<ol>\n  <li>Don\u2019t make me think.</li>\n  <li>Run fast on GPUs.</li>\n  <li>Really, do not make me think.</li>\n  <li>Do <em>not</em>.</li>\n</ol>\n\n<p>I say NumPy misses on three of these. So I\u2019d like to propose a \u201cfix\u201d that\u2014I claim\u2014eliminates 90% of unnecessary thinking, with no loss of power. It would also fix all the things based on NumPy, for example every machine learning library.</p>\n\n<p>I know that sounds grandiose. Quite possibly you\u2019re thinking that good-old dynomight has finally lost it. So I warn you now: My solution is utterly non-clever. If anything is clever here, it\u2019s my single-minded rejection of cleverness.</p>\n\n<p>To motivate the fix, let me give my story for how NumPy went wrong. It started as a nice little library for array operations and linear algebra. When everything has two or fewer dimensions, it\u2019s great. But at some point, someone showed up with some higher-dimensional arrays. If loops were fast in Python, NumPy would have said, \u201cHello person with \u22653 dimensions, please call my \u22642 dimensional functions in a loop so I can stay nice and simple, xox, NumPy.\u201d</p>\n\n<p>But since loops are slow, NumPy instead took all the complexity that would <em>usually</em> be addressed with loops and pushed it down into individual functions. I think this was a disaster, because <em>every time</em> you see some function call like <code class=\"language-plaintext highlighter-rouge\">np.func(A,B)</code>, you have to think:</p>\n\n<ol>\n  <li>OK, what shapes do all those arrays have?</li>\n  <li>And what does <code class=\"language-plaintext highlighter-rouge\">np.func</code> do when it sees those shapes?</li>\n</ol>\n\n<p>Different functions have different rules. Sometimes they\u2019re bewildering. This means constantly thinking and moving dimensions around to appease the whims of particular functions. It\u2019s the <em>functions</em> that should be appeasing <em>your</em> whims!</p>\n\n<p>Even simple-looking things like <code class=\"language-plaintext highlighter-rouge\">A*B</code> or <code class=\"language-plaintext highlighter-rouge\">A[B,C]</code> do quite different things depending on the starting shapes. And those starting shapes are often themselves the output of <em>previous</em> functions, so the complexity spirals.</p>\n\n<p>Worst of all, if you write a new \u22642 dimensional function, then high-dimensional arrays are your problem. <em>You</em> need to decide what rules to obey, and then <em>you</em> need to re-write your function in a much more complex way to\u2014</p>\n\n<p><strong>Voice from the back</strong>: Python sucks! If you used a real language, loops would be fast! This problem is stupid!</p>\n\n<p>That was a strong argument, ten years ago. But now everything is GPU, and GPUs hate loops. Today, array packages are cheerful interfaces that <em>look</em> like Python (or whatever) but are actually embedded languages that secretly compile everything into special GPU instructions that run on whole arrays in parallel. With big arrays, you need GPUs. So I think the speed of the host language doesn\u2019t matter so much anymore.</p>\n\n<p>Python\u2019s slow loops may have paradoxically turned out to be an <em>advantage</em>, since they forced everything to be designed to work without loops even before GPUs took over.</p>\n\n<p>Still, thinking is bad, and NumPy makes me think, so <a href=\"https://dynomight.net/numpy/\">I don\u2019t like NumPy</a>.</p>\n\n<h2 id=\"so-whats-the-fix\">So what\u2019s the fix?</h2>\n\n<p>Here\u2019s my extremely non-clever idea: Let\u2019s just admit that loops were better. In high dimensions, no one has yet come up with a notation that beats loops and indices. So, let\u2019s do this:</p>\n\n<ol>\n  <li>Bring back the syntax of loops and indices.</li>\n  <li>But don\u2019t actually <em>execute</em> the loops. Just take the syntax and secretly compile it into vectorized operations.</li>\n  <li>Also, let\u2019s get rid of all the insanity that\u2019s been added to NumPy because loops were slow.</li>\n</ol>\n\n<p>That\u2019s basically the whole idea. If you take those three bullet-points, you could probably re-derive everything I do below. I told you this wasn\u2019t clever.</p>\n\n<h2 id=\"what-does-it-look-like\">What does it look like?</h2>\n\n<p>Suppose that <code class=\"language-plaintext highlighter-rouge\">X</code> and <code class=\"language-plaintext highlighter-rouge\">Y</code> are 2D arrays, and <code class=\"language-plaintext highlighter-rouge\">A</code> is a 4D array. And suppose you want to find a 2D array <code class=\"language-plaintext highlighter-rouge\">Z</code> such that <code>Z<sub>ij</sub> = (Y<sub>j</sub>)<sup>T</sup> (A<sub>ij</sub>)<sup>-1</sup> X<sub>i</sub></code>. If you could write loops, this would be easy:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"n\">Z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">@</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>That\u2019s not pretty. It\u2019s not short or fast. But it <em>is</em> easy!</p>\n\n<p>So how do you do this efficiently in NumPy? Like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"n\">AiX</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n                      <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,...,</span><span class=\"bp\">None</span><span class=\"p\">])[...,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">AiX</span> <span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">[:,</span><span class=\"bp\">None</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">T</span>\n</code></pre></div></div>\n\n<p>If you\u2019re not a NumPy otaku, that may look like outsider art. Rest assured, it looks like that to me too, and I just wrote it. Why is it so confusing? At a high level, it\u2019s because <code class=\"language-plaintext highlighter-rouge\">np.linalg.solve</code> and <code class=\"language-plaintext highlighter-rouge\">np.sum</code> and multiplication (<code class=\"language-plaintext highlighter-rouge\">*</code>) have complicated rules, and weren\u2019t designed to work together to solve this particular problem nicely. That would be impossible, because there are an infinite number of problems. So you need to mash the arrays around a lot to make those functions happy.</p>\n\n<p>Without further ado, here\u2019s how you solve this problem with <strong>DumPy</strong> (ostensibly <strong>D</strong>ynomight N<strong>umPy</strong>):</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">dumpy</span> <span class=\"k\">as</span> <span class=\"n\">dp</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">)</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"s\">'j'</span><span class=\"p\">,:]</span> <span class=\"o\">@</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">,:,:],</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,:])</span>\n</code></pre></div></div>\n\n<p>Yes! If you prefer, you can also use this equivalent syntax:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n        <span class=\"n\">Z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">,:]</span> <span class=\"o\">@</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,:,:],</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,:])</span>\n</code></pre></div></div>\n\n<p>Those are both fully vectorized. No loops are executed behind the scenes. They\u2019ll run on a GPU if you have one.</p>\n\n<h2 id=\"but-how\">But how?</h2>\n\n<p>While it looks magical, but the way this actually works is fairly simple:</p>\n\n<ol>\n  <li>\n    <p>If you index a DumPy array with a string or a <code class=\"language-plaintext highlighter-rouge\">dp.Range</code> object, it creates a special \u201cmapped\u201d array that pretends to have fewer dimensions.</p>\n  </li>\n  <li>\n    <p>When a DumPy function is called (e.g. <code class=\"language-plaintext highlighter-rouge\">dp.linalg.solve</code> or <code class=\"language-plaintext highlighter-rouge\">dp.matmul</code> (called with <code class=\"language-plaintext highlighter-rouge\">@</code>)), it checks if any of the arguments have mapped dimensions. If so, it automatically vectorizes the computation, matching up mapped dimensions that share label.</p>\n  </li>\n  <li>\n    <p>When you assign an array with \u201cmapped\u201d dimensions to a <code class=\"language-plaintext highlighter-rouge\">dp.Slot</code>, it \u201cunmaps\u201d them into the positions you specify.</p>\n  </li>\n</ol>\n\n<p>No evil meta-programming abstract syntax tree macro bytecode interception is needed. When you run this code:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">[</span><span class=\"s\">'j'</span><span class=\"p\">,:]</span> <span class=\"o\">@</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">,:,:],</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,:])</span>\n</code></pre></div></div>\n\n<p>This is what happens behind the scenes.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span> <span class=\"s\">'j'</span><span class=\"p\">])</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">])</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'j'</span><span class=\"p\">])</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">@</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">.</span><span class=\"n\">unmap</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<details>\n  \n(Click here for a version with a million asserts and comments.)\n\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># first map A\n</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span> <span class=\"s\">'j'</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n<span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>             <span class=\"c1\"># pretends to have fewer dims\n</span><span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">shape</span>          <span class=\"c1\"># secret mapped data\n</span><span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">axes</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">,</span> <span class=\"s\">'j'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"c1\"># secret mapped axes\n</span><span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n                <span class=\"c1\"># shape determined by non-mapped (None) axes\n</span>\n<span class=\"c1\"># now map X\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">axes</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># now map Y\n</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'j'</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"k\">assert</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],)</span>\n<span class=\"k\">assert</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">axes</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s\">'j'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n<span class=\"k\">assert</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],)</span>\n\n<span class=\"c1\"># Actually do the computation. It happens that the 'j'\n# dimension is stored first because its found first (in y).\n# But you never need to think about that!\n</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">@</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">z</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">assert</span> <span class=\"n\">z</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">z</span><span class=\"p\">.</span><span class=\"n\">axes</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s\">'j'</span><span class=\"p\">,</span><span class=\"s\">'i'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">z</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># unmap the mapped axes\n</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">.</span><span class=\"n\">unmap</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">Z</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"k\">assert</span> <span class=\"n\">Z</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">Y</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre></div>  </div>\n\n</details>\n\n<h2 id=\"wait-but-how\">Wait, but <em>how</em>?</h2>\n\n<p>It might seem like I\u2019ve skipped the hard part. How does <code class=\"language-plaintext highlighter-rouge\">dp.linalg.solve</code> know how to vectorize over any combination of input dimensions? Don\u2019t I need to do that for every single function that DumPy includes? Isn\u2019t that hard?</p>\n\n<p>It <em>is</em> hard, but <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.vmap.html\"><code class=\"language-plaintext highlighter-rouge\">jax.vmap</code></a> did it already. This takes a function defined using (<a href=\"https://github.com/jax-ml/jax\">JAX</a>\u2019s version of) NumPy and vectorizes it over <em>any</em> set of input dimensions. DumPy relies on this to do all the actual vectorization. (If you prefer your <code class=\"language-plaintext highlighter-rouge\">vmap</code> janky and broken, I heartily recommend PyTorch\u2019s <a href=\"https://docs.pytorch.org/docs/stable/generated/torch.vmap.html\"><code class=\"language-plaintext highlighter-rouge\">torch.vmap</code></a>.)</p>\n\n<p>But hold on. If <code class=\"language-plaintext highlighter-rouge\">vmap</code> already exists, then why do we need DumPy? Here\u2019s why:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">jax</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jax</span> <span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">jnp</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n        <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">y</span> <span class=\"o\">@</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span>\n            <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"p\">)(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>That\u2019s how you solve the same problem with <code class=\"language-plaintext highlighter-rouge\">vmap</code>. (It\u2019s also basically what DumPy does behind the scenes.)</p>\n\n<p>I think <code class=\"language-plaintext highlighter-rouge\">vmap</code> is one of the best parts of the NumPy ecosystem. I think the above code is genuinely better than the base NumPy version. But it still requires a lot of thinking! Why put <code class=\"language-plaintext highlighter-rouge\">in_axes=[None, 0, 0]</code> in the inner <code class=\"language-plaintext highlighter-rouge\">vmap</code> and <code class=\"language-plaintext highlighter-rouge\">in_axes=[0, None, 0]</code> in the outer one? Why are all the axes <code class=\"language-plaintext highlighter-rouge\">0</code> even though you need to vectorize over the second dimension of <code class=\"language-plaintext highlighter-rouge\">A</code>? There are answers, but they require thinking. Loop and index notation is better.</p>\n\n<h2 id=\"a-tiny-bit-of-cleverness\">A tiny bit of cleverness</h2>\n\n<p>OK, I did do one thing that\u2019s a <em>little</em> clever. Say you want to create a <a href=\"https://en.wikipedia.org/wiki/Hilbert_matrix\">Hilbert Matrix</a> with <code>H<sub>ij</sub> = 1/(1+i+j)</code>. In base NumPy you\u2019d have to do this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)[:,</span><span class=\"bp\">None</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)[</span><span class=\"bp\">None</span><span class=\"p\">,:]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># hurr?\n</span></code></pre></div></div>\n\n<p>In DumPy, you can just write:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n        <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Yes! That works! It works because a <code class=\"language-plaintext highlighter-rouge\">dp.Range</code> acts <em>both</em> like a string and like an array mapped along that string. So the above code is roughly equivalent to:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">I</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">X</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">J</span><span class=\"p\">[</span><span class=\"s\">'j'</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<details>\n  See? Still no magic.\n\n  <p>In reality, the <code class=\"language-plaintext highlighter-rouge\">dp.Range</code> choose random strings. (The class maintains a stack of active ranges to prevent collisions.) So in more detail, the above code becomes something like this:</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">I</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">I</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"s\">'range_EZaW'</span><span class=\"p\">)</span>\n<span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">J</span><span class=\"p\">.</span><span class=\"n\">map_axes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"s\">'range_ailw'</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"c1\"># vectorized\n</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">unmap</span><span class=\"p\">(</span><span class=\"s\">'range_EZaW'</span><span class=\"p\">,</span><span class=\"s\">'range_ailw'</span><span class=\"p\">)</span>\n</code></pre></div>  </div>\n</details>\n\n<h2 id=\"ok-but-is-it-actually-better\">OK but is it actually better?</h2>\n\n<p>To test if DumPy is actually better in practice, I took six problems of increasing complexity and implemented each of them using loops, Numpy, JAX (with <code class=\"language-plaintext highlighter-rouge\">vmap</code>), and DumPy.</p>\n\n<details>\n  Hilbert matrices\n\n  <p>Note that in these examples, I always assume the input arrays are in the class of the system being used. If you try running them, you\u2019ll need to add some conversions with <code class=\"language-plaintext highlighter-rouge\">np.array</code> / <code class=\"language-plaintext highlighter-rouge\">jnp.array</code> / <code class=\"language-plaintext highlighter-rouge\">dp.Array</code>.</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># loops\n</span><span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">H</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># NumPy\n</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">[:,</span> <span class=\"bp\">None</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># JAX\n</span><span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n        <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">]),</span>\n        <span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"p\">)(</span><span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DumPy\n</span><span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n        <span class=\"n\">H</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Yes! This works!\n</span></code></pre></div>  </div>\n</details>\n\n<details>\n  Batched covariance\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Loops\n</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n    <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">cov</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># NumPy\n</span><span class=\"n\">mu</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)[:,</span> <span class=\"p\">:,</span> <span class=\"bp\">None</span><span class=\"p\">]</span>    <span class=\"c1\"># hurr?\n</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">((</span><span class=\"n\">X</span> <span class=\"o\">-</span> <span class=\"n\">mu</span><span class=\"p\">)[:,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">*</span>\n           <span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">-</span> <span class=\"n\">mu</span><span class=\"p\">)[:,</span> <span class=\"p\">:,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">:],</span>\n           <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># hurrr??\n</span>\n<span class=\"c1\"># JAX\n</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span><span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">cov</span><span class=\"p\">)(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DumPy\n</span><span class=\"n\">C_dumpy</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n    <span class=\"n\">C_dumpy</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">cov</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:])</span>\n\n<span class=\"c1\"># DumPy (alternate)\n</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'n'</span><span class=\"p\">,:,:]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">cov</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"s\">'n'</span><span class=\"p\">,:,:])</span>\n</code></pre></div>  </div>\n\n</details>\n\n<details>\n  Moving average\n\n  <p>(Pretending <a href=\"https://numpy.org/devdocs/reference/generated/numpy.lib.stride_tricks.html\"><code class=\"language-plaintext highlighter-rouge\">numpy.lib.stride_tricks</code></a> doesn\u2019t exist.)</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Loops\n</span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">window</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">window</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">window</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># NumPy\n</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">window</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)[:,</span> <span class=\"bp\">None</span><span class=\"p\">]</span>\n<span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">)[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">:]</span> \n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># JAX\n</span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">)</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">idx</span><span class=\"p\">]),</span>\n    <span class=\"p\">)(</span><span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">window</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># DumPy\n</span><span class=\"n\">windowed</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">window</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n        <span class=\"n\">windowed</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]</span>\n    <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">windowed</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n    <span class=\"c1\"># Note: B[i] = dp.mean(A[i:i+window])\n</span>    <span class=\"c1\"># would not work because dp.Range can't be used in slice\n</span></code></pre></div>  </div>\n\n</details>\n\n<details>\n  Indexing\n\n  <p>The goal is to create <code class=\"language-plaintext highlighter-rouge\">E</code> with</p>\n\n  <p>\u00a0\u00a0<code class=\"language-plaintext highlighter-rouge\">E[i1, i2, :, i3] = A[B[i1], C[i1, i2], ::2, D[i2, i3]]</code>.</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Setup\n</span><span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,))</span>\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Loops\n</span><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">M</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i1</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i2</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">i3</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">):</span>\n            <span class=\"n\">E</span><span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">,</span><span class=\"n\">i2</span><span class=\"p\">,:,</span><span class=\"n\">i3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">],</span><span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"n\">i2</span><span class=\"p\">],::</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i2</span><span class=\"p\">,</span> <span class=\"n\">i3</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># NumPy\n</span><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[:,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">],</span>\n      <span class=\"n\">C</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"bp\">None</span><span class=\"p\">],</span>\n      <span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n      <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n    <span class=\"p\">].</span><span class=\"n\">transpose</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># JAX\n</span><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n        <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n            <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n                <span class=\"k\">lambda</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">],</span>\n                <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n            <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n        <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">]</span>\n    <span class=\"p\">)(</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"n\">D</span><span class=\"p\">).</span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DumPy\n</span><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i1</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i2</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i3</span><span class=\"p\">:</span>\n            <span class=\"n\">E</span><span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">,</span><span class=\"n\">i2</span><span class=\"p\">,:,</span><span class=\"n\">i3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">],</span><span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"n\">i2</span><span class=\"p\">],::</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i2</span><span class=\"p\">,</span> <span class=\"n\">i3</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># DumPy (alternative)\n</span><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"n\">E</span><span class=\"p\">[</span><span class=\"s\">'i1'</span><span class=\"p\">,</span><span class=\"s\">'i2'</span><span class=\"p\">,:,</span><span class=\"s\">'i3'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"s\">'i1'</span><span class=\"p\">],</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'i1'</span><span class=\"p\">,</span><span class=\"s\">'i2'</span><span class=\"p\">],</span> <span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s\">'i2'</span><span class=\"p\">,</span><span class=\"s\">'i3'</span><span class=\"p\">]]</span>\n\n</code></pre></div>  </div>\n</details>\n\n<details>\n  Gaussian Densities\n\n  <p>The goal of this problem is, given a list of vectors and a list of <a href=\"https://en.wikipedia.org/wiki/Multivariate_normal_distribution\">Gaussians</a> parameters, and arrays mapping each vector to a list of parameters, evaluate each corresponding vector/parameter combination. Formally, given 2D <code class=\"language-plaintext highlighter-rouge\">X</code>, <code class=\"language-plaintext highlighter-rouge\">B</code>, <code class=\"language-plaintext highlighter-rouge\">C</code>, and <code class=\"language-plaintext highlighter-rouge\">means</code> and 3D <code class=\"language-plaintext highlighter-rouge\">covs</code>, the goal is to create <code class=\"language-plaintext highlighter-rouge\">A</code> with</p>\n\n  <p>\u00a0\u00a0<code>A<sub>ij</sub> = log N( X<sub>i</sub> | means<sub>B<sub>ij</sub></sub>, covs<sub>C<sub>ij</sub></sub>) </code>.</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Setup\n</span><span class=\"n\">ndims</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">ndata</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">neval</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">ndist</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">ndata</span><span class=\"p\">,</span> <span class=\"n\">ndims</span><span class=\"p\">)</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ndist</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">ndata</span><span class=\"p\">,</span> <span class=\"n\">neval</span><span class=\"p\">))</span>\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ndist</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">ndata</span><span class=\"p\">,</span> <span class=\"n\">neval</span><span class=\"p\">))</span>\n<span class=\"n\">means</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">ndist</span><span class=\"p\">,</span> <span class=\"n\">ndims</span><span class=\"p\">)</span>\n<span class=\"n\">scales</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">ndist</span><span class=\"p\">,</span> <span class=\"n\">ndims</span><span class=\"p\">,</span> <span class=\"n\">ndims</span><span class=\"p\">))</span>\n<span class=\"n\">covs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">scale</span> <span class=\"o\">@</span> <span class=\"n\">scale</span><span class=\"p\">.</span><span class=\"n\">T</span> <span class=\"k\">for</span> <span class=\"n\">scale</span> <span class=\"ow\">in</span> <span class=\"n\">scales</span><span class=\"p\">])</span>\n</code></pre></div>  </div>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Loops\n</span><span class=\"k\">def</span> <span class=\"nf\">log_prob</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">cov</span><span class=\"p\">):</span>\n    <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">mean</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">cov</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">)</span>\n    <span class=\"n\">quad</span> <span class=\"o\">=</span> <span class=\"n\">diff</span> <span class=\"o\">@</span> <span class=\"n\">y</span>\n    <span class=\"n\">logdet</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">slogdet</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">cov</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">quad</span> <span class=\"o\">+</span> <span class=\"n\">logdet</span><span class=\"p\">)</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"n\">ndata</span><span class=\"p\">,</span> <span class=\"n\">neval</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ndata</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">neval</span><span class=\"p\">):</span>\n        <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">log_prob</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:],</span>\n                           <span class=\"n\">means</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"p\">:],</span>\n                           <span class=\"n\">covs</span><span class=\"p\">[</span><span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"p\">:,</span> <span class=\"p\">:])</span>\n\n<span class=\"c1\"># NumPy\n</span><span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">-</span> <span class=\"n\">means</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">covs</span><span class=\"p\">[</span><span class=\"n\">C</span><span class=\"p\">],</span> <span class=\"n\">diff</span><span class=\"p\">[...,</span> <span class=\"bp\">None</span><span class=\"p\">])</span>\n<span class=\"n\">quad</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">diff</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">[...,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">logdet</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">slogdet</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">covs</span><span class=\"p\">[</span><span class=\"n\">C</span><span class=\"p\">])[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">quad</span> <span class=\"o\">+</span> <span class=\"n\">logdet</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># JAX\n</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n        <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span>\n            <span class=\"n\">log_prob_gauss</span><span class=\"p\">,</span>\n            <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">means</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">],</span> <span class=\"n\">covs</span><span class=\"p\">[</span><span class=\"n\">C</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># DumPy\n</span><span class=\"k\">def</span> <span class=\"nf\">log_prob</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">cov</span><span class=\"p\">):</span>\n    <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">mean</span>\n    <span class=\"n\">quad</span> <span class=\"o\">=</span> <span class=\"n\">diff</span> <span class=\"o\">@</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">cov</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">)</span>\n    <span class=\"n\">logdet</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">slogdet</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">cov</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">ndata</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">neval</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n        <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">log_prob</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,:],</span>\n                           <span class=\"n\">means</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">],:],</span>\n                           <span class=\"n\">covs</span><span class=\"p\">[</span><span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">],:,:])</span>\n\n<span class=\"c1\"># DumPy (alternate)\n</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">ndata</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">neval</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n        <span class=\"n\">mean</span> <span class=\"o\">=</span> <span class=\"n\">means</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">],:]</span>\n        <span class=\"n\">cov</span> <span class=\"o\">=</span> <span class=\"n\">covs</span><span class=\"p\">[</span><span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">],:,:]</span>\n        <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,:]</span> <span class=\"o\">-</span> <span class=\"n\">mean</span>\n        <span class=\"n\">quad</span> <span class=\"o\">=</span> <span class=\"n\">diff</span> <span class=\"o\">@</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">cov</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">)</span>\n        <span class=\"n\">logdet</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">slogdet</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">cov</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">quad</span> <span class=\"o\">+</span> <span class=\"n\">logdet</span><span class=\"p\">)</span>\n</code></pre></div>  </div>\n\n</details>\n\n<details>\n  Multi-head self-attention\n\n  <p>See also the discussion in the <a href=\"https://dynomight.net/numpy/#attention-please\">previous post</a>.</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Setup\n</span><span class=\"n\">input_dim</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">seq_len</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">d_k</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">d_v</span> <span class=\"o\">=</span> <span class=\"n\">input_dim</span>\n<span class=\"n\">n_head</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">)</span>\n<span class=\"n\">W_q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n_head</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">d_k</span><span class=\"p\">)</span>\n<span class=\"n\">W_k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n_head</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">d_k</span><span class=\"p\">)</span>\n<span class=\"n\">W_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n_head</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">d_v</span><span class=\"p\">)</span>\n<span class=\"n\">W_o</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n_head</span><span class=\"p\">,</span> <span class=\"n\">d_v</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span> <span class=\"o\">//</span> <span class=\"n\">n_head</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Loops\n</span><span class=\"k\">def</span> <span class=\"nf\">softmax_numpy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">e_x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">e_x</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">e_x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">attention</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">):</span>\n    <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_q</span>\n    <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_k</span>\n    <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_v</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">Q</span> <span class=\"o\">@</span> <span class=\"n\">K</span><span class=\"p\">.</span><span class=\"n\">T</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">d_k</span><span class=\"p\">)</span>\n    <span class=\"n\">attention_weights</span> <span class=\"o\">=</span> <span class=\"n\">softmax_numpy</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">attention_weights</span> <span class=\"o\">@</span> <span class=\"n\">V</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">multi_head_attention_loops</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">,</span> <span class=\"n\">W_o</span><span class=\"p\">):</span>\n    <span class=\"n\">projected</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_head</span><span class=\"p\">):</span>\n        <span class=\"n\">my_output</span> <span class=\"o\">=</span> <span class=\"n\">attention</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span>\n                                <span class=\"n\">W_q</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:],</span>\n                                <span class=\"n\">W_k</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:],</span>\n                                <span class=\"n\">W_v</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:])</span>\n        <span class=\"n\">my_proj</span> <span class=\"o\">=</span> <span class=\"n\">my_output</span> <span class=\"o\">@</span> <span class=\"n\">W_o</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n        <span class=\"n\">projected</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">my_proj</span><span class=\"p\">)</span>\n    <span class=\"n\">projected</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">projected</span><span class=\"p\">)</span>\n\n    <span class=\"n\">final</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">):</span>\n        <span class=\"n\">my_final</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ravel</span><span class=\"p\">(</span><span class=\"n\">projected</span><span class=\"p\">[:,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n        <span class=\"n\">final</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">my_final</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">final</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># NumPy\n</span><span class=\"k\">def</span> <span class=\"nf\">softmax_numpy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"c1\"># repeat\n</span>    <span class=\"n\">e_x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">e_x</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">e_x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">multi_head_attention_numpy</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">,</span> <span class=\"n\">W_o</span><span class=\"p\">):</span>\n    <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">einsum</span><span class=\"p\">(</span><span class=\"s\">'si,hij-&gt;hsj'</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">)</span>\n    <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">einsum</span><span class=\"p\">(</span><span class=\"s\">'si,hik-&gt;hsk'</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">)</span>\n    <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">einsum</span><span class=\"p\">(</span><span class=\"s\">'si,hiv-&gt;hsv'</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">)</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">Q</span> <span class=\"o\">@</span> <span class=\"n\">K</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">d_k</span><span class=\"p\">)</span>\n    <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">softmax_numpy</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">weights</span> <span class=\"o\">@</span> <span class=\"n\">V</span>\n    <span class=\"n\">projected</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">einsum</span><span class=\"p\">(</span><span class=\"s\">'hsv,hvd-&gt;hsd'</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">W_o</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">projected</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">reshape</span><span class=\"p\">(</span>\n        <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># JAX\n</span><span class=\"k\">def</span> <span class=\"nf\">softmax_jax</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">e_x</span> <span class=\"o\">=</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">e_x</span> <span class=\"o\">/</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">e_x</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">attention_jax</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">):</span>\n    <span class=\"n\">d_k</span> <span class=\"o\">=</span> <span class=\"n\">W_k</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_q</span>\n    <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_k</span>\n    <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_v</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">Q</span> <span class=\"o\">@</span> <span class=\"n\">K</span><span class=\"p\">.</span><span class=\"n\">T</span> <span class=\"o\">/</span> <span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">d_k</span><span class=\"p\">)</span>\n    <span class=\"n\">attention_weights</span> <span class=\"o\">=</span> <span class=\"n\">softmax_jax</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">attention_weights</span> <span class=\"o\">@</span> <span class=\"n\">V</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">multi_head_attention_jax</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">,</span> <span class=\"n\">W_o</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">myfun</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">w_q</span><span class=\"p\">,</span> <span class=\"n\">w_k</span><span class=\"p\">,</span> <span class=\"n\">w_v</span><span class=\"p\">,</span> <span class=\"n\">w_o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">attention_jax</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">w_q</span><span class=\"p\">,</span> <span class=\"n\">w_k</span><span class=\"p\">,</span> <span class=\"n\">w_v</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">w_o</span>\n\n    <span class=\"n\">projected</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span><span class=\"n\">myfun</span><span class=\"p\">,</span>\n                            <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"p\">)(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">,</span> <span class=\"n\">W_o</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">jax</span><span class=\"p\">.</span><span class=\"n\">vmap</span><span class=\"p\">(</span><span class=\"n\">jnp</span><span class=\"p\">.</span><span class=\"n\">ravel</span><span class=\"p\">,</span> <span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">projected</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DumPy\n</span><span class=\"k\">def</span> <span class=\"nf\">softmax_dumpy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"c1\"># no need to think about dimensions!\n</span>    <span class=\"n\">e_x</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">e_x</span> <span class=\"o\">/</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">e_x</span><span class=\"p\">)</span>\n\n<span class=\"o\">@</span><span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">wrap</span> <span class=\"c1\"># needed to make functions with Slots auto-vectorizing\n</span><span class=\"k\">def</span> <span class=\"nf\">attention_dumpy</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">):</span>\n    <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_q</span>\n    <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_k</span>\n    <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_v</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">Q</span> <span class=\"o\">@</span> <span class=\"n\">K</span><span class=\"p\">.</span><span class=\"n\">T</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">d_k</span><span class=\"p\">)</span>\n    <span class=\"n\">attention_weights</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n        <span class=\"n\">attention_weights</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">softmax_dumpy</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">attention_weights</span> <span class=\"o\">@</span> <span class=\"n\">V</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">multi_head_attention_dumpy</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">,</span> <span class=\"n\">W_o</span><span class=\"p\">):</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n    <span class=\"n\">projected</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n    <span class=\"n\">final</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">n_head</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">attention_dumpy</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span>\n                                          <span class=\"n\">W_q</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:],</span>\n                                          <span class=\"n\">W_k</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:],</span>\n                                          <span class=\"n\">W_v</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:])</span>\n        <span class=\"n\">projected</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">@</span> <span class=\"n\">W_o</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n        <span class=\"n\">final</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">ravel</span><span class=\"p\">(</span><span class=\"n\">projected</span><span class=\"p\">[:,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n    <span class=\"k\">return</span> <span class=\"n\">final</span>\n\n<span class=\"c1\"># DumPy (alternate)\n</span><span class=\"k\">def</span> <span class=\"nf\">multi_head_attention</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W_q</span><span class=\"p\">,</span> <span class=\"n\">W_k</span><span class=\"p\">,</span> <span class=\"n\">W_v</span><span class=\"p\">,</span> <span class=\"n\">W_o</span><span class=\"p\">):</span>\n    <span class=\"n\">attn_weights</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n    <span class=\"n\">projected</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n    <span class=\"n\">final</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Slot</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">n_head</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_q</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n        <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_k</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n        <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">@</span> <span class=\"n\">W_v</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n        <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">Q</span> <span class=\"o\">@</span> <span class=\"n\">K</span><span class=\"p\">.</span><span class=\"n\">T</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">d_k</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n            <span class=\"n\">attn_weights</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">softmax_dumpy</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n        <span class=\"n\">projected</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">attn_weights</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">@</span> <span class=\"n\">V</span> <span class=\"o\">@</span> <span class=\"n\">W_o</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n    <span class=\"k\">with</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n        <span class=\"n\">final</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">.</span><span class=\"n\">ravel</span><span class=\"p\">(</span><span class=\"n\">projected</span><span class=\"p\">[:,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n    <span class=\"k\">return</span> <span class=\"n\">final</span>\n</code></pre></div>  </div>\n\n</details>\n\n<p>I gave each implementation a subjective \u201cgoodness\u201d score on a 1-10 scale. I always gave the best implementation for each problem 10 points, and then took off points from the others based on how much thinking they required.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Problem</th>\n      <th>Loops</th>\n      <th>Numpy</th>\n      <th>JAX (vmap)</th>\n      <th>DumPy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Hilbert matrices</td>\n      <td>10</td>\n      <td>7</td>\n      <td>7</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>Covariance</td>\n      <td>9</td>\n      <td>4</td>\n      <td>10</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td>Moving Ave.</td>\n      <td>10</td>\n      <td>6</td>\n      <td>6</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <td>Indexing</td>\n      <td>10</td>\n      <td>5</td>\n      <td>4</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>Gaussians</td>\n      <td>10</td>\n      <td>3</td>\n      <td>6</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>Attention</td>\n      <td>10</td>\n      <td>1</td>\n      <td>8</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td><strong>Mean</strong></td>\n      <td><strong>9.8</strong></td>\n      <td><strong>4.3</strong></td>\n      <td><strong>6.8</strong></td>\n      <td><strong>9.5</strong></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>According to this dubious methodology and these made-up numbers, DumPy is 96.93877% as good as loops! Knowledge is power! But seriously, while subjective, I don\u2019t think my scores should be <em>too</em> controversial. The most debatable one is probably JAX\u2019s attention score.</p>\n\n<h2 id=\"what-to-remove\">What to remove?</h2>\n\n<p>The <em>only</em> thing DumPy adds to NumPy is some nice notation for indices. That\u2019s it.</p>\n\n<p>What I think makes DumPy good is it also <em>removes</em> a lot of stuff. Roughly speaking, I\u2019ve tried to remove anything that is confusing and exists because NumPy doesn\u2019t have loops. I\u2019m not sure that I\u2019ve drawn the line in exactly the right place, but I do feel confident that I\u2019m on the right track, and removing stuff is good.</p>\n\n<h3 id=\"1-goodbye-broadcasting\">1. Goodbye broadcasting</h3>\n\n<p>In NumPy, <code class=\"language-plaintext highlighter-rouge\">A * B</code> works if <code class=\"language-plaintext highlighter-rouge\">A</code> and <code class=\"language-plaintext highlighter-rouge\">B</code> are both scalar. Or if <code class=\"language-plaintext highlighter-rouge\">A</code> is <code class=\"language-plaintext highlighter-rouge\">5\u00d71\u00d76</code> and <code class=\"language-plaintext highlighter-rouge\">B</code> is <code class=\"language-plaintext highlighter-rouge\">5\u00d71\u00d76\u00d71</code>. But not if <code class=\"language-plaintext highlighter-rouge\">A</code> is <code class=\"language-plaintext highlighter-rouge\">1\u00d75\u00d76</code> and <code class=\"language-plaintext highlighter-rouge\">B</code> is <code class=\"language-plaintext highlighter-rouge\">1\u00d75\u00d76\u00d71</code>. Huh?</p>\n\n<p>In truth, the <a href=\"https://numpy.org/doc/stable/user/basics.broadcasting.html\">broadcasting rules</a> aren\u2019t <em>that</em> complicated for scalar operations like multiplication. But still, I don\u2019t like it, because it adds complexity everywhere. <em>Every time</em> you see <code class=\"language-plaintext highlighter-rouge\">A * B</code>, you have to worry about what shapes those have and what the computation might be doing.</p>\n\n<p>So, I removed it. In DumPy you can only do <code class=\"language-plaintext highlighter-rouge\">A * B</code> if one of <code class=\"language-plaintext highlighter-rouge\">A</code> or <code class=\"language-plaintext highlighter-rouge\">B</code> is scalar or <code class=\"language-plaintext highlighter-rouge\">A</code> and <code class=\"language-plaintext highlighter-rouge\">B</code> have exactly the same shape. That\u2019s it, anything else raises an error. Instead, use indices, so it\u2019s clear what you\u2019re doing. Instead of this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[...,</span><span class=\"bp\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>write this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">,</span><span class=\"s\">'k'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"s\">'j'</span><span class=\"p\">,</span><span class=\"s\">'k'</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h3 id=\"2-goodbye-fancy-indexing\">2. Goodbye fancy indexing</h3>\n\n<p>Indexing in NumPy is <a href=\"https://dynomight.net/numpy/#i-dont-like-numpy-indexing\">absurdly complicated</a>. When you write <code class=\"language-plaintext highlighter-rouge\">A[B,C,D]</code> that could do <em>many</em> different things depending on what all the shapes are.</p>\n\n<p>I considered going cold-turkey and only allowing scalar indices in DumPy. That wouldn\u2019t have been <em>so</em> bad, since you can still do advanced stuff using loops. But it\u2019s quite annoying to not be able to write <code class=\"language-plaintext highlighter-rouge\">A[B]</code> when <code class=\"language-plaintext highlighter-rouge\">A</code> and <code class=\"language-plaintext highlighter-rouge\">B</code> are just simple 1D arrays.</p>\n\n<p>So I\u2019ve tentatively decided to be more pragmatic. In DumPy, you can index with integers, or slices, or (possibly mapped) <code class=\"language-plaintext highlighter-rouge\">Array</code>s. <strong>But only one <code class=\"language-plaintext highlighter-rouge\">Array</code> index can be non-scalar</strong>. I settled on this because it\u2019s the most general syntax that doesn\u2019t require thinking.</p>\n\n<p>Let me show you what I mean. If you see this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># legal in both numpy and dumpy\n</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>It\u2019s \u201cobvious\u201d what the output shape will be. (First the shape of <code class=\"language-plaintext highlighter-rouge\">1:6</code>, then the shape of <code class=\"language-plaintext highlighter-rouge\">C</code>, then the shape of <code class=\"language-plaintext highlighter-rouge\">2:10</code>). Simple enough. But as soon as you have <em>two</em> multidimensional array inputs like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># legal in numpy, verboten in dumpy\n</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Suddenly all hell breaks loose. You need to think about broadcasting between <code class=\"language-plaintext highlighter-rouge\">A</code> and <code class=\"language-plaintext highlighter-rouge\">B</code>, orthogonal vs. pointwise indices, slices behaving differently than arrays, and quirks for where the output dimensions go. So DumPy forbids this. Instead, you need to write one of these:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,:,:]</span>     <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">],</span>     <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">],</span>     <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"c1\"># (1)\n</span><span class=\"n\">D</span><span class=\"p\">[:,:,</span><span class=\"s\">'i'</span><span class=\"p\">]</span>     <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">],</span>     <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">],</span>     <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"c1\"># (2)\n</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">,:,:]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">],</span>     <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'j'</span><span class=\"p\">],</span>     <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"c1\"># (3)\n</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">,:,:]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">],</span>     <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"c1\"># (4)\n</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">,:,:]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"s\">'i'</span><span class=\"p\">,</span><span class=\"s\">'j'</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"c1\"># (5)\n</span></code></pre></div></div>\n\n<p>Those all do exactly what they look like they do.</p>\n\n<p>Oh, and one more thing! In DumPy, you <strong>must index all dimensions</strong>. In NumPy, if <code class=\"language-plaintext highlighter-rouge\">A</code> has three dimensions, then <code class=\"language-plaintext highlighter-rouge\">A[2]</code> is equivalent to <code class=\"language-plaintext highlighter-rouge\">A[2,:,:]</code>. This is sometimes nice, but it means that <em>every time</em> you see <code class=\"language-plaintext highlighter-rouge\">A[2]</code>, you have to worry about how many dimensions <code class=\"language-plaintext highlighter-rouge\">A</code> has.</p>\n\n<p>In DumPy, every index statement checks that all indices have been included. The same is true when assigning to a <code class=\"language-plaintext highlighter-rouge\">dp.Slot</code>. So when you see option (4) above, you <em>know</em> that:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">A</code> has 4 dimensions</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">B</code> has 2 dimensions</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">C</code> has 1 dimension</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">D</code> has 4 dimensions</li>\n</ul>\n\n<p>Always, always, <em>always</em>.</p>\n\n<h3 id=\"3-goodbye-complicated-functions\">3. Goodbye complicated functions</h3>\n\n<p>Again, many NumPy functions have complex conventions for vectorization. <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html\"><code class=\"language-plaintext highlighter-rouge\">np.linalg.solve</code></a> sort of says, \u201cIf the inputs have \u22642 dimensions, do the obvious thing. Otherwise, do some extremely confusing broadcasting thing.\u201d DumPy removes all the confusing broadcasting things. When you see <code class=\"language-plaintext highlighter-rouge\">dp.linalg.solve(A,B)</code>, you know that <code class=\"language-plaintext highlighter-rouge\">A</code> and <code class=\"language-plaintext highlighter-rouge\">B</code> have no more than two dimensions.</p>\n\n<p>Similarly, in NumPy, <code class=\"language-plaintext highlighter-rouge\">A @ B</code> is equivalent to <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.matmul.html\"><code class=\"language-plaintext highlighter-rouge\">np.matmul</code></a><code class=\"language-plaintext highlighter-rouge\">(A,B)</code>. When both inputs have \u22642 or fewer dimensions, this does the \u201cobvious thing\u201d. Otherwise, it does something I\u2019ve never quite been able to remember. DumPy doesn\u2019t need that confusing broadcasting thing, so it restricts <code class=\"language-plaintext highlighter-rouge\">A @ B</code> to two or fewer dimensions.</p>\n\n<h3 id=\"why-remove\">Why remove?</h3>\n\n<p>It might seem annoying to remove features, but I\u2019m telling you: <em>Just try it</em>. If you program this way, a wonderful feeling of calmness comes over you, as class after class of possible errors disappear.</p>\n\n<p>Put another way, why remove all the fancy stuff, instead of leaving it optional? Because optional implies thinking! I want to program in a simple way. I don\u2019t want to worry that I\u2019m accidentally triggering some confusing functionality, because that would be a mistake. I want the computer to help me catch mistakes, not silently do something weird that I didn\u2019t intend.</p>\n\n<p>In principle, it would be OK if there was a <code class=\"language-plaintext highlighter-rouge\">evil_batch_solve</code> method that preserves all the confusing batching stuff. If you <em>really</em> want that, you can make it yourself with <code class=\"language-plaintext highlighter-rouge\">dp.MappedFunction(jnp.linalg.solve)</code>.</p>\n\n<h2 id=\"discussion\">Discussion</h2>\n\n<p>Think about math: In two or fewer dimensions, coordinate-free linear algebra notation is wonderful. But for higher dimensional <a href=\"https://en.wikipedia.org/wiki/Tensor\">tensors</a>, there are just too many cases, so most physicists just use coordinates.</p>\n\n<p>So this solution seems pretty obvious to me. Honestly, I\u2019m a little confused why it isn\u2019t already standard. Am I missing something?</p>\n\n<h3 id=\"what-about-apl\">What about APL?</h3>\n\n<p>When I complain about NumPy, many people often suggest looking into <a href=\"https://en.wikipedia.org/wiki/APL_(programming_language)\">APL</a>-type languages, like A, J, K, or Q. (We\u2019re going to run out of letters soon.) The obvious disadvantages of these are that</p>\n\n<ol>\n  <li>They\u2019re unfamiliar</li>\n  <li>The code looks like gibberish</li>\n  <li>They don\u2019t usually provide autodiff or GPU execution</li>\n</ol>\n\n<p>None of those bother me. If the languages are better, we should learn to use them and make them do autodiff on GPUs. But I\u2019m not convinced they <em>are</em> better. When you actually learn these languages, what you figure out is that the symbol gibberish basically amounts to doing the same kind of dimension mashing that we saw earlier in NumPy:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AiX</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n                      <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,...,</span><span class=\"bp\">None</span><span class=\"p\">])[...,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">AiX</span> <span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">[:,</span><span class=\"bp\">None</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">T</span>\n</code></pre></div></div>\n\n<p>If I <em>have</em> to mash dimensions, I want to use the best tool. But I\u2019d prefer not to mash dimensions at all.</p>\n\n<h3 id=\"what-about-named-dimensions\">What about named dimensions?</h3>\n\n<p>People also often suggest \u201cNumPy with named dimensions\u201d as in <a href=\"https://docs.xarray.dev/en/stable/index.html\">xarray</a>. (PyTorch also has a <a href=\"https://docs.pytorch.org/docs/stable/named_tensor.html\">half-hearted implementation</a>.) Of course, DumPy also uses named dimensions, but there\u2019s a critical difference. In xarray, they\u2019re part of the arrays themselves, while in DumPy, they\u2019re \u201clocal\u201d and live outside the arrays.</p>\n\n<p>In some cases, permanent named dimensions are very nice. But for linear algebra, they\u2019re confusing. For example, suppose <code class=\"language-plaintext highlighter-rouge\">A</code> is 2D with named dimensions <code class=\"language-plaintext highlighter-rouge\">\"cat\"</code> and <code class=\"language-plaintext highlighter-rouge\">\"dog\"</code>. Now, what dimensions should <code class=\"language-plaintext highlighter-rouge\">A.T @ A</code> have? <code class=\"language-plaintext highlighter-rouge\">\"cat\"</code> twice? Or say you take a singular value decomposition like <code class=\"language-plaintext highlighter-rouge\">U, S, Vh = svd(A)</code>. What name should the inner dimensions have? Does the user have to specify that?</p>\n\n<p>I haven\u2019t seen a nice solution. xarray doesn\u2019t focus on linear algebra, so it\u2019s not much of an issue there. A theoretical \u201cDumPy with permanent names\u201d <em>might</em> be very nice, but I\u2019m not how it should work. This is worth thinking about more.</p>\n\n<h3 id=\"what-about-julia-or-other-language\">What about Julia or [other language]</h3>\n\n<p>I like <a href=\"https://julialang.org/\">Julia</a>! Loops are fast in Julia! But again, I don\u2019t think fast loops matter that much, because I want to move all the loops to the GPU. So even if I was using Julia, I think I\u2019d want to use a DumPy-type solution.</p>\n\n<p>I think Julia might well be a better host language than Python, but it wouldn\u2019t be because of fast loops, but because it offers much more powerful meta-programming capabilities. I built DumPy on top of JAX just because JAX is very mature and good at calling the GPU, but I\u2019d love to see the same idea used in Julia (\u201cDulia\u201d?) or other languages.</p>\n\n<h2 id=\"prototype\">Prototype</h2>\n\n<p>OK, I promised a link to my prototype, so here it is: <a href=\"https://dynomight.net/img/dumpy/dumpy.py\"><code class=\"language-plaintext highlighter-rouge\">dumpy.py</code></a></p>\n\n<p>It\u2019s just a single file with around 700 lines. I\u2019m leaving it as a single file because I want to stress that <strong>this is just something I hacked together in the service of this rant</strong>. I wanted to show that I\u2019m not totally out of my mind, and that doing all this is actually pretty easy.</p>\n\n<p>I stress that I don\u2019t really intend to update or improve this. (Unless someone gives me a lot of money?) So please do not attempt to use it for \u201creal work\u201d, and do not make fun of my code.</p>\n\n<p><em>P.S</em>. DumPy works out of the box with both <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.jit.html\"><code class=\"language-plaintext highlighter-rouge\">jax.jit</code></a> and <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.grad.html\"><code class=\"language-plaintext highlighter-rouge\">jax.grad</code></a>. For gradients, you need to either cast the output to a JAX scalar or use the <code class=\"language-plaintext highlighter-rouge\">dp.grad</code> wrapper.</p>"
            ],
            "link": "https://dynomight.net/dumpy/",
            "publishedAt": "2025-05-22",
            "source": "Dynomight",
            "summary": "<p>What I want from an array language is:</p> <ol> <li>Don\u2019t make me think.</li> <li>Run fast on GPUs.</li> <li>Really, do not make me think.</li> <li>Do <em>not</em>.</li> </ol> <p>I say NumPy misses on three of these. So I\u2019d like to propose a \u201cfix\u201d that\u2014I claim\u2014eliminates 90% of unnecessary thinking, with no loss of power. It would also fix all the things based on NumPy, for example every machine learning library.</p> <p>I know that sounds grandiose. Quite possibly you\u2019re thinking that good-old dynomight has finally lost it. So I warn you now: My solution is utterly non-clever. If anything is clever here, it\u2019s my single-minded rejection of cleverness.</p> <p>To motivate the fix, let me give my story for how NumPy went wrong. It started as a nice little library for array operations and linear algebra. When everything has two or fewer dimensions, it\u2019s great. But at some point, someone showed up with some higher-dimensional arrays. If loops were fast in Python, NumPy would have said, \u201cHello person with \u22653 dimensions, please call my \u22642 dimensional functions in a loop so I can stay nice and simple, xox, NumPy.\u201d</p> <p>But since loops are slow, NumPy instead took all the complexity that would <em>usually</em> be",
            "title": "DumPy: NumPy except it\u2019s OK if you\u2019re dum"
        },
        {
            "content": [
                "<p>Companies are approaching AI transformation with incomplete information. After extensive conversations with organizations across industries, I think four key facts explain what's really happening with AI adoption:</p><ol><li><p><strong>AI boosts work performance. </strong>How do we know? For one thing, workers certainly think it does. A<a href=\"https://bfi.uchicago.edu/insights/the-adoption-of-chatgpt/\"> representative study of knowledge workers in Denmark</a> found that users thought that AI halved their working time for 41% of the tasks they do at work, and<a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5136877\"> a more recent survey of Americans</a> found that workers said using AI tripled their productivity (reducing 90-minute tasks to 30 minutes). Self-reporting is never completely accurate, but we have other data from controlled experiments that suggest gains among <a href=\"https://www.oneusefulthing.org/p/the-cybernetic-teammate\">product developmen</a>t, <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4397280\">sales</a>, and <a href=\"https://www.oneusefulthing.org/p/centaurs-and-cyborgs-on-the-jagged\">consulting</a>, as well as for <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4945566\">coders</a>, <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5162111\">law students</a>, and <a href=\"https://www.nber.org/papers/w31161\">call center workers</a>. </p></li><li><p><strong>A large percentage of people are using AI at work.</strong> That Danish study from a year ago found that 65% of marketers, 64% of journalists, and 30% of lawyers, among others, had used AI at work. The study of American workers found over 30% had used AI at work in December, 2024, a number which grew to 40% in April, 2025. And, of course, this may be an undercount in a world where ChatGPT is the fourth most visited website on the planet.</p></li><li><p><strong>There are more transformational gains available with today&#8217;s AI systems than most currently realize. </strong><a href=\"https://www.oneusefulthing.org/p/the-end-of-search-the-beginning-of\">Deep research reports do many hours of analytical work in a few minutes </a>(and I have been told by many researchers that checking these reports is much faster than writing them); agents are just starting to appear that can do real work; and <a href=\"https://www.oneusefulthing.org/p/on-jagged-agi-o3-gemini-25-and-everything\">increasingly smart systems can produce really high-quality outcomes</a>. </p></li><li><p><strong>These gains are not being captured by companies. </strong>Companies are typically reporting small to moderate gains from AI so far, and there is <a href=\"https://www.nber.org/papers/w33777\">no major impact on wages or hours worked</a> as of the end of 2024.</p></li></ol><p>How do we reconcile the first three points with the final one? The answer is that AI use that boosts individual performance does not naturally translate to improving organizational performance. To get organizational gains requires organizational innovation, rethinking incentives, processes, and even the nature of work. But the muscles for organizational innovation inside companies have atrophied. For decades, companies have outsourced this to consultants or enterprise software vendors who develop generalized approaches that address the issues of many companies at once. That won&#8217;t work here, at least for a while. Nobody has special information about how to best use AI at your company, or a playbook for how to integrate it into your organization. Even the major AI companies <a href=\"https://x.com/emollick/status/1819832350345396469\">release models without knowing how they can be best used</a>. They especially don&#8217;t know your industry, organization, or context. </p><p>We are all figuring this out together. So, if you want to gain an advantage, you are going to have to figure it out faster than everyone else. And to do that, you will need to harness the efforts of Leadership, Lab, and Crowd - the three keys to AI transformation.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F370e328b-e4a5-4291-ae86-f06ad0df45fb_738x627.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"399.3089430894309\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F370e328b-e4a5-4291-ae86-f06ad0df45fb_738x627.png\" width=\"470\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><h1>Leadership</h1><p>Ultimately, AI starts as a leadership problem, where leaders recognize that AI presents urgent challenges and opportunities. One big change since I wrote about this topic months ago is that more leaders are starting to recognize the need to address AI. You can see this in two viral memos, from the <a href=\"https://x.com/tobi/status/1909251946235437514?lang=en\">CEO of Shopify</a> and the <a href=\"https://www.linkedin.com/feed/update/urn:li:activity:7322560534824865792/\">CEO of Duolingo</a>, establishing the importance of AI to their company&#8217;s future.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F966df1dd-adf0-43c1-90ad-bb467e6989bb_1120x653.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"653\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F966df1dd-adf0-43c1-90ad-bb467e6989bb_1120x653.png\" width=\"1120\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>But urgency alone isn't enough. These messages do a good job signaling the 'why now' but stop short of painting that crucial, vivid picture: what does the AI-powered future <em>actually look and feel like</em> for your organization? My colleague Andrew Carton has shown that workers are not motivated to change by leadership statements about performance gains or bottom lines, they want <a href=\"https://knowledge.wharton.upenn.edu/article/what-leaders-can-learn-from-nasa/\">clear and vivid</a> images of what the future actually looks like: What will work be like in the future? Will efficiency gains be translated into layoffs or will they be used to grow the organization? How will workers be rewarded (or punished) for how they use AI? You don&#8217;t have to know the answer with certainty, but you should have a goal that you are working towards that you are willing to share. Workers are waiting for guidance, and the nature of that guidance will impact how The Crowd adopts and uses AI.</p><p>An overall vision is not enough, however, because leaders need to start to anticipate how work will change in a world of AI. While AI is not currently a replacement for most human jobs, it does replace specific tasks within those jobs. I have spoken to numerous legal professionals who see the current state of Deep Research tools as good enough to handle portions of once-expensive research tasks. Vibe coding changes how programmers allocate time and effort. And it is hard to not see changes to marketing and media work in the rapid gains in AI video. For example, Google&#8217;s new Veo 3 created this short video snippet, sound and all, from the text prompt: <em>An advertisement for Cheesey Otters, a new snack made out of otter shaped crackers. The commercial shows a kid eating them, and the mom holds up the package and says \"otterly great\"</em></p><div class=\"native-video-embed\"></div><p>Yet the ability to make a short video clip, or code faster, or get research on demand, does not equal performance gains. To do that will require decisions about where Leadership and The Lab should work together to build and test new workflows that integrate AIs and humans. It also means fundamentally rethinking <strong>why </strong>you are doing particular tasks. Companies used to pay tens of thousands of dollars for a single research report, now they can generate hundreds of those for free. What does that allow your analysts and managers to do? If hundreds of reports aren&#8217;t useful, then what was the point of research reports?</p><p>I am increasingly seeing organizations start to experiment with radical new approaches to work in response to AI. For example, dispersing software engineering teams, removing them from a central IT function and instead having them work in cross-functional teams with subject matter experts and marketing experts. Together, these groups can &#8220;<a href=\"https://www.oneusefulthing.org/p/speaking-things-into-existence\">vibework</a>&#8221; and independently build projects in days that would have taken months of coordination across departments. And this is just one possible future for work. Leaders need to describe the future they want, but they also don&#8217;t have to generate every idea for innovation on their own. Instead, they can turn to The Crowd and The Lab.</p><h1>The Crowd</h1><p>Both innovation and performance improvements happen in The Crowd, the employees who figure out how to use AI to help get their own work done. As there is no instruction manual for AI (seriously, everyone is figuring this out together), learning to use AI well is a process of discovery that benefits experienced workers. People with a strong understanding of their job can easily assess when an AI is useful for their work through trial and error, in the way that outsiders (<a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4857373\">and even AI-savvy junior workers</a>) cannot. Experienced AI users can then share their workflows and AI use in ways that benefit everyone.</p><p>Enticed by this vision, companies (including those in highly regulated industries<a class=\"footnote-anchor\" href=\"https://www.oneusefulthing.org/feed#footnote-1\" id=\"footnote-anchor-1\" target=\"_self\">1</a>) have increasingly been giving employees direct access to AI chatbots, and some basic training, in hopes of seeing The Crowd innovate. Most run into the same problem, finding that the use of official AI chatbots maxes out at 20% or so of workers, and that reported productivity gains are small. Yet over 40% of workers admit using AI at work, and they are privately reporting large performance gains. This discrepancy points to two critical dynamics: many workers are hiding their AI use, often for good reason, while others remain unsure how to effectively apply AI to their tasks, despite initial training.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33cf93ef-dafc-4182-b898-82c16790ca5f_2020x1099.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"792\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33cf93ef-dafc-4182-b898-82c16790ca5f_2020x1099.png\" width=\"1456\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\">Results from<a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5136877\"> this recent survey</a> on AI use by a representative sample of American workers: adoption has been accelerating, and workers report huge time savings</figcaption></figure></div><p>These are problems that can be solved by Leadership and the Lab.</p><p>Solving the problem of hidden AI use (what I call &#8220;Secret Cyborgs&#8221;) is a Leadership problem. Consider the incentives of the average worker. They may have received a scary talk about how improper AI use might be punished, and they don&#8217;t want to take any risks. Or maybe they are being treated as heroes at work for their incredible AI-assisted outputs, but they suspect if they tell anyone it is AI, managers will stop respecting them. Or maybe they know that companies see productivity gains as an opportunity for cost cutting and suspect that they (or their colleagues) will be fired if the company realizes that AI does some of their job. Or maybe they suspect that if they reveal their AI use, even if they aren&#8217;t punished, they won&#8217;t be rewarded. Or maybe they know that even if companies don&#8217;t cut costs and reward their use, any productivity gains will just become an expectation that more work will get done. There are more reasons for workers to not use AI publicly than to use it.</p><p>Leadership can help. Instead of vague talks on AI ethics or terrifying blanket policies, provide clear areas where experimentation of any kind is permitted and be biased towards allowing people to use AI where it is ethically and legally possible. Leaders also should consider training less an opportunity to learn prompting techniques (which are valuable but getting less important as models get better at figuring out intent), but as a chance to give people hands-on AI experience and practice communicating their needs to AI. And, of course, you will need to figure out how you will reassure your workers that revealing their productivity gains will not lead to layoffs, because it is <a href=\"https://www.oneusefulthing.org/p/latent-expertise-everyone-is-in-r\">often a bad idea to use technological gains to fire workers at a moment of massive change</a>. Build incentives, even massive incentives (I have seen companies offer vacations, promotions, and large cash rewards), for employees who discover transformational opportunities for AI use. Leaders can also model use themselves, actively using AI at every meeting and talking about how it helps them. </p><p>Even with proper vision and incentives, there will still be a substantial number of workers who aren&#8217;t inclined to explore AI and just want clear use cases and products. That is where The Lab comes in.</p><h1>The Lab</h1><p>As important as decentralized innovation is, there is also a role for a more centralized effort to figure out how to use AI in your organization. Unlike a lot of research organizations, The Lab is <a href=\"https://www.hbs.edu/faculty/Shared%20Documents/conferences/2015-strategy-research/Organizational%20Ambidexterity%20in%20Action.pdf\">ambidextrous</a>, engaging in both exploration for the future (which in AI may just be months away) and exploitation, releasing a steady stream of new products and methods. Thus, The Lab needs to consist of subject matter experts and a mix of technologists and non-technologists. Fortunately, the Crowd provides the researchers, as those enthusiasts who figure out how to use AI and proudly share it with the company are often perfect members of The Lab. Their job will be completely, or mostly, about AI. You need them to focus on building, not analysis or abstract strategy. Here is what they will build:</p><ul><li><p><strong>Take prompts and solutions from The Crowd and distribute them widely, very quickly. </strong>The Crowd will discover use cases and problems that can be turned into immediate opportunities. Build fast and dirty products with cross-functional teams, centered around simple prompts and agents. Iterate and test them. Then release them into your organization and measure what happens. Keep doing this.</p></li><li><p><strong>Build AI benchmarks for your organization. </strong>Almost all the official benchmarks for AI are flawed, or focus on tests of trivia, math or coding. These don&#8217;t tell you which AI does the best writing or can best analyze a financial model or can help guide a customer making purchases. You need to develop your own benchmarks: how good are each of the models at the tasks you actually do inside of your company? How fast is the gap closing? Leadership should help provide some guidance, but ultimately The Lab will need to decide what to measure and how. Some benchmarks will be objective (<a href=\"https://docs.anthropic.com/en/docs/build-with-claude/develop-tests\">Anthropic has a guide to benchmarking that can help as a starting place</a>), but it is also fine for some complex benchmarks to be &#8220;vibes alone,&#8221; based on experience. </p><p></p><p>For example, I &#8220;vibe benchmarked&#8221; Manus, an AI agent based on Claude, on its ability to analyze new startups by giving it a hard assignment and evaluating the results. I gave it a short description of a fictional startup and a detailed set of projected financials in an Excel file. These materials came from a complex business simulation we built at Wharton (and never shared online) that took teams of students dozens of hours to complete. I was curious if the AI could figure it out. As guidance, I gave it a checklist of business model elements to analyze, and nothing else.</p></li></ul><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8b7cca70-c4c8-42bf-b90d-90c5d3284d9b_1938x1162.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"317.1820054945055\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8b7cca70-c4c8-42bf-b90d-90c5d3284d9b_1938x1162.png\" title=\"\" width=\"529\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>In just a couple of prompts, Manus developed a website, a PowerPoint pitch deck, an analysis of the business model, and a test of the financial assumptions based on market research. <a href=\"https://manus.im/share/T5z4rGx2F2PnzhqBZ56Ko2?replay=1\">You can see it at work here</a>. In my evaluations of the work, the 45 page business model analysis was very solid. It was not completely free from mistakes, but has far less mistakes, and is far more thorough, than what I would expect from talented students. I also got an initial draft website, the requested PowerPoint, and a Deep Dive in financial assumptions. Looking through these helped me find weak spots &#8212; image generation, a tendency to extrapolate answers without asking me &#8212; and strong ones. Now, every time a new agentic system comes out, I can compare it to Manus and see where things are heading.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1b3615a-976c-46c5-81bd-392ad7358aa8_2605x1854.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"1036\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1b3615a-976c-46c5-81bd-392ad7358aa8_2605x1854.png\" width=\"1456\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p></p><ul><li><p><strong>Go beyond benchmarks to build stuff that doesn&#8217;t work&#8230; yet. </strong>What would it look like if you used AI agents to do all the work for key business processes? Build it and see where it fails. Then, when a new model comes out, plug it into what you built and see if it is any better. If the rate of advancement continues, this gives you the opportunity to get a first glance at where things are heading, and to actually have a deployable prototype at the first moment AI models improve past critical thresholds.</p></li><li><p><strong>Build provocations. </strong>Many people haven't truly engaged with AI's potential. Demos and visceral experiences that jolt people into understanding how AI could transform your organization, or even make them a little uncomfortable, have immense value in sparking curiosity and overcoming inertia. Show what seems impossible today but might be commonplace tomorrow.</p><p></p></li></ul><h1>Re-examining the organization</h1><p>The truth is that even this framework might not be enough. Our organizations, from their structures to their processes to their goals, were all built around human intelligence because that's all we had. AI alters this fundamental fact, we can now get intelligence, of a sort, on demand, which requires us to think more deeply about the nature of work. When research that once took weeks now takes minutes, the bottleneck isn't the research anymore, it's figuring out what research to do. When code can be written quickly, the limitation isn't programming speed, it's understanding what to build. When content can be generated instantly, the constraint isn't production, it's knowing what will actually matter to people.</p><p>And the pace of change isn't slowing. Every few months (weeks? days?) we see new capabilities that force us to rethink what's possible. The models are getting better at complex reasoning, at working with data, at understanding context. They're starting to be able to plan and act on their own. Each advance means organizations need to adapt faster, experiment more, and think bigger about what AI means for their future. The challenge isn't implementing AI as much as it is transforming how work gets done. And that transformation needs to happen while the technology itself keeps evolving.</p><p>The key is treating AI adoption as an organizational learning challenge, not merely a technical one. Successful companies are building feedback loops between Leadership, Lab, and Crowd that let them learn faster than their competitors. They are rethinking fundamental assumptions about how work gets done. And, critically, they're not outsourcing or ignoring this challenge.</p><p>The time to begin isn't when everything becomes clear - it's now, while everything is still messy and uncertain. The advantage goes to those willing to learn fastest.</p><p class=\"button-wrapper\"><a class=\"button primary\" href=\"https://www.oneusefulthing.org/subscribe\"><span>Subscribe now</span></a></p><p class=\"button-wrapper\"><a class=\"button primary\" href=\"https://www.oneusefulthing.org/p/making-ai-work-leadership-lab-and?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share\"><span>Share</span></a></p><p></p><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://www.oneusefulthing.org/feed#footnote-anchor-1\" id=\"footnote-1\" target=\"_self\">1</a><div class=\"footnote-content\"><p>When I talk to companies, the General Counsel's office is often the choke point that determines AI success. Many firms still ban AI use for outdated privacy reasons (no major model trains on enterprise or API data, and you can get fully HIPAA etc. compliant versions). While no cloud software is without risk, there are risks in not acting: shadow AI use is nearly universal, and all of the experimentation and learning is kept secret when the company doesn&#8217;t allow AI use. Fortunately, there are lots of role models to follow, including companies in heavily regulated industries that are adopting AI across all functions of their firm.</p></div></div>"
            ],
            "link": "https://www.oneusefulthing.org/p/making-ai-work-leadership-lab-and",
            "publishedAt": "2025-05-22",
            "source": "Ethan Mollick",
            "summary": "<p>Companies are approaching AI transformation with incomplete information. After extensive conversations with organizations across industries, I think four key facts explain what's really happening with AI adoption:</p><ol><li><p><strong>AI boosts work performance. </strong>How do we know? For one thing, workers certainly think it does. A<a href=\"https://bfi.uchicago.edu/insights/the-adoption-of-chatgpt/\"> representative study of knowledge workers in Denmark</a> found that users thought that AI halved their working time for 41% of the tasks they do at work, and<a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5136877\"> a more recent survey of Americans</a> found that workers said using AI tripled their productivity (reducing 90-minute tasks to 30 minutes). Self-reporting is never completely accurate, but we have other data from controlled experiments that suggest gains among <a href=\"https://www.oneusefulthing.org/p/the-cybernetic-teammate\">product developmen</a>t, <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4397280\">sales</a>, and <a href=\"https://www.oneusefulthing.org/p/centaurs-and-cyborgs-on-the-jagged\">consulting</a>, as well as for <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4945566\">coders</a>, <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5162111\">law students</a>, and <a href=\"https://www.nber.org/papers/w31161\">call center workers</a>. </p></li><li><p><strong>A large percentage of people are using AI at work.</strong> That Danish study from a year ago found that 65% of marketers, 64% of journalists, and 30% of lawyers, among others, had used AI at work. The study of American workers found over 30% had used AI at work in December, 2024, a number which grew to 40% in April, 2025. And, of course, this may be an",
            "title": "Making AI Work: Leadership, Lab, and Crowd"
        },
        {
            "content": [],
            "link": "https://harper.blog/notes/2025-05-22_b3923ca7a5f1_things-are-starting-to-heat-up/",
            "publishedAt": "2025-05-22",
            "source": "Harper Reed",
            "summary": "<p>Things are starting to heat up over here</p> <figure> <img alt=\"image_1.jpg\" height=\"1800\" src=\"https://harper.blog/notes/2025-05-22_b3923ca7a5f1_things-are-starting-to-heat-up/image_1.jpg\" width=\"1800\" /> </figure> <hr /> <p>Thank you for using RSS. I appreciate you. <a href=\"mailto:harper&#64;modest.com\">Email me</a></p>",
            "title": "Note #249"
        },
        {
            "content": [],
            "link": "https://harper.blog/notes/2025-05-22_2f35db54bde2_headshot-day-at-the-studio/",
            "publishedAt": "2025-05-22",
            "source": "Harper Reed",
            "summary": "<p>Headshot day at the studio</p> <figure> <img alt=\"image_1.jpg\" height=\"1012\" src=\"https://harper.blog/notes/2025-05-22_2f35db54bde2_headshot-day-at-the-studio/image_1.jpg\" width=\"1799\" /> </figure> <hr /> <p>Thank you for using RSS. I appreciate you. <a href=\"mailto:harper&#64;modest.com\">Email me</a></p>",
            "title": "Note #248"
        },
        {
            "content": [
                "<h1>Sketchy calendar</h1>\n<p>When it comes to calendars, you can choose between using a digital calendar app or getting a paper calendar. They both allow you to keep track of things like doctor appointments, work meetings or birthdays, so you can keep a clear head and be sure that you won\u2019t forget anything. But while the two approaches may seem similar on the surface, they\u2019re radically different in the kinds of trade-offs they make.</p>\n<p>In this project, we\u2019re exploring what it would mean to have a calendar that combines the convenience of a digital calendar with the simplicity and expressivity you get from pen & paper.</p>\n<h2>Calendar apps</h2>\n<p>On the one hand, calendar apps like Google Calendar offer many convenient features. You can easily switch between different (daily, weekly and monthly) views. All your events are synced across your devices. You can send calendar invites and even create shared calendars with other people, so when you plan something that affects others, you can check their availability.</p>\n<p><img alt=\"Weekly calendar of the author\" src=\"https://www.inkandswitch.com/google-calendar.png\" /></p>\n<p>While powerful, Google Calendar\u2019s design imposes a strict view of what a calendar event is. If you have tentative plans like \u201clunch with a friend sometime next week\u201d there is no obvious way to add this to your calendar in a way that differentiates it from an important appointment that can\u2019t be missed.</p>\n<p>Calendar apps can also feel very sterile and impersonal. All events are visually uniform, regardless of importance, even across different contexts. Events on my company calendar (which I only need to see for coordination) exist alongside my personal commitments with no visual hierarchy.</p>\n<p>A calendar app <em>could</em> be a deeply personal place for collecting memories, which allows users to reflect on how they are spending their time. In practice, calendar apps are primarily a tool for scheduling meetings.</p>\n<h2>Paper calendars</h2>\n<p>In contrast, using pen & paper is much more flexible. You can get calendars that offer varying degrees of structure, from completely blank notebooks with no imposed format to more structured planners that have preprinted pages for months, weeks, and days with dedicated sections for things like tasks and timelines. The preprinted structure acts more like a guideline than a requirement. It is easy to ignore: Users can draw arrows, doodle, and mark rough timeframes for activities, without being forced to fit a predetermined schema.</p>\n<p><img alt=\"Different notebooks offer different structures\" src=\"https://www.inkandswitch.com/physical-notebook.jpg\" /></p>\n<p>This versatility extends way beyond scheduling events\u2014the same pages can accommodate things like meeting notes, meal plans, to-dos, and habit tracking.\nUnlike apps that can only capture events, paper calendars grow naturally into personal spaces, capable of capturing the various aspects of daily life, like meal plans, to-do lists or habit trackers.</p>\n<p><img alt=\"People use notebooks to create meal plans, to-do lists and habit trackers\" src=\"https://www.inkandswitch.com/usecases-physical-notebook.jpg\" /></p>\n<h2>Can we combine both worlds?</h2>\n<p>What if you could have a digital calendar that combined the strengths of both the paper and the digital world?</p>\n<p>Some calendar apps have attempted to address this question by <em>adding more features</em>. <a href=\"https://www.hey.com/calendar/\">Hey Calendar</a>, for example, allows users to personalize their calendar by assigning titles or background images to days. Beyond events, users can also add unscheduled to-dos and track daily habits.</p>\n<p><img alt=\"Hey calendar, a calendar app with habit tracking todo list and other customization features\" src=\"https://www.inkandswitch.com/hey-calendar.png\" /></p>\n<p>While certainly an improvement over regular calendar apps, they remain constrained to the limits of the \u2018app\u2019 paradigm: users cannot customize their experience in ways the developers didn\u2019t anticipate, they\u2019re stuck with workarounds or feature requests that \u2014 if implemented \u2014 will inevitably lead to feature creep, which will add complexity for all users.</p>\n<p>Instead, we\u2019re interested in taking the paper calendar as a starting point. Pen & paper, straight out of the box, affords a level of customization and personalization that we rarely see in the world of software. But its unstructured nature also makes it difficult to add any of the convenient functionalities that we get when we digitize information. This project explores this trade-off. How far can we get by taking a simple digital notebook (iPad & pencil) and adding a small amount of structure?</p>\n<p>These are some of the questions we intend to explore:</p>\n<ul>\n<li>Is it possible to create interconnected daily, weekly and monthly views like a traditional calendar app?</li>\n<li>How might sketched annotations meaningfully interact with formal calendar events?</li>\n<li>How would shared calendars or calendar invites work in such a semi-structured system?</li>\n<li>How can users personalize their calendars by adding custom dynamic behavior? For example, how might I add a habit tracker or a time tracker, all while preserving the sketchy, personal quality?</li>\n</ul>\n<p>Here is a little sneak preview of what a sketchy calendar could look like. We will soon\nshare more about how this works and what we\u2019ve learned building it.</p>\n<p><img alt=\"Screenshot of digital notebook with calendar\" src=\"https://www.inkandswitch.com/sketchy-calendar.png\" /></p>\n<hr />\n<p><em>Image Credits:</em></p>\n<ul>\n<li>\n<p><a href=\"https://flickr.com/photos/y0mbo/26107340073/in/photolist-FM1WCZ-FM1WXB-U5MFEX-251Mf86-sqfAs1-2cGESYr-PzUwJo-PzUxA3-NpJ6ev-GRshJ9-2aGtrJ6-2jiLvV4-PNJnvv-RWoDe5-QHvm1h-Rqmukw-5MW23a-2k8D9m4-QHvmxQ-HQSgY2-RLqCEm-2oixdEb-2mPYpDT-2q4DvuX-2qednDM-dyf4U-jG1RyF-b61x2Z-dUWyW6-2dXVDgi-TkRtvC-8EHB3j-rQHPNG-ZF7GRu-2c87We7-4YtcTx-2qknDrM-2b7ENYD-2q7rhSJ-2iGacJ9-2pMERXY-XmhpmZ-Xypxvc-2kw5Wan-2npGwJF-2pJwSXn\">meal plan</a></p>\n</li>\n<li>\n<p><a href=\"https://flickr.com/photos/sixmilliondollardan/50899796627/in/photolist-2kxQLdt-2iEEi5A-cdJdE7-fXxw7x-TKnRsk-7zxaf1-5c57BW-rzKddE-2m5MdWL-8Z6NkM-A8zQK-2pnWC3P-aFPqJa-2pkq56p-2iwE23X-N9z6RV-hHWY5-D5ZvX5-jEtYpH-oiorGx-9mgpVL-dGf5bW-aZiN5H-W8f5kG-ikyvZR-2nDmv7m-jEwR8o-otfQ3-ikyEMj-6uri3r-ikyu83-9f71Se-ikyXAD-ikyZrn-ikyADF-ikyfqV-ikyCLL-ikyvoS-ikyGtq-ikytVv-FwgCnP-5vWFhP-pQPKRb-cZKDbL-xqvJQy-cMBUuu-aFPqF6-2nDgpFv-BRt1Wr-5V458b\">habit tracker</a></p>\n</li>\n<li>\n<p><a href=\"https://flickr.com/photos/y0mbo/26107341583/in/photolist-FM1WCZ-FM1WXB-FM1X62-U5MFEX-251Mf86-sqfAs1-2cGESYr-PzUywS-PzUwJo-PD7eCr-PzUxA3-NpJ6ev-GRshJ9-2mxkUro-2jiLvV4-PNJnvv-RWoDe5-QHvm1h-Rqmukw-5MW23a-2k8D9m4-QHvmxQ-HQSgY2-QHvmrh-RLqCEm-2oixdEb-2mPYpDT-2q4DvuX-2qednDM-dyf4U-jG1RyF-b61x2Z-dUWyW6-2dXVDgi-TkRtvC-8EHB3j-rQHPNG-ZF7GRu-2c87We7-4YtcTx-2qknDrM-2b7ENYD-2q7rhSJ-2iGacJ9-2pMERXY-XmhpmZ-Xypxvc-2npGwJF-2pJwSXn-2kw5W9f\">Weekly planner</a></p>\n</li>\n<li>\n<p><a href=\"https://flickr.com/photos/stephen_oldham/17339719324/in/photolist-FM1WCZ-FM1WXB-FM1X62-U5MFEX-251Mf86-sqfAs1-2cGESYr-PzUywS-PzUwJo-PD7eCr-PzUxA3-NpJ6ev-GRshJ9-2mxkUro-2jiLvV4-PNJnvv-RWoDe5-QHvm1h-Rqmukw-5MW23a-2k8D9m4-QHvmxQ-HQSgY2-QHvmrh-RLqCEm-2oixdEb-2mPYpDT-2q4DvuX-2qednDM-dyf4U-jG1RyF-b61x2Z-dUWyW6-2dXVDgi-TkRtvC-8EHB3j-rQHPNG-ZF7GRu-2c87We7-4YtcTx-2qknDrM-2b7ENYD-2q7rhSJ-2iGacJ9-2pMERXY-XmhpmZ-Xypxvc-2npGwJF-2pJwSXn-2kw5W9f\">Todo list</a></p>\n</li>\n</ul>"
            ],
            "link": "https://www.inkandswitch.com/ink/notes/sketchy-calendar/",
            "publishedAt": "2025-05-22",
            "source": "Ink & Switch",
            "summary": "Can we have a calendar that combines the convenience of a digital calendar with the simplicity and expressivity you get from pen &amp; paper?",
            "title": "Ink Note Q2 2025: Sketchy Calendar"
        },
        {
            "content": [
                "<div class=\"trix-content\">\n  <div>Whenever I write about our focus on cover letters during the hiring process, I'll inevitably receive the \"cover letters are still a thing?\" or \"people still read cover letters?\" response from a cadre of characters.<br /><br />Here's one from yesterday:<br /><a href=\"https://x.com/amfonte/status/1924996546896036278\">https://x.com/amfonte/status/1924996546896036278</a><br /><br />Yes, cover letters are a thing, and we absolutely still read them. And require them. We put significant weight on them.<br /><br />Cover letters are the first signal of effort, of care, of clear thinking, of communication ability, and of diligence. The fundamentals.<br /><br />They're the very first thing we read when people apply. And when they're bad, they're definitely the last thing we read from that applicant. We just stop there. They're green lights or red lights.<br /><br />A great cover letter tells a story about someone in a way nothing else quite will. A cover video could be another flavor, and I'm happy to see those as well, but we still want to see how someone writes. Most communication at 37signals is written, so being great on camera but poor on paper doesn't cut it.<br /><br />There's another tell in the cover letter: Are they applying for this job or just any job? It's pretty obvious if it's a general purpose mail merge, or a personal letter written to us about their passion for that position. The latter are the kinds of people we want to hire. The former can try somewhere else.<br /><br />A great cover letter is not too long, not too short. But them, in words we want to read. The kind of words we want more of.<br /><br />So that's where we start. From there we look at all sorts of other things, but you have to start somewhere. And for us, it's the sacred cover letter.<br /><br /></div><div>-Jason</div>\n</div>"
            ],
            "link": "https://world.hey.com/jason/cover-letters-yes-25dcdd0c",
            "publishedAt": "2025-05-22",
            "source": "Jason Fried",
            "summary": "<div class=\"trix-content\"> <div>Whenever I write about our focus on cover letters during the hiring process, I'll inevitably receive the \"cover letters are still a thing?\" or \"people still read cover letters?\" response from a cadre of characters.<br /><br />Here's one from yesterday:<br /><a href=\"https://x.com/amfonte/status/1924996546896036278\">https://x.com/amfonte/status/1924996546896036278</a><br /><br />Yes, cover letters are a thing, and we absolutely still read them. And require them. We put significant weight on them.<br /><br />Cover letters are the first signal of effort, of care, of clear thinking, of communication ability, and of diligence. The fundamentals.<br /><br />They're the very first thing we read when people apply. And when they're bad, they're definitely the last thing we read from that applicant. We just stop there. They're green lights or red lights.<br /><br />A great cover letter tells a story about someone in a way nothing else quite will. A cover video could be another flavor, and I'm happy to see those as well, but we still want to see how someone writes. Most communication at 37signals is written, so being great on camera but poor on paper doesn't cut it.<br /><br />There's another tell in the cover letter: Are they applying for this job or just any job?",
            "title": "Cover letters? Yes!"
        },
        {
            "content": [],
            "link": "https://simonwillison.net/2025/May/22/code-with-claude-live-blog/#atom-entries",
            "publishedAt": "2025-05-22",
            "source": "Simon Willison",
            "summary": "<p>I'm at Anthropic's Code with Claude event, where they are launching Claude 4. I'll be live blogging the keynote here.</p>",
            "title": "Live blog: Claude 4 launch at Code with Claude"
        },
        {
            "content": [
                "<p>I often disagree with Marginal Revolution, but <a href=\"https://marginalrevolution.com/marginalrevolution/2025/05/the-allocation-of-us-aid-funds.html#comments\">their post today</a> made me a new level of angry:</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa49ba31f-9645-4008-ad56-e029757c1807_1042x438.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"438\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa49ba31f-9645-4008-ad56-e029757c1807_1042x438.png\" width=\"1042\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>Commenters correctly point out that there&#8217;s a difference between regranting to other charities and &#8220;pocketing the money&#8221;.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F97dc3db2-3670-42f6-afb3-1753c5fa7a42_1017x156.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"156\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F97dc3db2-3670-42f6-afb3-1753c5fa7a42_1017x156.png\" width=\"1017\" /><div></div></div></a></figure></div><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadaa04ee-c89b-4e5c-85d1-972a14bbea65_1019x125.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"125\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadaa04ee-c89b-4e5c-85d1-972a14bbea65_1019x125.png\" width=\"1019\" /><div></div></div></a></figure></div><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b3b2c05-f159-49d1-b7d6-e28dd89adf4f_1007x166.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"166\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b3b2c05-f159-49d1-b7d6-e28dd89adf4f_1007x166.png\" width=\"1007\" /><div></div></div></a></figure></div><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb46ad3b4-480e-42a1-be85-d8c9e3a46fd6_1016x428.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"428\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb46ad3b4-480e-42a1-be85-d8c9e3a46fd6_1016x428.png\" width=\"1016\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93118d6f-847d-4a16-b829-135211693334_984x189.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"189\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93118d6f-847d-4a16-b829-135211693334_984x189.png\" width=\"984\" /><div></div></div></a></figure></div><p>USAID is not, itself, a charity. It is an organization that funds other charities. Cowen/Rubio&#8217;s claim that &#8220;only 12% goes [directly] to recipients&#8221; is false, because 0% goes directly to recipients, because USAID is not set up in a way where this even makes sense. All USAID money goes through other charities. The 12% number seems to be the amount that goes through foreign organizations (including charities, charitable government programs, and charitably-minded forprofits), with the other 88% going through charities based in the US.</p><p>There are various reasons why USAID works with more US nonprofits than local nonprofits. These include fears that local nonprofits would be corrupt or inefficient, compliance issues, and Congressional mandates (for example, some programs involving food are required to source it from US farmers and US companies). Before the Trump cuts, USAID was <a href=\"https://web.archive.org/web/20250118170457/https:/www.usaid.gov/sites/default/files/2025-01/FY2024%20Localization%20Progress%20Report_Final_508_2.pdf\">working on ways</a> to find and use more local partners, but this was a slow and difficult process. The same people who cry corruption when USAID works through US charities would <em>definitely</em> cry corruption if they worked through a foreign charity that turned out to be less than scrupulously honest. How many staff do you think it takes to prove that a hospital in Burkina Faso where nobody speaks English is definitely on the level? Is it really efficient for USAID to have all of these staff in house, for every hospital, for every cause area?</p><p>The organizations that accept USAID money take an overhead averaging ~30%<a class=\"footnote-anchor\" href=\"https://www.astralcodexten.com/feed#footnote-1\" id=\"footnote-anchor-1\" target=\"_self\">1</a>, then pass the rest onto recipients, or to even smaller, even more local organizations that take smaller overheads and pass it on to recipients. Overheads pay for salaries, facilities, compliance costs, and audits to make sure the money is reaching its intended targets. You will never have (and would not want) an overhead of zero.</p><p>Maybe Cowen thinks that 30% is too high an overhead? I asked o3 to estimate the overhead for the Mercatus Center, the libertarian charity that Cowen runs. It said that it was hard to give an apples-to-apples number because much of the administrative work that would be counted under &#8220;overhead&#8221; in other charities is covered by George Mason University. But it estimated that if the federal government gives a dollar of research funding to Mercatus, about 40% would go to combined university and Mercatus overhead - higher than the average USAID charity.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddbf76e4-1054-4653-93d3-6ea4987b76d1_713x218.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"181.92145862552596\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddbf76e4-1054-4653-93d3-6ea4987b76d1_713x218.png\" width=\"595\" /><div></div></div></a></figure></div><p>Or maybe he&#8217;s spooked by the admittedly-weird-and-incestuous world of charities that regrant money to other charities? I normally wouldn&#8217;t begrudge someone for being unnerved by this. But Cowen is the director of a charity that regrants money to other charities! Here is <a href=\"https://www.mercatus.org/announcements/pce-program-announces-fourth-cohort-grant-recipients\">a typical cohort of Mercatus regrant recipients</a>, including the Council of Christian Colleges, the NC Leadership Forum, and &#8220;Vibecamp LLC&#8221;. </p><p>(disclosure: I <a href=\"https://www.astralcodexten.com/p/acx-grants-results-2024\">also take funders&#8217; money and regrant it to other charities</a>, although I would gouge my own eyes out with a spoon before giving it to Vibecamp)</p><p>Cowen and I both do regranting because it works, and because it&#8217;s really hard to have high-level charitable priorities without it. If I have $1 million or $1 billion and want to cure cancer, I may not personally have the right skill set to be a cancer researcher, or to found a cancer research lab, or to figure out which cancer research labs are good and need the most money. I might only know and trust someone in an organization that specializes in figuring out which cancer labs are good and connecting them to funders. Maybe I don&#8217;t even know that, and I only know and trust somebody who knows and trusts that person. These are things that sound silly to the uninitiated, but can quickly become your whole career once you start dabbling in charity. </p><p>USAID programs like PEPFAR have <a href=\"https://pepfarreport.org/\">saved millions of lives</a>, which suggests USAID does a pretty good job of deciding who to trust with their money. The Trump administration is trying to turn Americans against these programs by pretending that the money gets &#8220;pocketed&#8221; by intermediaries. This is a lie. PEPFAR is <a href=\"https://pepfarreport.org/#does-pepfar-money-get-spent-as-reported\">well-audited</a> and the audits find between 0-2% unexplained expenses, which is lower than the average domestic US government program. </p><p>Not every program is this good. Some are cringe scholarships-for-underrepresented-women-in-permaculture garbage<a class=\"footnote-anchor\" href=\"https://www.astralcodexten.com/feed#footnote-2\" id=\"footnote-anchor-2\" target=\"_self\">2</a>. Others go over budget or accomplish less than hoped, because charity is hard. But the overall track record is outstanding, outright fraud is rare, and the cringe is less common than you think (because Rubio and Trump falsely attributed many cringe programs to USAID that <a href=\"https://www.factcheck.org/2025/02/sorting-out-the-facts-on-waste-and-abuse-at-usaid/\">it never funded at all</a>).</p><p>Politics is nasty and sometimes involves lies. But the thousands of doctors, nurses, and charity workers who give up more lucrative careers elsewhere to save lives in the developing world are some of my heroes. I&#8217;ve talked to many of these people (<a href=\"https://www.amazon.com/Edge-Everyday-Adventures-Disaster-Medicine/dp/B0F1CL61T9\">see my father&#8217;s story of his time in this world here</a>) and I couldn&#8217;t do what they do for a month, let alone a whole career. When Trump and Rubio try to tar them as grifters in order to make it slightly easier to redistribute their Congress-earmarked money to kleptocrats and billionaire cronies, this goes beyond normal political lying into the sort of thing that makes you the scum of the earth, the sort of person for whom even an all-merciful God could not restrain Himself from creating Hell. </p><p>Part of the joy of owning your own blog is getting to make absolutely sure that you never unintentionally give one iota of aid or comfort to these lies or anything remotely associated with them. If Cowen means something else, I think he should clarify it better. Otherwise, I think he should edit his post to make it less misleading.</p><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://www.astralcodexten.com/feed#footnote-anchor-1\" id=\"footnote-1\" target=\"_self\">1</a><div class=\"footnote-content\"><p>I&#8217;m getting this from o3, since I wanted to match Cowen&#8217;s sources. It said that of the ~88% that it counted as going to third-parties, 20-35c went to overhead. Some of these charities then further regranted it to other charities, which total consumed another 5-10c. o3 gave some good sources, but I don&#8217;t know if these are the last word or if experts would fully endorse these numbers.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://www.astralcodexten.com/feed#footnote-anchor-2\" id=\"footnote-2\" target=\"_self\">2</a><div class=\"footnote-content\"><p>This is what I meant by the second-to-last paragraph of <a href=\"https://www.astralcodexten.com/p/the-other-covid-reckoning\">The Other COVID Reckoning</a>. If a group both saves millions of lives, and funds some cringe women-in-permaculture scholarships, this doesn&#8217;t in any sense &#8220;cancel out&#8221;. It comes out millions of lives ahead. By all means try to get rid of the cringe stuff if you can, but not in a way where you throw the baby out with the bathwater.</p></div></div>"
            ],
            "link": "https://www.astralcodexten.com/p/contra-mr-on-charity-regrants",
            "publishedAt": "2025-05-22",
            "source": "SlateStarCodex",
            "summary": "<p>I often disagree with Marginal Revolution, but <a href=\"https://marginalrevolution.com/marginalrevolution/2025/05/the-allocation-of-us-aid-funds.html#comments\">their post today</a> made me a new level of angry:</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa49ba31f-9645-4008-ad56-e029757c1807_1042x438.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"438\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa49ba31f-9645-4008-ad56-e029757c1807_1042x438.png\" width=\"1042\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>Commenters correctly point out that there&#8217;s a difference between regranting to other charities and &#8220;pocketing the money&#8221;.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F97dc3db2-3670-42f6-afb3-1753c5fa7a42_1017x156.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"156\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F97dc3db2-3670-42f6-afb3-1753c5fa7a42_1017x156.png\" width=\"1017\" /><div></div></div></a></figure></div><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadaa04ee-c89b-4e5c-85d1-972a14bbea65_1019x125.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"125\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadaa04ee-c89b-4e5c-85d1-972a14bbea65_1019x125.png\" width=\"1019\" /><div></div></div></a></figure></div><div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b3b2c05-f159-49d1-b7d6-e28dd89adf4f_1007x166.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"166\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b3b2c05-f159-49d1-b7d6-e28dd89adf4f_1007x166.png\" width=\"1007\" /><div></div></div></a></figure></div><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb46ad3b4-480e-42a1-be85-d8c9e3a46fd6_1016x428.png\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"428\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb46ad3b4-480e-42a1-be85-d8c9e3a46fd6_1016x428.png\" width=\"1016\" /><div class=\"image-link-expand\"><div",
            "title": "Contra MR On Charity Regrants"
        },
        {
            "content": [
                "<p><strong>I.</strong></p><p>Many commenters responded to <a href=\"https://www.astralcodexten.com/p/the-other-covid-reckoning\">yesterday&#8217;s post</a> by challenging the claim that 1.2 million Americans died of COVID:</p><blockquote><p>I'm still not convinced that number can be directly linked to Covid. Yes, I'm talking about the old clich&#233; \"died with Covid\" instead of \"died of Covid\". Shouldn't we talk about excess deaths only?</p></blockquote><blockquote><p>Nobody talks about \"1.2 million COVID deaths\" because the medical establishment played obvious and ridiculous games with the way it counted \"COVID deaths.\" Any patient with a positive PSR was required to be reported as such, even patients who were in vehicular accidents or suffering from late-stage cancer. This has been known since the beginning.</p></blockquote><blockquote><p>I'm sure some people did die from covid, but given how much we now know the statistics were faked, it seems to me most of these covid cases were other conditions that got labeled as it for variety of reasons, or died from the ventilators that were incorrectly prescribed in the early stage of the pandemic.</p></blockquote><blockquote><p>As many of the comments note, the attribution of 1.2M deaths to COVID is as questionable as the zoonotic origin story, the value of the vaccines to healthy young people, and the rest of the COVID rhetoric. Some, like Scott Alexander, still &#8220;trust the experts&#8221;. But many don&#8217;t. There doesn&#8217;t seem to be much objectively verified consensus ground truth here, just conflicting narratives and numbers.</p></blockquote><p>I didn&#8217;t know this was still such a topic of debate, but since it seems the comment section is split, let me present my case for the 1.2 million number and see if people still disagree.</p><p>If people died &#8220;with&#8221; COVID, ie of normal causes like flu, cancer, or car accidents while only incidentally having a positive COVID test, then total all-cause mortality during the COVID pandemic would be the same as always. If people died &#8220;of&#8221; COVID, then total all-cause mortality during the COVID pandemic would be higher than usual. </p><p>It was higher. This is <a href=\"https://www.census.gov/library/stories/2022/03/united-states-deaths-spiked-as-covid-19-continued.html\">via census.gov</a>, from the National Center For Health Statistics:</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3903919a-0784-4c8a-a2ef-97f644db94dd_800x574.avif\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"453.46\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3903919a-0784-4c8a-a2ef-97f644db94dd_800x574.avif\" width=\"632\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>It&#8217;s hard to read the exact numbers, but it looks like about 500,000 - 700,000 excess deaths in each of 2020 and 2021<a class=\"footnote-anchor\" href=\"https://www.astralcodexten.com/feed#footnote-1\" id=\"footnote-anchor-1\" target=\"_self\">1</a>, which adds up to most of the 1.2 million (although I think the full number might include some residual deaths during 2022+).</p><p>From the CDC, <a href=\"https://www.cdc.gov/nchs/nvss/vsrr/covid19/excess_deaths.htm\">via the White House</a>, correlation between reported COVID-19 deaths and excess deaths throughout the pandemic:</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6ad9dfc-5c55-4289-aeb8-1e8ca93ebb0a_531x329.jpeg\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"402.1111111111111\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6ad9dfc-5c55-4289-aeb8-1e8ca93ebb0a_531x329.jpeg\" width=\"649\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>They&#8217;re pretty much the same, maybe margin of error of 10% or so but not consistently in any direction.</p><p>(does that mean that the doctors and coroners charged with determining whether a given death was &#8220;with COVID&#8221; vs. &#8220;from COVID&#8221; did an amazing job? Most of the doctors I know are smart and hard-working and I&#8217;m sure they did their best on this - but these statistics don&#8217;t necessarily mean that. Suppose that the average elderly person has COVID for two weeks before either dying or recovering, and that they get one case of COVID during the pandemic. The yearly mortality rate for 70 year olds is 2%, so the risk-during-the-time-they-incidentally-have-COVID is 2%/(52/2) =~ 0.08%. There are 55 million seniors in the US, so if 0.08% of them incidentally died with COVID, that&#8217;s only 44,000 deaths - less than 5% of total excess mortality deaths. So even if doctors had been maximally lazy and dishonest and recorded every single case with incidental COVID as a COVID death, even car accidents - something I&#8217;m confident they didn&#8217;t do - this couldn&#8217;t have produced the observed death numbers.)</p><p>Is it possible that the CDC and National Center For Health Statistics are lying about all-cause mortality patterns? Seems unlikely, because <a href=\"https://mistybeach.com/mark/Covid.html\">individual states</a> reporting separately found similar patterns, and so did <a href=\"https://ourworldindata.org/excess-mortality-covid\">the other countries</a> that reported data. This would take a truly global conspiracy.</p><p><strong>II.</strong></p><p>I think this disproves the claim that it was just normal deaths being reported as COVID deaths. What about the alternative claim - that it wasn&#8217;t COVID that caused the extra deaths, but various treatments - ventilators, remdesevir, vaccines?</p><p>We know it wasn&#8217;t a specific single one of those treatments, because the treatments were only used during certain subsets of the pandemic, but the excess mortality was a constant function of COVID cases. So for example, it can&#8217;t just be vaccines, because people only started getting vaccinated in December 2020, but there was the same amount of excess all-cause mortality before that time. It can&#8217;t just be ventilators, because doctors significantly cut down on ventilator use by mid-to-late-2020, but there was the same amount of excess all-cause mortality after that time - also, the effect of ventilators on mortality <a href=\"https://archive.is/UJmIz\">was exhaustively studied, and is low</a>.</p><p>(Also, the reason people were getting put on ventilators was that they were having trouble breathing, their oxygen saturation had gone down to critical levels, and they were in the ICU. To claim that there was minimal direct COVID mortality and it was all ventilator-related would require that this was some completely new type of respiratory distress that could bring patients&#8217; oxygen saturation down to levels usually considered fatal, but which in this case wouldn&#8217;t kill them in the same way respiratory distress usually kills patients, for unclear reasons, <em>unless</em> doctors tried to treat it.)</p><p>You could still potentially stitch together several treatments, saying that all of them increased mortality (the same amount?) and by the time ventilators were falling out of fashion, vaccines and antivirals were revving up. But this would require every single COVID treatment to be unprecedentedly dangerous, at exactly the same level, and in a way invisible to studies.</p><p>Why would you do this? People get mad when I overuse the term &#8220;priors&#8221;, so let&#8217;s talk about burden of proof. There&#8217;s a new virus. It looks exactly like the kind of virus that people predicted would be a deadly pandemic - so much so that when the Wuhan Institute of Virology set out to create and study viruses that might cause deadly pandemics, they made ones so similar to this virus that we&#8217;re still not sure whether it was actually one of theirs. It&#8217;s known to cause thromboembolism, cardiac damage, and kidney damage in susceptible individuals, all complications that can potentially result in death. It infected hundreds of millions of weak old people of exactly the sort who die from viruses like this all the time. Why are we even trying to come up with a weird Rube Goldberg collection of precisely-calibrated-yet-undetectable iatrogenic injuries that would mimic the mortality pattern of a pandemic respiratory virus, rather than just acknowledging that the pandemic respiratory virus killed a number of people about in the middle of the range that pandemic respiratory viruses usually kill (more than seasonal flu, less than the Spanish Flu)?<a class=\"footnote-anchor\" href=\"https://www.astralcodexten.com/feed#footnote-2\" id=\"footnote-anchor-2\" target=\"_self\">2</a></p><p><strong>III.</strong></p><p>One commenter gives a plausible argument for doing this:</p><blockquote><p>1.2m dead is just not believable. I only know 1 person who died from catching covid (over 80, in a hospital for other reasons, caught it there and got lung damage, fairly late dueing the official pandemic). I have substantive network in Hawaii where lots of people got sick a few weeks before covid officially arrived in the USA. Not a single person I know there died out of hundreds, and that's early infections when it was worse and includes elderly people. </p></blockquote><p>This is my experience too - the only person I &#8220;know&#8221; who died from COVID was a relative of one of my patients, who I had never met and only heard about secondhand. I can&#8217;t deny COVID deaths seemed weirdly thin on the ground in my and many other people&#8217;s personal experiences - in a sense, that&#8217;s exactly what <a href=\"https://www.astralcodexten.com/p/the-other-covid-reckoning\">my earlier post</a> was about.</p><p>But is this really so mysterious? There are 340 million Americans, so if 1.2 million died of COVID, that&#8217;s about 1/300. This number - 1/300 - is also the prevalence of multiple sclerosis<a class=\"footnote-anchor\" href=\"https://www.astralcodexten.com/feed#footnote-3\" id=\"footnote-anchor-3\" target=\"_self\">3</a>. Do you know someone with multiple sclerosis? No? Then it&#8217;s not surprising that you also don&#8217;t know someone who died of COVID.<a class=\"footnote-anchor\" href=\"https://www.astralcodexten.com/feed#footnote-4\" id=\"footnote-anchor-4\" target=\"_self\">4</a></p><p>I actually asked about this on <a href=\"https://www.astralcodexten.com/p/acx-survey-results-2022\">the 2022 ACX survey</a> (as part of the research for <a href=\"https://www.astralcodexten.com/p/failure-to-replicate-anti-vaccine\">this post</a>). 6.5% of respondents said a family member had died of COVID (with &#8220;family member&#8221; described as &#8220;first and second degree relatives - ie self, brother, sister, mother, father, child, aunt, uncle, grandparent, grandchild, niece, or nephew&#8221;). I think this number is compatible with both &#8220;it killed a million people&#8221; and &#8220;it&#8217;s not surprising that most people don&#8217;t know anyone who it killed&#8221;.</p><p>If you still disagree, tell me why I&#8217;m wrong!</p><p></p><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://www.astralcodexten.com/feed#footnote-anchor-1\" id=\"footnote-1\" target=\"_self\">1</a><div class=\"footnote-content\"><p>The graph is slightly confusing, but remember, it&#8217;s per year, not total. So the large jump in 2020 and the very small jump in 2021 both mean that about 500-600K people died during each of those years.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://www.astralcodexten.com/feed#footnote-anchor-2\" id=\"footnote-2\" target=\"_self\">2</a><div class=\"footnote-content\"><p>Could the excess mortality have been caused by the negative effects of lockdowns, like suicide or drug overdose? No. Remember this graph?</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6ad9dfc-5c55-4289-aeb8-1e8ca93ebb0a_531x329.jpeg\" target=\"_blank\"><div class=\"image2-inset\"><source type=\"image/webp\" /><img alt=\"\" class=\"sizing-normal\" height=\"402.1111111111111\" src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6ad9dfc-5c55-4289-aeb8-1e8ca93ebb0a_531x329.jpeg\" title=\"\" width=\"649\" /><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg class=\"lucide lucide-refresh-cw\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg class=\"lucide lucide-maximize2\" fill=\"none\" height=\"20\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>It shows that whatever the cause of the excess mortality, it was closely correlated with reported COVID-19 deaths. Although you can almost imagine a doctor not being able to tell the difference between a COVID death in the ICU and a respirator-injury death in the ICU, they could probably tell the difference between a COVID death in the ICU and a bullet through the brain in a young person who probably didn&#8217;t even have a positive COVID test.</p><p>(also, suicides didn&#8217;t rise during the strictest part of lockdown, and may even have paradoxically fallen. I agree this is mysterious, but it&#8217;s only one of the many mysteries of suicides, which often fall during bad weather or social disasters - see my article <a href=\"https://worksinprogress.co/issue/why-didnt-suicides-rise-during-covid/\">here</a>. Drug overdoses rose, but by a tiny fraction of the COVID death toll.)</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://www.astralcodexten.com/feed#footnote-anchor-3\" id=\"footnote-3\" target=\"_self\">3</a><div class=\"footnote-content\"><p>Other categories containing ~1/300 Americans: police officers, Jehovah&#8217;s Witnesses, doctors, prisoners, Rhode Islanders. I like these less because they&#8217;re class- and location- stratified, so your chance of knowing them goes up or down a lot depending on your own characteristics.</p></div></div><div class=\"footnote\"><a class=\"footnote-number\" contenteditable=\"false\" href=\"https://www.astralcodexten.com/feed#footnote-anchor-4\" id=\"footnote-4\" target=\"_self\">4</a><div class=\"footnote-content\"><p>More formally: if there&#8217;s a group containing 1/300 people, you need to have 208 acquaintances before you have a 50-50 chance of having one acquaintance in the group. This isn&#8217;t quite the right number, because COVID deaths were concentrated among elderly people, and your acquaintances might not be elderly, but I&#8217;m not sure how to apply the correction for the mix of elderly and non-elderly people that most people know.</p><p></p></div></div>"
            ],
            "link": "https://www.astralcodexten.com/p/the-evidence-that-a-million-americans",
            "publishedAt": "2025-05-22",
            "source": "SlateStarCodex",
            "summary": "<p><strong>I.</strong></p><p>Many commenters responded to <a href=\"https://www.astralcodexten.com/p/the-other-covid-reckoning\">yesterday&#8217;s post</a> by challenging the claim that 1.2 million Americans died of COVID:</p><blockquote><p>I'm still not convinced that number can be directly linked to Covid. Yes, I'm talking about the old clich&#233; \"died with Covid\" instead of \"died of Covid\". Shouldn't we talk about excess deaths only?</p></blockquote><blockquote><p>Nobody talks about \"1.2 million COVID deaths\" because the medical establishment played obvious and ridiculous games with the way it counted \"COVID deaths.\" Any patient with a positive PSR was required to be reported as such, even patients who were in vehicular accidents or suffering from late-stage cancer. This has been known since the beginning.</p></blockquote><blockquote><p>I'm sure some people did die from covid, but given how much we now know the statistics were faked, it seems to me most of these covid cases were other conditions that got labeled as it for variety of reasons, or died from the ventilators that were incorrectly prescribed in the early stage of the pandemic.</p></blockquote><blockquote><p>As many of the comments note, the attribution of 1.2M deaths to COVID is as questionable as the zoonotic origin story, the value of the vaccines to healthy young people, and the rest of the COVID rhetoric. Some, like Scott Alexander,",
            "title": "The Evidence That A Million Americans Died Of COVID"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-05-22"
}