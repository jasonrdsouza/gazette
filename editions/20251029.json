{
    "articles": [
        {
            "content": [
                "<div class=\"trix-content\">\n  <div>The only way many tech workers in the US can get a long break is by quitting their job. So lots of them do that every few years, which is partly why the average tenure in our industry is at an atrocious 18 months. But this terrible rate of churn is often avoidable by one simple benefit trick: Sabbaticals.</div><div><br />We've been giving everyone at 37signals <a href=\"https://basecamp.com/handbook/benefits-and-perks#sabbatical\">a six-week sabbatical every three years</a> for the last fifteen years or so. It's been magical for retention because a break like that allows the mind to reset in a way a two-week vacation never could. And when employees yearn for such a reset, the typical option is usually just to quit.</div><div><br />I know the idea of a six-week sabbatical might sound strange to many Europeans who'd be forgiven for thinking \"isn't that just August\"? And they're not exactly wrong. Europeans usually do enjoy more vacation time, but in the tech industry, that also comes with much lower pay. Easily half to two-thirds less.<br /><br /></div><div>I think it's entirely possible to have it both ways: Work for an American tech company with American pay levels, but also enjoy a regular full reset, without having to quit to get it.&nbsp;<br /><br /></div><div>And the argument for the boss doesn't even have to be some humanistic plea about long-term happiness. It can simply be about retention: it's very expensive to see smart, trained people walk out the door.</div><div><br />I'd even argue that bosses \u2014 be they founders or professional executives \u2014 benefit just as much from a regular sabbatical like anyone else. Whenever Jason or I have taken one, we've always come back with fresh ideas and perspectives that invariably lead to positive changes or new ambitions that wouldn't have come otherwise.<br /><br /></div><div>Six weeks is also just long enough to remind tired founders that selling their company isn't likely to be the bliss they imagine. That <a href=\"https://signalvnoise.com/posts/1930-mojito-island-is-a-mirage\">mojito island</a> gets boring quickly. That by week five, they're probably already antsy to get back to the action. There are endless stories of founders who regret selling their business when all they needed was a six-week break from the startup sprint.<br /><br /></div><div>Bottom line is that we all need a long break every now and then. Not just two weeks on Mallorca, but time enough to get bored. To get hungry for the intellectual stimulation of work and the social connection of colleagues. The sabbatical is a great way to deliver that and keep founders from wanting to sell and employees from wanting to quit.</div>\n</div>"
            ],
            "link": "https://world.hey.com/dhh/sabbaticals-keep-our-attrition-at-bay-9ccba5c0",
            "publishedAt": "2025-10-29",
            "source": "DHH",
            "summary": "<div class=\"trix-content\"> <div>The only way many tech workers in the US can get a long break is by quitting their job. So lots of them do that every few years, which is partly why the average tenure in our industry is at an atrocious 18 months. But this terrible rate of churn is often avoidable by one simple benefit trick: Sabbaticals.</div><div><br />We've been giving everyone at 37signals <a href=\"https://basecamp.com/handbook/benefits-and-perks#sabbatical\">a six-week sabbatical every three years</a> for the last fifteen years or so. It's been magical for retention because a break like that allows the mind to reset in a way a two-week vacation never could. And when employees yearn for such a reset, the typical option is usually just to quit.</div><div><br />I know the idea of a six-week sabbatical might sound strange to many Europeans who'd be forgiven for thinking \"isn't that just August\"? And they're not exactly wrong. Europeans usually do enjoy more vacation time, but in the tech industry, that also comes with much lower pay. Easily half to two-thirds less.<br /><br /></div><div>I think it's entirely possible to have it both ways: Work for an American tech company with American pay levels, but also enjoy a regular full reset,",
            "title": "Sabbaticals keep our attrition at bay"
        },
        {
            "content": [
                "<div id=\"blog\"><div id=\"content\">\n  <div id=\"content\">\n\n    <div class=\"Article\">\n    \n    <h1 class=\"small\"><a href=\"https://go.dev/blog/\">The Go Blog</a></h1>\n    \n\n    <h1>The Green Tea Garbage Collector</h1>\n      \n      <p class=\"author\">\n      Michael Knyszek and Austin Clements<br />\n      29 October 2025\n      </p>\n      \n      <div class=\"markdown\">\n\n<p>Go 1.25 includes a new experimental garbage collector called Green Tea,\navailable by setting <code>GOEXPERIMENT=greenteagc</code> at build time.\nMany workloads spend around 10% less time in the garbage collector, but some\nworkloads see a reduction of up to 40%!</p>\n<p>It&rsquo;s production-ready and already in use at Google, so we encourage you to\ntry it out.\nWe know some workloads don&rsquo;t benefit as much, or even at all, so your feedback\nis crucial to helping us move forward.\nBased on the data we have now, we plan to make it the default in Go 1.26.</p>\n<p>To report back with any problems, <a href=\"https://go.dev/issue/new\">file a new issue</a>.</p>\n<p>To report back with any successes, reply to <a href=\"https://go.dev/issue/73581\">the existing Green Tea issue</a>.</p>\n<p>What follows is a blog post based on Michael Knyszek&rsquo;s GopherCon 2025 talk.\nWe&rsquo;ll update this blog post with a link to the talk once it&rsquo;s available online.</p>\n<h2 id=\"tracing-garbage-collection\">Tracing garbage collection</h2>\n<p>Before we discuss Green Tea let&rsquo;s get us all on the same page about garbage\ncollection.</p>\n<h3 id=\"objects-and-pointers\">Objects and pointers</h3>\n<p>The purpose of garbage collection is to automatically reclaim and reuse memory\nno longer used by the program.</p>\n<p>To this end, the Go garbage collector concerns itself with <em>objects</em> and\n<em>pointers</em>.</p>\n<p>In the context of the Go runtime, <em>objects</em> are Go values whose underlying\nmemory is allocated from the heap.\nHeap objects are created when the Go compiler can&rsquo;t figure out how else to allocate\nmemory for a value.\nFor example, the following code snippet allocates a single heap object: the backing\nstore for a slice of pointers.</p>\n<pre><code>var x = make([]*int, 10) // global\n</code></pre>\n<p>The Go compiler can&rsquo;t allocate the slice backing store anywhere except the heap,\nsince it&rsquo;s very hard, and maybe even impossible, for it to know how long <code>x</code> will\nrefer to the object for.</p>\n<p><em>Pointers</em> are just numbers that indicate the location of a Go value in memory,\nand they&rsquo;re how a Go program references objects.\nFor example, to get the pointer to the beginning of the object allocated in the\nlast code snippet, we can write:</p>\n<pre><code>&amp;x[0] // 0xc000104000\n</code></pre>\n<h3 id=\"the-mark-sweep-algorithm\">The mark-sweep algorithm</h3>\n<p>Go&rsquo;s garbage collector follows a strategy broadly referred to as <em>tracing garbage\ncollection</em>, which just means that the garbage collector follows, or traces, the\npointers in the program to identify which objects the program is still using.</p>\n<p>More specifically, the Go garbage collector implements the mark-sweep algorithm.\nThis is much simpler than it sounds.\nImagine objects and pointers as a sort of graph, in the computer science sense.\nObjects are nodes, pointers are edges.</p>\n<p>The mark-sweep algorithm operates on this graph, and as the name might suggest,\nproceeds in two phases.</p>\n<p>In the first phase, the mark phase, it walks the object graph from well-defined\nsource edges called <em>roots</em>.\nThink global and local variables.\nThen, it <em>marks</em> everything it finds along the way as <em>visited</em>, to avoid going in\ncircles.\nThis is analogous to your typical graph flood algorithm, like a depth-first or\nbreadth-first search.</p>\n<p>Next is the sweep phase.\nWhatever objects were not visited in our graph walk are unused, or <em>unreachable</em>,\nby the program.\nWe call this state unreachable because it is impossible with normal safe Go code\nto access that memory anymore, simply through the semantics of the language.\nTo complete the sweep phase, the algorithm simply iterates through all the\nunvisited nodes and marks their memory as free, so the memory allocator can reuse\nit.</p>\n<h3 id=\"thats-it\">That&rsquo;s it?</h3>\n<p>You may think I&rsquo;m oversimplifying a bit here.\nGarbage collectors are frequently referred to as <em>magic</em>, and <em>black boxes</em>.\nAnd you&rsquo;d be partially right, there are more complexities.</p>\n<p>For example, this algorithm is, in practice, executed concurrently with your\nregular Go code.\nWalking a graph that&rsquo;s mutating underneath you brings challenges.\nWe also parallelize this algorithm, which is a detail that&rsquo;ll come up again\nlater.</p>\n<p>But trust me when I tell you that these details are mostly separate from the\ncore algorithm.\nIt really is just a simple graph flood at the center.</p>\n<h3 id=\"graph-flood-example\">Graph flood example</h3>\n<p>Let&rsquo;s walk through an example.\nNavigate through the slideshow below to follow along.</p>\n<noscript>\n<i>Scroll horizontally through the slideshow!</i>\n<br />\n<br />\nConsider viewing with JavaScript enabled, which will add \"Previous\" and \"Next\"\nbuttons.\nThis will let you click through the slideshow without the scrolling motion,\nwhich will better highlight differences between the diagrams.\n<br />\n<br />\n</noscript>\n<div class=\"centered\">\n<button class=\"scroll-button scroll-button-left\" disabled=\"disabled\" hidden=\"hidden\" id=\"marksweep-prev\" type=\"button\">\u2190 Prev</button>\n<button class=\"scroll-button scroll-button-right\" hidden=\"hidden\" id=\"marksweep-next\" type=\"button\">Next \u2192</button>\n<div class=\"carousel\" id=\"marksweep\">\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-007.png\" />\n        <figcaption>\n        Here we have a diagram of some global variables and Go heap.\n        Let's break it down, piece by piece.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-008.png\" />\n        <figcaption>\n        On the left here we have our roots.\n        These are global variables x and y.\n        They will be the starting point of our graph walk.\n        Since they're marked blue, according to our handy legend in the bottom left, they're currently on our work list.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-009.png\" />\n        <figcaption>\n        On the right side, we have our heap.\n        Currently, everything in our heap is grayed out because we haven't visited any of it yet.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-010.png\" />\n        <figcaption>\n        Each one of these rectangles represents an object.\n        Each object is labeled with its type.\n        This object in particular is an object of type T, whose type definition is on the top left.\n        It's got a pointer to an array of children, and some value.\n        We can surmise that this is some kind of recursive tree data structure.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-011.png\" />\n        <figcaption>\n        In addition to the objects of type T, you'll also notice that we have array objects containing *Ts.\n        These are pointed to by the \"children\" field of objects of type T.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-012.png\" />\n        <figcaption>\n        Each square inside of the rectangle represents 8 bytes of memory.\n        A square with a dot is a pointer.\n        If it has an arrow, it is a non-nil pointer pointing to some other object.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-013.png\" />\n        <figcaption>\n        And if it doesn't have a corresponding arrow, then it's a nil pointer.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-014.png\" />\n        <figcaption>\n        Next, these dotted rectangles represents free space, what I'll call a free \"slot.\" We could put an object there, but there currently isn't one.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-015.png\" />\n        <figcaption>\n        You'll also notice that objects are grouped together by these labeled, dotted rounded rectangles.\n        Each of these represents a page: a contiguous block of memory.\n        These pages are labeled A, B, C, and D, and I'll refer to them that way.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-015.png\" />\n        <figcaption>\n        In this diagram, each object is allocated as part of some page.\n        Like in the real implementation, each page here only contains objects of a certain size.\n        This is just how the Go heap is organized.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-016.png\" />\n        <figcaption>\n        Pages are also how we organize per-object metadata.\n        Here you can see seven boxes, each corresponding to one of the seven object slots in page A.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-016.png\" />\n        <figcaption>\n        Each box represents one bit of information: whether or not we have seen the object before.\n        This is actually how the real runtime manages whether an object has been visited, and it'll be an important detail later.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-017.png\" />\n        <figcaption>\n        That was a lot of detail, so thanks for reading along.\n        This will all come into play later.\n        For now, let's just see how our graph flood applies to this picture.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-018.png\" />\n        <figcaption>\n        We start by taking a root off of the work list.\n        We mark it red to indicate that it's now active.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-019.png\" />\n        <figcaption>\n        Following that root's pointer, we find an object of type T, which we add to our work list.\n        Following our legend, we draw the object in blue to indicate that it's on our work list.\n        Note also that we set the seen bit corresponding to this object in our metadata.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-020.png\" />\n        <figcaption>\n        Same goes for the next root.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-021.png\" />\n        <figcaption>\n        Now that we've taken care of all the roots, we're left with two objects on our work list.\n        Let's take an object off the work list.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-022.png\" />\n        <figcaption>\n        What we're going to do now is walk the pointers of the objects, to find more objects.\n        By the way, we call walking the pointers of an object \"scanning\" the object.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-023.png\" />\n        <figcaption>\n        We find this valid array object\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-024.png\" />\n        <figcaption>\n        \u2026 and add it to our work list.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-025.png\" />\n        <figcaption>\n        From here, we proceed recursively.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-026.png\" />\n        <figcaption>\n        We walk the array's pointers.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-027.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-028.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-029.png\" />\n        <figcaption>\n        Find some more objects\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-030.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-031.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-032.png\" />\n        <figcaption>\n        Then we walk the objects that the array object referred to!\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-033.png\" />\n        <figcaption>\n        And note that we still have to walk over all pointers, even if they're nil.\n        We don't know ahead of time if they will be.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-034.png\" />\n        <figcaption>\n        One more object down this branch\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-035.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-036.png\" />\n        <figcaption>\n        And now we've reached the other branch, starting from that object in page A we found much earlier from one of the roots.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-036.png\" />\n        <figcaption>\n        You may be noticing a last-in-first-out discipline for our work list here, indicating that our work list is a stack, and hence our graph flood is approximately depth-first.\n        This is intentional, and reflects the actual graph flood algorithm in the Go runtime.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-037.png\" />\n        <figcaption>\n        Let's keep going\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-038.png\" />\n        <figcaption>\n        Next we find another array object\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-039.png\" />\n        <figcaption>\n        And walk it\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-040.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-041.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-042.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-043.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-044.png\" />\n        <figcaption>\n        Just one more object left on our work list\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-045.png\" />\n        <figcaption>\n        Let's scan it\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-046.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-047.png\" />\n        <figcaption>\n        And we're done with the mark phase! There's nothing we're actively working on and there's nothing left on our work list.\n        Every object drawn in black is reachable, and every object drawn in gray is unreachable.\n        Let's sweep the unreachable objects, all in one go.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/marksweep-048.png\" />\n        <figcaption>\n        We've converted those objects into free slots, ready to hold new objects.\n        </figcaption>\n    </figure>\n</div>\n</div>\n<h2 id=\"the-problem\">The problem</h2>\n<p>After all that, I think we have a handle on what the Go garbage collector is actually doing.\nThis process seems to work well enough today, so what&rsquo;s the problem?</p>\n<p>Well, it turns out we can spend <em>a lot</em> of time executing this particular algorithm in some\nprograms, and it adds substantial overhead to nearly every Go program.\nIt&rsquo;s not that uncommon to see Go programs spending 20% or more of their CPU time in the\ngarbage collector.</p>\n<p>Let&rsquo;s break down where that time is being spent.</p>\n<h3 id=\"garbage-collection-costs\">Garbage collection costs</h3>\n<p>At a high level, there are two parts to the cost of the garbage collector.\nThe first is how often it runs, and the second is how much work it does each time it runs.\nMultiply those two together, and you get the total cost of the garbage collector.</p>\n<figure class=\"captioned\">\n    <figcaption>\n    Total GC cost = Number of GC cycles &times; Average cost per GC cycle\n    </figcaption>\n</figure>\n<p>Over the years we&rsquo;ve tackled both terms in this equation, and for more on <em>how often</em> the garbage\ncollector runs, see <a href=\"https://www.youtube.com/watch?v=07wduWyWx8M\" rel=\"noreferrer\" target=\"_blank\">Michael&rsquo;s GopherCon EU talk from 2022</a>\nabout memory limits.\n<a href=\"https://go.dev/doc/gc-guide\">The guide to the Go garbage collector</a> also has a lot to say about this topic,\nand is worth a look if you want to dive deeper.</p>\n<p>But for now let&rsquo;s focus only on the second part, the cost per cycle.</p>\n<p>From years of poring over CPU profiles to try to improve performance, we know two big things\nabout Go&rsquo;s garbage collector.</p>\n<p>The first is that about 90% of the cost of the garbage collector is spent marking,\nand only about 10% is sweeping.\nSweeping turns out to be much easier to optimize than marking,\nand Go has had a very efficient sweeper for many years.</p>\n<p>The second is that, of that time spent marking, a substantial portion, usually at least 35%, is\nsimply spent <em>stalled</em> on accessing heap memory.\nThis is bad enough on its own, but it completely gums up the works on what makes modern CPUs\nactually fast.</p>\n<h3 id=\"a-microarchitectural-disaster\">&ldquo;A microarchitectural disaster&rdquo;</h3>\n<p>What does &ldquo;gum up the works&rdquo; mean in this context?\nThe specifics of modern CPUs can get pretty complicated, so let&rsquo;s use an analogy.</p>\n<p>Imagine the CPU driving down a road, where that road is your program.\nThe CPU wants to ramp up to a high speed, and to do that it needs to be able to see far ahead of it,\nand the way needs to be clear.\nBut the graph flood algorithm is like driving through city streets for the CPU.\nThe CPU can&rsquo;t see around corners and it can&rsquo;t predict what&rsquo;s going to happen next.\nTo make progress, it constantly has to slow down to make turns, stop at traffic lights, and avoid\npedestrians.\nIt hardly matters how fast your engine is because you never get a chance to get going.</p>\n<p>Let&rsquo;s make that more concrete by looking at our example again.\nI&rsquo;ve overlaid the heap here with the path that we took.\nEach left-to-right arrow represents a piece of scanning work that we did\nand the dashed arrows show how we jumped around between bits of scanning work.</p>\n<figure class=\"captioned\">\n    <img src=\"https://go.dev/blog/greenteagc/graphflood-path.png\" />\n    <figcaption>\n    The path through the heap the garbage collector took in our graph flood example.\n    </figcaption>\n</figure>\n<p>Notice that we were jumping all over memory doing tiny bits of work in each place.\nIn particular, we&rsquo;re frequently jumping between pages, and between different parts of pages.</p>\n<p>Modern CPUs do a lot of caching.\nGoing to main memory can be up to 100x slower than accessing memory that&rsquo;s in our cache.\nCPU caches are populated with memory that&rsquo;s been recently accessed, and memory that&rsquo;s nearby to\nrecently accessed memory.\nBut there&rsquo;s no guarantee that any two objects that point to each other will <em>also</em> be close to each\nother in memory.\nThe graph flood doesn&rsquo;t take this into account.</p>\n<p>Quick side note: if we were just stalling fetches to main memory, it might not be so bad.\nCPUs issue memory requests asynchronously, so even slow ones could overlap if the CPU could see\nfar enough ahead.\nBut in the graph flood, every bit of work is small, unpredictable, and highly dependent on the\nlast, so the CPU is forced to wait on nearly every individual memory fetch.</p>\n<p>And unfortunately for us, this problem is only getting worse.\nThere&rsquo;s an adage in the industry of &ldquo;wait two years and your code will get faster.&rdquo;</p>\n<p>But Go, as a garbage collected language that relies on the mark-sweep algorithm, risks the opposite.\n&ldquo;Wait two years and your code will get slower.&rdquo;\nThe trends in modern CPU hardware are creating new challenges for garbage collector performance:</p>\n<p><strong>Non-uniform memory access.</strong>\nFor one, memory now tends to be associated with subsets of CPU cores.\nAccesses by <em>other</em> CPU cores to that memory are slower than before.\nIn other words, the cost of a main memory access <a href=\"https://jprahman.substack.com/p/sapphire-rapids-core-to-core-latency\" rel=\"noreferrer\" target=\"_blank\">depends on which CPU core is accessing\nit</a>.\nIt&rsquo;s non-uniform, so we call this non-uniform memory access, or NUMA for short.</p>\n<p><strong>Reduced memory bandwidth.</strong>\nAvailable memory bandwidth per CPU is trending downward over time.\nThis just means that while we have more CPU cores, each core can submit relatively fewer\nrequests to main memory, forcing non-cached requests to wait longer than before.</p>\n<p><strong>Ever more CPU cores.</strong>\nAbove, we looked at a sequential marking algorithm, but the real garbage collector performs this\nalgorithm in parallel.\nThis scales well to a limited number of CPU cores, but the shared queue of objects to scan becomes\na bottleneck, even with careful design.</p>\n<p><strong>Modern hardware features.</strong>\nNew hardware has fancy features like vector instructions, which let us operate on a lot of data at once.\nWhile this has the potential for big speedups, it&rsquo;s not immediately clear how to make that work for\nmarking because marking does so much irregular and often small pieces of work.</p>\n<h2 id=\"green-tea\">Green Tea</h2>\n<p>Finally, this brings us to Green Tea, our new approach to the mark-sweep algorithm.\nThe key idea behind Green Tea is astonishingly simple:</p>\n<p><em>Work with pages, not objects.</em></p>\n<p>Sounds trivial, right?\nAnd yet, it took a lot of work to figure out how to order the object graph walk and what we needed to\ntrack to make this work well in practice.</p>\n<p>More concretely, this means:</p>\n<ul>\n<li>Instead of scanning objects we scan whole pages.</li>\n<li>Instead of tracking objects on our work list, we track whole pages.</li>\n<li>We still need to mark objects at the end of the day, but we&rsquo;ll track marked objects locally to each\npage, rather than across the whole heap.</li>\n</ul>\n<h3 id=\"green-tea-example\">Green Tea example</h3>\n<p>Let&rsquo;s see what this means in practice by looking at our example heap again, but this time\nrunning Green Tea instead of the straightforward graph flood.</p>\n<p>As above, navigate through the annotated slideshow to follow along.</p>\n<noscript>\n<i>Scroll horizontally through the slideshow!</i>\n<br />\n<br />\nConsider viewing with JavaScript enabled, which will add \"Previous\" and \"Next\"\nbuttons.\nThis will let you click through the slideshow without the scrolling motion,\nwhich will better highlight differences between the diagrams.\n<br />\n<br />\n</noscript>\n<div class=\"centered\">\n<button class=\"scroll-button scroll-button-left\" disabled=\"disabled\" hidden=\"hidden\" id=\"greentea-prev\" type=\"button\">\u2190 Prev</button>\n<button class=\"scroll-button scroll-button-right\" hidden=\"hidden\" id=\"greentea-next\" type=\"button\">Next \u2192</button>\n<div class=\"carousel\" id=\"greentea\">\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-060.png\" />\n        <figcaption>\n        This is the same heap as before, but now with two bits of metadata per object rather than one.\n        Again, each bit, or box, corresponds to one of the object slots in the page.\n        In total, we now have fourteen bits that correspond to the seven slots in page A.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-060.png\" />\n        <figcaption>\n        The top bits represent the same thing as before: whether or not we've seen a pointer to the object.\n        I'll call these the \"seen\" bits.\n        The bottom set of bits are new.\n        These \"scanned\" bits track whether or not we've <i>scanned</i> the object.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-060.png\" />\n        <figcaption>\n        This new piece of metadata is necessary because, in Green tea, <b>the work list tracks pages,\n        not objects</b>.\n        We still need to track objects at some level, and that's the purpose of these bits.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-062.png\" />\n        <figcaption>\n        We start off the same as before, walking objects from the roots.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-063.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-064.png\" />\n        <figcaption>\n        But this time, instead of putting an object on the work list,\n        we put a whole page\u2013in this case page A\u2013on the work list,\n        indicated by shading the whole page blue.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-066.png\" />\n        <figcaption>\n        The object we found is also blue to indicate that when we do take this page off of the work list, we will need to look at that object.\n        Note that the object's blue hue directly reflects the metadata in page A.\n        Its corresponding seen bit is set, but its scanned bit is not.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-069.png\" />\n        <figcaption>\n        We follow the next root, find another object, and again put the whole page\u2013page C\u2013on the work list and set the object's seen bit.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-071.png\" />\n        <figcaption>\n        We're done following roots, so we turn to the work list and take page A off the work list.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-072.png\" />\n        <figcaption>\n        Using the seen and scanned bits, we can tell there's one object to scan on page A.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-074.png\" />\n        <figcaption>\n        We scan that object, following its pointers.\n        And as a result, we add page B to the work list, since the first object in page A points to an object in page B.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-075.png\" />\n        <figcaption>\n        We're done with page A.\n        Next we take page C off the work list.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-076.png\" />\n        <figcaption>\n        Similar to page A, there's a single object on page C to scan.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-078.png\" />\n        <figcaption>\n        We found a pointer to another object in page B.\n        Page B is already on the work list, so we don't need to add anything to the work list.\n        We simply have to set the seen bit for the target object.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-079.png\" />\n        <figcaption>\n        Now it's page B's turn.\n        We've accumulated two objects to scan on page B,\n        and we can process both of these objects in a row, in memory order!\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-081.png\" />\n        <figcaption>\n        We walk the pointers of the first object\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-082.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-083.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-084.png\" />\n        <figcaption>\n        We find a pointer to an object in page A.\n        Page A was previously on the work list, but isn't at this point, so we put it back on the work list.\n        Unlike the original mark-sweep algorithm, where any given object is only added to the work list at\n        most once per whole mark phase, in Green Tea, a given page can reappear on the work list several times\n        during a mark phase.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-085.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-086.png\" />\n        <figcaption>\n        We scan the second seen object in the page immediately after the first.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-087.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-088.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-089.png\" />\n        <figcaption>\n        We find a few more objects in page A\u2026\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-090.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-091.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-092.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-093.png\" />\n        <figcaption>\n        We're done scanning page B, so we pull page A off the work list.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-094.png\" />\n        <figcaption>\n        This time we only need to scan three objects, not four,\n        since we already scanned the first object.\n        We know which objects to scan by looking at the difference between the \"seen\" and \"scanned\" bits.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-095.png\" />\n        <figcaption>\n        We'll scan these objects in sequence.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-096.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-097.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-098.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-099.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-100.png\" />\n        <figcaption>\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-101.png\" />\n        <figcaption>\n        We're done! There are no more pages on the work list and there's nothing we're actively looking at.\n        Notice that the metadata now all lines up nicely, since all reachable objects were both seen and scanned.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-101.png\" />\n        <figcaption>\n        You may have also noticed during our traversal that the work list order is a little different from the graph flood.\n        Where the graph flood had a last-in-first-out, or stack-like, order, here we're using a first-in-first-out, or queue-like, order for the pages on our work list.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-101.png\" />\n        <figcaption>\n        This is intentional.\n        We let seen objects accumulate on each page while the page sits on the queue, so we can process as many as we can at once.\n        That's how we were able to hit so many objects on page A at once.\n        Sometimes laziness is a virtue.\n        </figcaption>\n    </figure>\n    <figure class=\"carouselitem\">\n        <img src=\"https://go.dev/blog/greenteagc/greentea-102.png\" />\n        <figcaption>\n        And finally we can sweep away the unvisited objects, as before.\n        </figcaption>\n    </figure>\n</div>\n</div>\n<h3 id=\"getting-on-the-highway\">Getting on the highway</h3>\n<p>Let&rsquo;s come back around to our driving analogy.\nAre we finally getting on the highway?</p>\n<p>Let&rsquo;s recall our graph flood picture before.</p>\n<figure class=\"captioned\">\n    <img src=\"https://go.dev/blog/greenteagc/graphflood-path2.png\" />\n    <figcaption>\n    The path the original graph flood took through the heap required 7 separate scans.\n    </figcaption>\n</figure>\n<p>We jumped around a whole lot, doing little bits of work in different places.\nThe path taken by Green Tea looks very different.</p>\n<figure class=\"captioned\">\n    <img src=\"https://go.dev/blog/greenteagc/greentea-path.png\" />\n    <figcaption>\n    The path taken by Green Tea requires only 4 scans.\n    </figcaption>\n</figure>\n<p>Green Tea, in contrast, makes fewer, longer left-to-right passes over pages A and B.\nThe longer these arrows, the better, and with bigger heaps, this effect can be much stronger.\n<em>That&rsquo;s</em> the magic of Green Tea.</p>\n<p>It&rsquo;s also our opportunity to ride the highway.</p>\n<p>This all adds up to a better fit with the microarchitecture.\nWe can now scan objects closer together with much higher probability, so\nthere&rsquo;s a better chance we can make use of our caches and avoid main memory.\nLikewise, per-page metadata is more likely to be in cache.\nTracking pages instead of objects means work lists are smaller,\nand less pressure on work lists means less contention and fewer CPU stalls.</p>\n<p>And speaking of the highway, we can take our metaphorical engine into gears we&rsquo;ve never been able to\nbefore, since now we can use vector hardware!</p>\n<h3 id=\"vector-acceleration\">Vector acceleration</h3>\n<p>If you&rsquo;re only vaguely familiar with vector hardware, you might be confused as to how we can use it here.\nBut besides the usual arithmetic and trigonometric operations,\nrecent vector hardware supports two things that are valuable for Green Tea:\nvery wide registers, and sophisticated bit-wise operations.</p>\n<p>Most modern x86 CPUs support AVX-512, which has 512-bit wide vector registers.\nThis is wide enough to hold all of the metadata for an entire page in just two registers,\nright on the CPU, enabling Green Tea to work on an entire page in just a few straight-line\ninstructions.\nVector hardware has long supported basic bit-wise operations on whole vector registers, but starting\nwith AMD Zen 4 and Intel Ice Lake, it also supports a new bit vector &ldquo;Swiss army knife&rdquo; instruction\nthat enables a key step of the Green Tea scanning process to be done in just a few CPU cycles.\nTogether, these allow us to turbo-charge the Green Tea scan loop.</p>\n<p>This wasn&rsquo;t even an option for the graph flood, where we&rsquo;d be jumping between scanning objects that\nare all sorts of different sizes.\nSometimes you needed two bits of metadata and sometimes you needed ten thousand.\nThere simply wasn&rsquo;t enough predictability or regularity to use vector hardware.</p>\n<p>If you want to nerd out on some of the details, read along!\nOtherwise, feel free to skip ahead to the <a href=\"https://go.dev/blog/feed.atom#evaluation\">evaluation</a>.</p>\n<h4 id=\"avx-512-scanning-kernel\">AVX-512 scanning kernel</h4>\n<p>To get a sense of what AVX-512 GC scanning looks like, take a look at the diagram below.</p>\n<figure class=\"captioned\">\n    <img src=\"https://go.dev/blog/greenteagc/avx512.svg\" />\n    <figcaption>\n    The AVX-512 vector kernel for scanning.\n    </figcaption>\n</figure>\n<p>There&rsquo;s a lot going on here and we could probably fill an entire blog post just on how this works.\nFor now, let&rsquo;s just break it down at a high level:</p>\n<ol>\n<li>\n<p>First we fetch the &ldquo;seen&rdquo; and &ldquo;scanned&rdquo; bits for a page.\nRecall, these are one bit per object in the page, and all objects in a page have the same size.</p>\n</li>\n<li>\n<p>Next, we compare the two bit sets.\nTheir union becomes the new &ldquo;scanned&rdquo; bits, while their difference is the &ldquo;active objects&rdquo; bitmap,\nwhich tells us which objects we need to scan in this pass over the page (versus previous passes).</p>\n</li>\n<li>\n<p>We take the difference of the bitmaps and &ldquo;expand&rdquo; it, so that instead of one bit per object,\nwe have one bit per word (8 bytes) of the page.\nWe call this the &ldquo;active words&rdquo; bitmap.\nFor example, if the page stores 6-word (48-byte) objects, each bit in the active objects bitmap\nwill be copied to 6 bits in the active words bitmap.\nLike so:</p>\n</li>\n</ol>\n<figure class=\"captioned\">\n    <div class=\"row\"><pre>0 0 1 1 ...</pre> &rarr; <pre>000000 000000 111111 111111 ...</pre></div>\n</figure>\n<ol start=\"4\">\n<li>\n<p>Next we fetch the pointer/scalar bitmap for the page.\nHere, too, each bit corresponds to a word (8 bytes) of the page, and it tells us whether that word\nstores a pointer.\nThis data is managed by the memory allocator.</p>\n</li>\n<li>\n<p>Now, we take the intersection of the pointer/scalar bitmap and the active words bitmap.\nThe result is the &ldquo;active pointer bitmap&rdquo;: a bitmap that tells us the location of every\npointer in the entire page contained in any live object we haven&rsquo;t scanned yet.</p>\n</li>\n<li>\n<p>Finally, we can iterate over the memory of the page and collect all the pointers.\nLogically, we iterate over each set bit in the active pointer bitmap,\nload the pointer value at that word, and write it back to a buffer that\nwill later be used to mark objects seen and add pages to the work list.\nUsing vector instructions, we&rsquo;re able to do this 64 bytes at a time,\nin just a couple instructions.</p>\n</li>\n</ol>\n<p>Part of what makes this fast is the <code>VGF2P8AFFINEQB</code> instruction,\npart of the &ldquo;Galios Field New Instructions&rdquo; x86 extension,\nand the bit manipulation Swiss army knife we referred to above.\nIt&rsquo;s the real star of the show, since it lets us do step (3) in the scanning kernel very, very\nefficiently.\nIt performs a bit-wise <a href=\"https://en.wikipedia.org/wiki/Affine_transformation\" rel=\"noreferrer\" target=\"_blank\">affine\ntransformations</a>,\ntreating each byte in a vector as itself a mathematical vector of 8 bits\nand multiplying it by an 8x8 bit matrix.\nThis is all done over the <a href=\"https://en.wikipedia.org/wiki/Finite_field\" rel=\"noreferrer\" target=\"_blank\">Galois field</a> <code>GF(2)</code>,\nwhich just means multiplication is AND and addition is XOR.\nThe upshot of this is that we can define a few 8x8 bit matrices for each\nobject size that perform exactly the 1:n bit expansion we need.</p>\n<p>For the full assembly code, see <a href=\"https://cs.opensource.google/go/go/+/master:src/internal/runtime/gc/scan/scan_amd64.s;l=23;drc=041f564b3e6fa3f4af13a01b94db14c1ee8a42e0\" rel=\"noreferrer\" target=\"_blank\">this\nfile</a>.\nThe &ldquo;expanders&rdquo; use different matrices and different permutations for each size class,\nso they&rsquo;re in a <a href=\"https://cs.opensource.google/go/go/+/master:src/internal/runtime/gc/scan/expand_amd64.s;drc=041f564b3e6fa3f4af13a01b94db14c1ee8a42e0\" rel=\"noreferrer\" target=\"_blank\">separate file</a>\nthat&rsquo;s written by a <a href=\"https://cs.opensource.google/go/go/+/master:src/internal/runtime/gc/scan/mkasm.go;drc=041f564b3e6fa3f4af13a01b94db14c1ee8a42e0\" rel=\"noreferrer\" target=\"_blank\">code generator</a>.\nAside from the expansion functions, it&rsquo;s really not a lot of code.\nMost of it is dramatically simplified by the fact that we can perform most of the above\noperations on data that sits purely in registers.\nAnd, hopefully soon this assembly code <a href=\"https://go.dev/issue/73787\">will be replaced with Go code</a>!</p>\n<p>Credit to Austin Clements for devising this process.\nIt&rsquo;s incredibly cool, and incredibly fast!</p>\n<h3 id=\"evaluation\">Evaluation</h3>\n<p>So that&rsquo;s it for how it works.\nHow much does it actually help?</p>\n<p>It can be quite a lot.\nEven without the vector enhancements, we see reductions in garbage collection CPU costs\nbetween 10% and 40% in our benchmark suite.\nFor example, if an application spends 10% of its time in the garbage collector, then that\nwould translate to between a 1% and 4% overall CPU reduction, depending on the specifics of\nthe workload.\nA 10% reduction in garbage collection CPU time is roughly the modal improvement.\n(See the <a href=\"https://go.dev/issue/73581\">GitHub issue</a> for some of these details.)</p>\n<p>We&rsquo;ve rolled Green Tea out inside Google, and we see similar results at scale.</p>\n<p>We&rsquo;re still rolling out the vector enhancements,\nbut benchmarks and early results suggest this will net an additional 10% GC CPU reduction.</p>\n<p>While most workloads benefit to some degree, there are some that don&rsquo;t.</p>\n<p>Green Tea is based on the hypothesis that we can accumulate enough objects to scan on a\nsingle page in one pass to counteract the costs of the accumulation process.\nThis is clearly the case if the heap has a very regular structure: objects of the same size at a\nsimilar depth in the object graph.\nBut there are some workloads that often require us to scan only a single object per page at a time.\nThis is potentially worse than the graph flood because we might be doing more work than before while\ntrying to accumulate objects on pages and failing.</p>\n<p>The implementation of Green Tea has a special case for pages that have only a single object to scan.\nThis helps reduce regressions, but doesn&rsquo;t completely eliminate them.</p>\n<p>However, it takes a lot less per-page accumulation to outperform the graph flood\nthan you might expect.\nOne surprise result of this work was that scanning a mere 2% of a page at a time\ncan yield improvements over the graph flood.</p>\n<h3 id=\"availability\">Availability</h3>\n<p>Green Tea is already available as an experiment in the recent Go 1.25 release and can be enabled\nby setting the environment variable <code>GOEXPERIMENT</code> to <code>greenteagc</code> at build time.\nThis doesn&rsquo;t include the aforementioned vector acceleration.</p>\n<p>We expect to make it the default garbage collector in Go 1.26, but you&rsquo;ll still be able to opt-out\nwith <code>GOEXPERIMENT=nogreenteagc</code> at build time.\nGo 1.26 will also add vector acceleration on newer x86 hardware, and include a whole bunch of\ntweaks and improvements based on feedback we&rsquo;ve collected so far.</p>\n<p>If you can, we encourage you to try at Go tip-of-tree!\nIf you prefer to use Go 1.25, we&rsquo;d still love your feedback.\nSee <a href=\"https://go.dev/issue/73581#issuecomment-2847696497\">this GitHub\ncomment</a> with some details on\nwhat diagnostics we&rsquo;d be interested in seeing, if you can share, and the preferred channels for\nreporting feedback.</p>\n<h2 id=\"the-journey\">The journey</h2>\n<p>Before we wrap up this blog post, let&rsquo;s take a moment to talk about the journey that got us here.\nThe human element of the technology.</p>\n<p>The core of Green Tea may seem like a single, simple idea.\nLike the spark of inspiration that just one single person had.</p>\n<p>But that&rsquo;s not true at all.\nGreen Tea is the result of work and ideas from many people over several years.\nSeveral people on the Go team contributed to the ideas, including Michael Pratt, Cherry Mui, David\nChase, and Keith Randall.\nMicroarchitectural insights from Yves Vandriessche, who was at Intel at the time, also really helped\ndirect the design exploration.\nThere were a lot of ideas that didn&rsquo;t work, and there were a lot of details that needed figuring out.\nJust to make this single, simple idea viable.</p>\n<figure class=\"captioned\">\n    <img src=\"https://go.dev/blog/greenteagc/timeline.png\" />\n    <figcaption>\n    A timeline depicting a subset of the ideas we tried in this vein before getting to\n    where we are today.\n    </figcaption>\n</figure>\n<p>The seeds of this idea go all the way back to 2018.\nWhat&rsquo;s funny is that everyone on the team thinks someone else thought of this initial idea.</p>\n<p>Green Tea got its name in 2024 when Austin worked out a prototype of an earlier version while cafe\ncrawling in Japan and drinking LOTS of matcha!\nThis prototype showed that the core idea of Green Tea was viable.\nAnd from there we were off to the races.</p>\n<p>Throughout 2025, as Michael implemented and productionized Green Tea, the ideas evolved and changed even\nfurther.</p>\n<p>This took so much collaborative exploration because Green Tea is not just an algorithm, but an entire\ndesign space.\nOne that we don&rsquo;t think any of us could&rsquo;ve navigated alone.\nIt&rsquo;s not enough to just have the idea, but you need to figure out the details and prove it.\nAnd now that we&rsquo;ve done it, we can finally iterate.</p>\n<p>The future of Green Tea is bright.</p>\n<p>Once again, please try it out by setting <code>GOEXPERIMENT=greenteagc</code> and let us know how it goes!\nWe&rsquo;re really excited about this work and want to hear from you!</p>\n\n</div>\n\n    </div>\n\n    \n    <div class=\"Article prevnext\">\n    \n    \n      \n        <p>\n        \n        \n          \n            <b>Previous article: </b><a href=\"https://go.dev/blog/flight-recorder\">Flight Recorder in Go 1.25</a><br />\n          \n        \n        <b><a href=\"https://go.dev/blog/all\">Blog Index</a></b>\n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n    </div>\n    \n\n  </div>\n</div>"
            ],
            "link": "https://go.dev/blog/greenteagc",
            "publishedAt": "2025-10-29",
            "source": "Go Blog",
            "summary": "<div id=\"blog\"><div id=\"content\"> <div id=\"content\"> <div class=\"Article\"> <h1 class=\"small\"><a href=\"https://go.dev/blog/\">The Go Blog</a></h1> <h1>The Green Tea Garbage Collector</h1> <p class=\"author\"> Michael Knyszek and Austin Clements<br /> 29 October 2025 </p> <div class=\"markdown\"> <p>Go 1.25 includes a new experimental garbage collector called Green Tea, available by setting <code>GOEXPERIMENT=greenteagc</code> at build time. Many workloads spend around 10% less time in the garbage collector, but some workloads see a reduction of up to 40%!</p> <p>It&rsquo;s production-ready and already in use at Google, so we encourage you to try it out. We know some workloads don&rsquo;t benefit as much, or even at all, so your feedback is crucial to helping us move forward. Based on the data we have now, we plan to make it the default in Go 1.26.</p> <p>To report back with any problems, <a href=\"https://go.dev/issue/new\">file a new issue</a>.</p> <p>To report back with any successes, reply to <a href=\"https://go.dev/issue/73581\">the existing Green Tea issue</a>.</p> <p>What follows is a blog post based on Michael Knyszek&rsquo;s GopherCon 2025 talk. We&rsquo;ll update this blog post with a link to the talk once it&rsquo;s available online.</p> <h2 id=\"tracing-garbage-collection\">Tracing garbage collection</h2> <p>Before we discuss Green Tea let&rsquo;s get us all on the same page about garbage collection.</p> <h3 id=\"objects-and-pointers\">Objects",
            "title": "The Green Tea Garbage Collector"
        },
        {
            "content": [
                "<p>On the 25th of October Bear had its first major outage. Specifically, the reverse proxy which handles custom domains went down, causing custom domains to time out.</p>\n<p>Unfortunately my monitoring tool failed to notify me, and it being a Saturday, I didn't notice the outage for longer than is reasonable. I apologise to everyone who was affected by it.</p>\n<p>First, I want to dissect the root cause, exactly what went wrong, and then provide the steps I've taken to mitigate this in the future.</p>\n<p>I wrote about <a href=\"https://herman.bearblog.dev/the-great-scrape/\">The Great Scrape</a> at the beginning of this year. The vast majority of web traffic is now bots, and it is becoming increasingly more hostile to have publicly available resources on the internet.</p>\n<p>There are 3 major kinds of bots currently flooding the internet: AI scrapers, malicious scrapers, and unchecked automations/scrapers.</p>\n<p>The first has been discussed at length. Data is <em>worth something</em> now that it is used as fodder to train LLMs, and there is a financial incentive to scrape, so scrape they will. They've depleted all human-created writing on the internet, and are becoming increasingly ravenous for new wells of content. I've seen this compared to the search for <a href=\"https://en.wikipedia.org/wiki/Low-background_steel\" target=\"_blank\">low-background-radiation steel</a>, which is, itself, very interesting.</p>\n<p>These scrapers, however, are the easiest to deal with since they tend to identify themselves as ChatGPT, Anthropic, XAI, et cetera. They also tend to specify whether they are from user-initiated searches (think all the sites that get scraped when you make a request with ChatGPT), or data mining (data used to train models). On Bear Blog I allow the first kinds, but block the second, since bloggers want discoverability, but usually don't want their writing used to train the next big model.</p>\n<p>The next two kinds of scraper are more insidious. The malicious scrapers are bots that systematically scrape and re-scrape websites, sometimes every few minutes, looking for vulnerabilities such as misconfigured Wordpress instances, or <code>.env</code> and <code>.aws</code> files, among other things, accidentally left lying around.</p>\n<p>It's more dangerous than ever to self-host, since simple mistakes in configurations will likely be found and exploited. In the last 24 hours I've blocked close to 2 million malicious requests across several hundred blogs.</p>\n<p>What's wild is that these scrapers rotate through thousands of IP addresses during their scrapes, which leads me to suspect that the requests are being tunnelled through apps on mobile devices, since the ASNs tend to be cellular networks. I'm still speculating here, but I think app developers have found another way to monetise their apps by offering them for free, and selling tunnel access to scrapers.</p>\n<p>Now, on to the unchecked automations. Vibe coding has made web-scraping easier than ever. Any script-kiddie can easily build a functional scraper in a single prompt and have it run all day from their home computer, and if the dramatic rise in scraping is anything to go by, many do. Tens of thousands of new scrapers have cropped up over the past few months, accidentally DDoSing website after website in their wake. The average consumer-grade computer is significantly more powerful than a VPS, so these machines can easily cause a lot of damage without noticing.</p>\n<p>I've managed to keep all these scrapers at bay using a combination of web application firewall (WAF) rules and rate limiting provided by Cloudflare, as well as some custom code which finds and quarantines bad bots based on their activity.</p>\n<p>I've played around with serving <a href=\"https://en.wikipedia.org/wiki/Zip_bomb\" target=\"_blank\">Zip Bombs</a>, which was quite satisfying, but I stopped for fear of accidentally bombing a legitimate user. Another thing I've played around with is Proof of Work validation, making it expensive for bots to scrape, as well as serving endless junk data to keep the bots busy. Both of these are <em>interesting</em>, but ultimately are just as effective as simply blocking those requests, without the increased complexity.</p>\n<p>With that context, here's exactly went wrong on Saturday.</p>\n<p>Previously, the bottleneck for page requests was the web-server itself, since it does the heavy lifting. It automatically scales horizontally by up to a factor of 10, if necessary, but bot requests can scale by significantly more than that, so having strong bot detection and mitigation, as well as serving highly-requested endpoints via a CDN is necessary. This is a solved problem, as outlined in my Great Scrape post, but worth restating.</p>\n<p>On Saturday morning a few hundred blogs were DDoSed, with tens of thousands of pages requested per minute (from the logs it's hard to say whether they were malicious, or just very aggressive scrapers). The above-mentioned mitigations worked as expected, however the reverse-proxy\u2014which sits up-stream of most of these mitigations\u2014became saturated with requests and decided it needed to take a little nap.</p>\n<p><img alt=\"page-requests\" src=\"https://bear-images.sfo2.cdn.digitaloceanspaces.com/herman/page-requests.webp\" /></p>\n<p><small>The big blue spike is what toppled the server. It's so big it makes the rest of the graph look flat.</small></p>\n<p>This server had been running with zero downtime for 5 years up until this point.</p>\n<p>Unfortunately my uptime monitor failed to alert me via the push notifications I'd set up, even though it's the only app I have that not only has notifications enabled (see my <a href=\"https://herman.bearblog.dev/notifications/\">post on notifications</a>), but even has critical alerts enabled, so it'll wake me up in the middle of the night if necessary. I still have no idea why this alert didn't come through, and I have ruled out misconfiguration through various tests.</p>\n<p>This brings me to how I will prevent this from happening in the future.</p>\n<ol>\n<li>Redundancy in monitoring. I now have a second monitoring service running alongside my uptime monitor which will give me a phone call, email, and text message in the event of any downtime.</li>\n<li>More aggressive rate-limiting and bot mitigation on the reverse proxy. This already reduces the server load by about half.</li>\n<li>I've bumped up the size of the reverse proxy, which can now handle about 5 times the load. This is overkill, but compute is cheap, and certainly worth the stress-mitigation. I'm already bald. I don't need to go balder.</li>\n<li>Auto-restart the reverse-proxy if bandwidth usage drops to zero for more than 2 minutes.</li>\n<li>Added a status page, available at <a href=\"https://status.bearblog.dev\">https://status.bearblog.dev</a> for better visibility and transparency. Hopefully those bars stay solid green forever.</li>\n</ol>\n<p>This should be enough to keep everything healthy. If you have any suggestions, or need help with your own bot issues, <a href=\"https://herman.bearblog.dev/contact/\">send me an email</a>.</p>\n<p>The public internet is mostly bots, many of whom are bad netizens. It's the most hostile it's ever been, and it is because of this that I feel it's more important than ever to take good care of the spaces that make the internet worth visiting.</p>\n<p>The arms race continues...</p>"
            ],
            "link": "https://herman.bearblog.dev/agressive-bots/",
            "publishedAt": "2025-10-29",
            "source": "Herman Martinus",
            "summary": "<p>On the 25th of October Bear had its first major outage. Specifically, the reverse proxy which handles custom domains went down, causing custom domains to time out.</p> <p>Unfortunately my monitoring tool failed to notify me, and it being a Saturday, I didn't notice the outage for longer than is reasonable. I apologise to everyone who was affected by it.</p> <p>First, I want to dissect the root cause, exactly what went wrong, and then provide the steps I've taken to mitigate this in the future.</p> <p>I wrote about <a href=\"https://herman.bearblog.dev/the-great-scrape/\">The Great Scrape</a> at the beginning of this year. The vast majority of web traffic is now bots, and it is becoming increasingly more hostile to have publicly available resources on the internet.</p> <p>There are 3 major kinds of bots currently flooding the internet: AI scrapers, malicious scrapers, and unchecked automations/scrapers.</p> <p>The first has been discussed at length. Data is <em>worth something</em> now that it is used as fodder to train LLMs, and there is a financial incentive to scrape, so scrape they will. They've depleted all human-created writing on the internet, and are becoming increasingly ravenous for new wells of content. I've seen this compared to the search for <a href=\"https://en.wikipedia.org/wiki/Low-background_steel\"",
            "title": "Aggressive bots ruined my weekend"
        },
        {
            "content": [
                "<figure><img alt=\"\" src=\"https://www.jonashietala.se/images/new_config_meme.jpg\" />\n<figcaption>I\u2019ve got lots of stuff to do but I ended up rewriting my Neovim config instead.\n</figcaption></figure>\n<blockquote>\n<p>\u2026 anyone can do any amount of work, provided it isn\u2019t the work he is supposed to be doing at that moment.\n</p>\n<footer><span class=\"author\">Robert Benchley, in Chips off the Old Benchley, 1949\n</span></footer>\n</blockquote>\n<p>My partner Veronica is amazing as she\u2019ll listen to my bullshit and random whims (or at least, pretend to).\nThat\u2019s a big benefit to having a blog: so I have an outlet for rambling about my weird projects and random fixations and spare Veronica\u2019s sanity a little.</p>\n<p>I know that Veronica won\u2019t be impressed by another Neovim config rewrite (even when done in Lisp!) so I\u2019ll simply write a big blog post about it.</p>\n<aside class=\"warn\">\n<p>This post will contain wild Lisp code and random Neovim references.\nPlease consult the <a href=\"https://fennel-lang.org/reference\">Fennel safety manual</a> and your nearest <a href=\"https://neovim.io/doc/user/helphelp.html\">Neovim :help station</a> for assistance.</p>\n</aside>\n<p></p>\n<section id=\"The-rewrite\">\n<h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#The-rewrite\">The rewrite</a></h2>\n<p>I wanted to rewrite my Neovim configuration in <a href=\"https://fennel-lang.org/\">Fennel</a> (a Lisp that compiles to Lua) and while doing so I wanted to migrate from <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> to Neovim\u2019s new built-in package manager <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a>.</p>\n<p>This included bootstrapping <a href=\"https://fennel-lang.org/\">Fennel</a> compilation for Neovim; replicating missing features from <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> such as running build scripts and lazy loading; modernizing my LSP and treesitter config; and trying out some new interesting plugins.</p>\n<p>Please see <a href=\"https://github.com/treeman/nvim-conf\">my new Neovim config here</a>.</p>\n<section id=\"Why-Fennel\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Why-Fennel\">Why Fennel?</a></h3>\n<p>Lua has been a fantastic boon to Neovim and it\u2019s a significant improvement over Vimscript, yet I can\u2019t help but raise an eyebrow when I hear people describe Lua as a <em>great</em> language.\nIt\u2019s definitely great at being a simple and fast embeddable language but the language itself leaves me wanting more.</p>\n<p><a href=\"https://fennel-lang.org/\">Fennel</a> doesn\u2019t solve all issues as some of Lua\u2019s quirks bleeds through but it should make it a little bit nicer.\nI particularly like the destructuring;\nmore functional programming constructs;\nmacros for convenient DSL;\nand the amazing pipe operator.</p>\n<p>But the biggest reason is that I\u2019m simply a bit bored and trying out new programming languages is fun.</p>\n</section>\n<section id=\"Why-vimpack\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Why-vimpack\">Why <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a>?</a></h3>\n<blockquote>\n<p>I don\u2019t rewrite my config often. But when I do, I do it properly.\n</p>\n<footer><span class=\"author\">Ancient Neovim wisdom\n</span></footer>\n</blockquote>\n<p>Folke, maker of many popular plugins such as <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> and <a href=\"https://github.com/folke/snacks.nvim\">snacks.nvim</a>, recently had a ~5 month break from working on his plugins.\nOf course, they continued to work and anyone working on open source projects can (and should) take a break whenever they want.</p>\n<p>But it exemplifies that core Neovim features will likely be better maintained than standalone plugins and should probably be preferred (if they provide the features you need).</p>\n<p>While <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">Neovim\u2019s built-in plugin manager</a> is a work in progress and still a bit too simplistic for my needs I wanted to try it out.</p>\n</section>\n</section>\n<section id=\"Structuring-the-config\">\n<h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Structuring-the-config\">Structuring the config</a></h2>\n<p>If you\u2019ve got a small configuration having it all inside a single <code>init.lua</code> is probably fine.\nSomehow I\u2019ve gathered almost 6k lines of Lua code under <code>~/.config/nvim</code> so showing it all in one file isn\u2019t that appealing.</p>\n<p>I first wanted to separate the configuration into a <code>core</code>/<code>plugin</code> split, where non-plugin configuration happens in <code>core</code> and plugin configuration lives under <code>plugin</code>.\nHowever, to support lazy loading with a single call to <a href=\"https://neovim.io/doc/user/pack.html#vim.pack.add()\">vim.pack.add</a> I decided to go back to letting the files under <code>plugin/</code> return plugin specs, like <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> does for you.</p>\n<p>With Fennel support under <code>fnl/</code> this is how my configuration is structured:</p>\n<div class=\"code-wrapper\"><pre><code><div class=\"line\">init.lua                ; Minimal bootstrap to load Fennel files\n</div><div class=\"line\">fnl                     ; All Fennel source in the `fnl/` folder\n</div><div class=\"line\">\u251c\u2500\u2500 config\n</div><div class=\"line\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 init.fnl        ; Loaded by `init.lua` and loads the rest\n</div><div class=\"line\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 colorscheme.fnl\n</div><div class=\"line\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 keymaps.fnl\n</div><div class=\"line\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 lsp.fnl         ; Config may reference plugins\n</div><div class=\"line\">\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n</div><div class=\"line\">\u251c\u2500\u2500 macros.fnl          ; Custom Fennel macros goes here\n</div><div class=\"line\">\u2514\u2500\u2500 plugins\n</div><div class=\"line\"> \u00a0\u00a0 \u251c\u2500\u2500 init.fnl        ; Loads everything under `plugins/`\n</div><div class=\"line\"> \u00a0\u00a0 \u251c\u2500\u2500 appearance.fnl\n</div><div class=\"line\"> \u00a0\u00a0 \u251c\u2500\u2500 coding.fnl\n</div><div class=\"line\"> \u00a0\u00a0 \u2514\u2500\u2500 ...\n</div><div class=\"line\">lua                     ; Lua stuff is still loaded transparently\n</div><div class=\"line\">ftplugin\n</div><div class=\"line\">\u2514\u2500\u2500 djot.lua            ; nvim-thyme doesn't load `ftplugin/`\n</div></code></pre></div>\n<p>It\u2019s not a perfect system as I\u2019d ideally want the <code>plugins/</code> to only add packages while I would configure the plugins in <code>config/</code>.\nBut some plugins use lazy loading making it more convenient to do it together with the plugin spec.</p>\n</section>\n<section id=\"Bootstrapping-Fennel\">\n<h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Bootstrapping-Fennel\">Bootstrapping Fennel</a></h2>\n<p>There are a handful of different plugins that allows you to easily write your Neovim config in Fennel.\nI ended up choosing <a href=\"https://github.com/aileot/nvim-thyme\">nvim-thyme</a> because it\u2019s fast (it hooks into <code>require</code> and only compiles on-demand) and it allows you to mix Fennel and Lua source files.</p>\n<aside class=\"tip\">\n<p><a href=\"https://github.com/aileot/nvim-thyme\">nvim-thyme</a> compiles Fennel sources to Lua files and adds them to Neovim\u2019s runtimepath.\nThis is how it allows you to seamlessly mix Fennel and Lua, where some parts may be written in Fennel and others in Lua.\nOn my machine they\u2019re located at <code>~/.cache/nvim/thyme/compile/lua/</code>.</p>\n</aside>\n<p><a href=\"https://github.com/aileot/nvim-thyme\">nvim-thyme</a> contains installation instructions for <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> and it references a bootstrapping function to run <code>git</code> to manually clone packages.\nBut we\u2019re going to use <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a> and it makes the bootstrap a bit cleaner:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\">vim.pack.add({\n</div><div class=\"line\">  <span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> Fennel environment and compiler.\n</div><div class=\"line\"></span>  <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/aileot/nvim-thyme<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">  <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://git.sr.ht/~technomancy/fennel<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">  <span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> Gives us some pleasant fennel macros.\n</div><div class=\"line\"></span>  <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/aileot/nvim-laurel<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">  <span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> Enables lazy loading of plugins.\n</div><div class=\"line\"></span>  <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/BirdeeHub/lze<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">}, { confirm <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">false</span> })\n</div></code></pre></div>\n<p>(I added <a href=\"https://github.com/BirdeeHub/lze\">lze</a> to my bootstrapping too as I\u2019ll use it later <a href=\"https://www.jonashietala.se/#Lazy-loading-with-lze\">when adding lazy loading support</a>, it was simpler having it in the bootstrap.)</p>\n<p><a href=\"https://github.com/aileot/nvim-thyme\">nvim-thyme</a> also instructs us to override <code>require()</code> calls (so it can compile on demand) and\nto setup the cache path (where it\u2019ll store the compiled Lua files):</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> Override package loading so thyme can hook into `require` calls\n</div><div class=\"line\"></span><span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> and generate lua code if the required package is a fennel file.\n</div><div class=\"line\"></span><span class=\"support function library lua\">table.insert</span>(package.loaders, <span class=\"keyword control lua\">function</span>(<span class=\"constant language lua\">...</span>)\n</div><div class=\"line\">  <span class=\"keyword control lua\">return</span> <span class=\"support function lua\">require</span>(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>thyme<span class=\"punctuation definition string end lua\">&quot;</span></span>).loader(<span class=\"constant language lua\">...</span>)\n</div><div class=\"line\"><span class=\"keyword control lua\">end</span>)\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> Setup the compile cache path for thyme.\n</div><div class=\"line\"></span><span class=\"keyword control lua\">local</span> thyme_cache_prefix <span class=\"keyword operator lua\">=</span> vim.fn.stdpath(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>cache<span class=\"punctuation definition string end lua\">&quot;</span></span>) <span class=\"keyword operator lua\">..</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>/thyme/compiled<span class=\"punctuation definition string end lua\">&quot;</span></span>\n</div><div class=\"line\">vim.opt.rtp:prepend(thyme_cache_prefix)\n</div></code></pre></div>\n<p>And now we\u2019re ready to write the rest of the config with Fennel!</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> Load the rest of the config with transparent fennel support.\n</div><div class=\"line\"></span><span class=\"support function lua\">require</span>(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>config<span class=\"punctuation definition string end lua\">&quot;</span></span>)\n</div></code></pre></div>\n<p>Now we can continue with Fennel <code>fnl/config.fnl</code> or <code>fnl/config/init.fnl</code>:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"comment\">;; Load all plugins\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:plugins</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"comment\">;; Load the other config files\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:config.colorscheme</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:config.keymaps</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:config.lsp</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">;; etc...\n</div><div class=\"line\"></span>\n</div></code></pre></div>\n<aside class=\"note\">\n<p>Keep in mind that we don\u2019t have to stay with Fennel all the time.<br />\n\n<code class=\"highlight fennel\"><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:config.lsp</span><span class=\"punctuation bracket\">)</span>\n</code> can load either <code>fnl/config/lsp.fnl</code> or <code>lua/config/lsp.lua</code>.</p>\n</aside>\n<p>There\u2019s one last thing we should do to make the bootstrap complete: we should call <code>:ThymeCacheClear</code> when <code>nvim-laurel</code> or <code>nvim-thyme</code> changes.\nThe recommended way is to use the <a href=\"https://neovim.io/doc/user/pack.html#PackChanged\">PackChanged</a> event, with something like this:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\">vim.api.nvim_create_autocmd(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>PackChanged<span class=\"punctuation definition string end lua\">&quot;</span></span>, {\n</div><div class=\"line\">  callback <span class=\"keyword operator lua\">=</span> <span class=\"keyword control lua\">function</span>(event)\n</div><div class=\"line\">    <span class=\"keyword control lua\">local</span> name <span class=\"keyword operator lua\">=</span> event.data.spec.name\n</div><div class=\"line\">\n</div><div class=\"line\">    <span class=\"keyword control lua\">if</span> name <span class=\"keyword operator lua\">==</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>nvim-thyme<span class=\"punctuation definition string end lua\">&quot;</span></span> <span class=\"keyword operator lua\">or</span> name <span class=\"keyword operator lua\">==</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>nvim-laurel<span class=\"punctuation definition string end lua\">&quot;</span></span> <span class=\"keyword control lua\">then</span>\n</div><div class=\"line\">      <span class=\"support function lua\">require</span>(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>thyme<span class=\"punctuation definition string end lua\">&quot;</span></span>).setup()\n</div><div class=\"line\">      vim.cmd(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>ThymeCacheClear<span class=\"punctuation definition string end lua\">&quot;</span></span>)\n</div><div class=\"line\">    <span class=\"keyword control lua\">end</span>\n</div><div class=\"line\">  <span class=\"keyword control lua\">end</span>,\n</div><div class=\"line\">  group <span class=\"keyword operator lua\">=</span> vim.api.nvim_create_augroup(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>init.lua<span class=\"punctuation definition string end lua\">&quot;</span></span>, { clear <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span> }),\n</div><div class=\"line\">})\n</div><div class=\"line\">\n</div><div class=\"line\">vim.pack.add(<span class=\"constant language lua\">...</span>)\n</div></code></pre></div>\n<p>But if we for example force an update for <code>nvim-laurel</code> (by deleting it with \n<code class=\"highlight lua\">vim.pack.del({<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>nvim-laurel<span class=\"punctuation definition string end lua\">&quot;</span></span>})</code> and restart Neovim) we get this error:</p>\n<div class=\"code-wrapper wide\"><pre><code><div class=\"line\">Error in /home/tree/code/nvim-conf/init.lua..PackChanged Autocommands for \"*\":\n</div><div class=\"line\">Lua callback: /home/tree/code/nvim-conf/init.lua:12: module 'thyme' not found:\n</div><div class=\"line\">        no field package.preload['thyme']\n</div><div class=\"line\">        cache_loader: module 'thyme' not found\n</div><div class=\"line\">        cache_loader_lib: module 'thyme' not found\n</div><div class=\"line\">        no file './thyme.lua'\n</div><div class=\"line\">        ...\n</div></code></pre></div>\n<p>There is no order guarantee for the packages and so <code>PackChanged</code> for <code>nvim-laurel</code> may run before <code>thyme</code> has been loaded.\nI worked around this with a variable that I check after <code>vim.pack.add</code>, which will guarantee that all packages have been added before we try to require a package:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line hl\"><span class=\"keyword control lua\">local</span> rebuild_thyme <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">false</span>\n</div><div class=\"line\">\n</div><div class=\"line\">vim.api.nvim_create_autocmd(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>PackChanged<span class=\"punctuation definition string end lua\">&quot;</span></span>, {\n</div><div class=\"line\">  callback <span class=\"keyword operator lua\">=</span> <span class=\"keyword control lua\">function</span>(event)\n</div><div class=\"line\">    <span class=\"keyword control lua\">local</span> name <span class=\"keyword operator lua\">=</span> event.data.spec.name\n</div><div class=\"line\">\n</div><div class=\"line\">    <span class=\"keyword control lua\">if</span> name <span class=\"keyword operator lua\">==</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>nvim-thyme<span class=\"punctuation definition string end lua\">&quot;</span></span> <span class=\"keyword operator lua\">or</span> name <span class=\"keyword operator lua\">==</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>nvim-laurel<span class=\"punctuation definition string end lua\">&quot;</span></span> <span class=\"keyword control lua\">then</span>\n</div><div class=\"line hl\">      rebuild_thyme <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>\n</div><div class=\"line\">    <span class=\"keyword control lua\">end</span>\n</div><div class=\"line\">  <span class=\"keyword control lua\">end</span>,\n</div><div class=\"line\">  group <span class=\"keyword operator lua\">=</span> vim.api.nvim_create_augroup(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>init.lua<span class=\"punctuation definition string end lua\">&quot;</span></span>, { clear <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span> }),\n</div><div class=\"line\">})\n</div><div class=\"line\">\n</div><div class=\"line\">vim.pack.add(<span class=\"constant language lua\">...</span>)\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"support function library lua\">table.insert</span>(package.loaders, <span class=\"keyword control lua\">function</span>(<span class=\"constant language lua\">...</span>)\n</div><div class=\"line\">  <span class=\"keyword control lua\">return</span> <span class=\"support function lua\">require</span>(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>thyme<span class=\"punctuation definition string end lua\">&quot;</span></span>).loader(<span class=\"constant language lua\">...</span>)\n</div><div class=\"line\"><span class=\"keyword control lua\">end</span>)\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"keyword control lua\">local</span> thyme_cache_prefix <span class=\"keyword operator lua\">=</span> vim.fn.stdpath(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>cache<span class=\"punctuation definition string end lua\">&quot;</span></span>) <span class=\"keyword operator lua\">..</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>/thyme/compiled<span class=\"punctuation definition string end lua\">&quot;</span></span>\n</div><div class=\"line\">vim.opt.rtp:prepend(thyme_cache_prefix)\n</div><div class=\"line\">\n</div><div class=\"line hl\"><span class=\"support function lua\">require</span>(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>thyme<span class=\"punctuation definition string end lua\">&quot;</span></span>).setup()\n</div><div class=\"line hl\">\n</div><div class=\"line hl\"><span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> Rebuild thyme cache after `vim.pack.add` to avoid dependency issues\n</div><div class=\"line hl\"></span><span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> and to make sure all packages are loaded.\n</div><div class=\"line hl\"></span><span class=\"keyword control lua\">if</span> rebuild_thyme <span class=\"keyword control lua\">then</span>\n</div><div class=\"line hl\">  vim.cmd(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>ThymeCacheClear<span class=\"punctuation definition string end lua\">&quot;</span></span>)\n</div><div class=\"line hl\"><span class=\"keyword control lua\">end</span>\n</div></code></pre></div>\n<aside class=\"note\">\n<p><a href=\"https://github.com/aileot/nvim-thyme\">nvim-thyme</a> recommends \n<code class=\"highlight lua\"><span class=\"support function lua\">require</span>(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>thyme<span class=\"punctuation definition string end lua\">&quot;</span></span>).setup()</code> to be done in <code>VimEnter</code> for speed reasons but I haven\u2019t noticed any slowdown so I\u2019ll just keep it in <code>init.lua</code> for simplicity.</p>\n</aside>\n</section>\n<section id=\"Building-a-convenient-plugin-management-system\">\n<h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Building-a-convenient-plugin-management-system\">Building a convenient plugin management system</a></h2>\n<p>I wanted to migrate to <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a> but it\u2019s missing a few key features from <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a>:</p>\n<ul>\n<li>\nIt can\u2019t automatically require all files under a directory.\n</li>\n<li>\nThere\u2019s no lazy loading support.\n</li>\n<li>\nIt can\u2019t run build scripts (such as <code>make</code> after install or update).\n</li>\n</ul>\n<p>I could\u2019ve given up and gone back to <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> but that just wouldn\u2019t do.</p>\n<section id=\"Source-pack-specs-from-files\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Source-pack-specs-from-files\">Source pack specs from files</a></h3>\n<p>I want to be able to create a file under <code>plugins/</code>, have it return a <a href=\"https://neovim.io/doc/user/pack.html#vim.pack.Spec\">vim.pack.Spec</a>, and have it automatically added. This is similar to the <a href=\"https://lazy.folke.io/usage/structuring\">structured plugins</a> approach of <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a>.</p>\n<p>To build this I first list all files under <code>plugins/</code> like so:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"comment\">;; List all files, with absolute paths.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">paths</span> <span class=\"punctuation bracket\">(</span><span class=\"function macro\">-&gt;</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>fn<span class=\"punctuation delimiter\">.</span><span class=\"function call\">stdpath</span> <span class=\"string\">&quot;config&quot;</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"operator\">..</span> <span class=\"string\">&quot;/fnl/plugins/*&quot;</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>fn<span class=\"punctuation delimiter\">.</span><span class=\"function call\">glob</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">split</span> <span class=\"string\">&quot;<span class=\"string escape\">\\n</span>&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>This uses Fennel\u2019s <code>-&gt;</code> <a href=\"https://fennel-lang.org/reference#------and---threading-macros\">threading macro</a>, Fennel\u2019s version of the pipe operator.\nIt\u2019s one of my favorite features of Elixir and was stoked to discover that Fennel has it too.\n(Fennel actually has even more power with the <code>-&gt;&gt;</code>, <code>-?&gt;</code>, and <code>-?&gt;&gt;</code> operators!)</p>\n<p>Now we need to loop through and transform the paths to relative paths and evaluate the files to get our specs.\n(I\u2019m using <a href=\"https://fennel-lang.org/reference#accumulate-iterator-accumulation\">accumulate</a> to explicitly build a list instead of <a href=\"https://fennel-lang.org/reference#icollect-collect-table-comprehension-macros\">collect</a> as we\u2019ll soon expand on it):</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"comment\">;; Make the paths relative to plugins and remove extension, e.g. &quot;plugins/snacks&quot;\n</div><div class=\"line\"></span><span class=\"comment\">;; and require those packages to get our pack specs.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">specs</span> <span class=\"punctuation bracket\">(</span><span class=\"function macro\">accumulate</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">acc</span> <span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">]</span> <span class=\"variable\">_</span> <span class=\"variable\">abs_path</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">ipairs</span> <span class=\"variable parameter\">paths</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">               <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">path</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">string</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">match</span> <span class=\"variable parameter\">abs_path</span> <span class=\"string\">&quot;<span class=\"punctuation bracket\">(</span><span class=\"variable\">plugins</span>/<span class=\"punctuation bracket\">[</span>^<span class=\"operator\">.</span>/<span class=\"punctuation bracket\">]</span>+<span class=\"punctuation bracket\">)</span>%.fnl$&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">if</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">and</span> <span class=\"variable parameter\">path</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">not=</span> <span class=\"variable parameter\">path</span> <span class=\"string\">&quot;plugins/init&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                     <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                       <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">mod_res</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"variable parameter\">path</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                       <span class=\"punctuation bracket\">(</span><span class=\"module\">table</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">insert</span> <span class=\"variable parameter\">acc</span> <span class=\"variable parameter\">mod_res</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                       <span class=\"variable parameter\">acc</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                     <span class=\"variable parameter\">acc</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>Now we can populate <code>specs</code> from files under <code>plugins/</code>, for example like this that returns a single spec:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/romainl/vim-cool&quot;</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<aside class=\"note\">\n<p>Fennel\u2019s table syntax felt a bit weird for me at first.\n\n<code class=\"highlight fennel\"><span class=\"string\">:src</span>\n</code> is the same as \n<code class=\"highlight fennel\"><span class=\"string\">&quot;src&quot;</span>\n</code> and the above code translates to this Lua:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"keyword control lua\">return</span> { src <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/romainl/vim-cool<span class=\"punctuation definition string end lua\">&quot;</span></span> }\n</div></code></pre></div>\n</aside>\n<p>But I also want to be able to return multiple specs:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/nvim-lua/popup.nvim&quot;</span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\"> <span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/nvim-lua/plenary.nvim&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">]</span>\n</div></code></pre></div>\n<p>To support this we can match on the return value to see if it\u2019s a list, and then loop and insert each spec in the list, otherwise we do as before:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">specs</span> <span class=\"punctuation bracket\">(</span><span class=\"function macro\">accumulate</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">acc</span> <span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">]</span> <span class=\"variable\">_</span> <span class=\"variable\">abs_path</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">ipairs</span> <span class=\"variable parameter\">paths</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">               <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">path</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">string</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">match</span> <span class=\"variable parameter\">abs_path</span> <span class=\"string\">&quot;<span class=\"punctuation bracket\">(</span><span class=\"variable\">plugins</span>/<span class=\"punctuation bracket\">[</span>^<span class=\"operator\">.</span>/<span class=\"punctuation bracket\">]</span>+<span class=\"punctuation bracket\">)</span>%.fnl$&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">if</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">and</span> <span class=\"variable parameter\">path</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">not=</span> <span class=\"variable parameter\">path</span> <span class=\"string\">&quot;plugins/init&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                     <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                       <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">mod_res</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"variable parameter\">path</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">                       <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">case</span> <span class=\"variable parameter\">mod_res</span>\n</div><div class=\"line hl\"><span class=\"comment\">                         ;; Flatten return if we return a list of specs.\n</div><div class=\"line hl\"></span>                         <span class=\"punctuation bracket\">[</span><span class=\"variable\">specs</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line hl\">                         <span class=\"punctuation bracket\">(</span><span class=\"keyword repeat\">each</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">_</span> <span class=\"variable\">spec</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">ipairs</span> <span class=\"variable parameter\">mod_res</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line hl\">                           <span class=\"punctuation bracket\">(</span><span class=\"module\">table</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">insert</span> <span class=\"variable parameter\">acc</span> <span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\"><span class=\"comment\">                         ;; Can return a string or a single spec.\n</div><div class=\"line hl\"></span>                         <span class=\"variable\">_</span>\n</div><div class=\"line hl\">                         <span class=\"punctuation bracket\">(</span><span class=\"module\">table</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">insert</span> <span class=\"variable parameter\">acc</span> <span class=\"variable parameter\">mod_res</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                       <span class=\"variable parameter\">acc</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                     <span class=\"variable parameter\">acc</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>Now all that\u2019s left is to call <a href=\"https://neovim.io/doc/user/pack.html#vim.pack.add()\">vim.pack.add</a> with our list of specs and our plugins are now automatically added from files under <code>plugins/</code>:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>pack<span class=\"punctuation delimiter\">.</span><span class=\"function call\">add</span> <span class=\"variable parameter\">specs</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:confirm</span> <span class=\"boolean\">false</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n</section>\n<section id=\"Lazy-loading-with-lze\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Lazy-loading-with-lze\">Lazy loading with <a href=\"https://github.com/BirdeeHub/lze\">lze</a></a></h3>\n<p><a href=\"https://github.com/BirdeeHub/lze\">lze</a> is a nice and simple plugin to add lazy-loading to <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a>.</p>\n<p>We\u2019ve already added it as a dependency in our <code>init.lua</code> so all we need to do is modify the <code>load</code> parameter to <code>vim.pack.add</code> like so:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"comment\">;; Override loader when adding to let lze handle lazy loading\n</div><div class=\"line\"></span><span class=\"comment\">;; when specified via the `data` attribute.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>pack<span class=\"punctuation delimiter\">.</span><span class=\"function call\">add</span> <span class=\"variable parameter\">specs</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:load</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">fn</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">p</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">                             <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">spec</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">or</span> p<span class=\"punctuation delimiter\">.</span>spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">data</span> <span class=\"punctuation bracket\">{</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                             <span class=\"punctuation bracket\">(</span><span class=\"keyword\">set</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span> p<span class=\"punctuation delimiter\">.</span>spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                             <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">lze</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:lze</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                             <span class=\"punctuation bracket\">(</span>lze<span class=\"punctuation delimiter\">.</span><span class=\"function call\">load</span> <span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                     <span class=\"label\">:confirm</span> <span class=\"boolean\">false</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>Now we can specify lazy loading via the <code>data</code> parameter in our specs:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/romainl/vim-cool&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:data</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:event</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;BufReadPost&quot;</span> <span class=\"string\">&quot;BufNewFile&quot;</span><span class=\"punctuation bracket\">]</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>It relies on wrapping configuration under <code>data</code> but that\u2019s annoying, so let\u2019s simplify things a little.</p>\n</section>\n<section id=\"Simplified-specifications\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Simplified-specifications\">Simplified specifications</a></h3>\n<p>The idea here is to transform the specs before we call <a href=\"https://neovim.io/doc/user/pack.html#vim.pack.add()\">vim.pack.add</a>.</p>\n<p>We can do it easily when we collect our specs by calling the <code>transform_spec</code> function:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">specs</span> <span class=\"punctuation bracket\">(</span><span class=\"function macro\">accumulate</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">acc</span> <span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">]</span> <span class=\"variable\">_</span> <span class=\"variable\">abs_path</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">ipairs</span> <span class=\"variable parameter\">paths</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">               <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">path</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">string</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">match</span> <span class=\"variable parameter\">abs_path</span> <span class=\"string\">&quot;<span class=\"punctuation bracket\">(</span><span class=\"variable\">plugins</span>/<span class=\"punctuation bracket\">[</span>^<span class=\"operator\">.</span>/<span class=\"punctuation bracket\">]</span>+<span class=\"punctuation bracket\">)</span>%.fnl$&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">if</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">and</span> <span class=\"variable parameter\">path</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">not=</span> <span class=\"variable parameter\">path</span> <span class=\"string\">&quot;plugins/init&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                     <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                       <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">mod_res</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"variable parameter\">path</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                       <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">case</span> <span class=\"variable parameter\">mod_res</span>\n</div><div class=\"line\">                         <span class=\"punctuation bracket\">[</span><span class=\"variable\">specs</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">                         <span class=\"punctuation bracket\">(</span><span class=\"keyword repeat\">each</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">_</span> <span class=\"variable\">spec</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">ipairs</span> <span class=\"variable parameter\">mod_res</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line hl\">                           <span class=\"punctuation bracket\">(</span><span class=\"module\">table</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">insert</span> <span class=\"variable parameter\">acc</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">transform_spec</span> <span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                         <span class=\"variable\">_</span>\n</div><div class=\"line hl\">                         <span class=\"punctuation bracket\">(</span><span class=\"module\">table</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">insert</span> <span class=\"variable parameter\">acc</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">transform_spec</span> <span class=\"variable parameter\">mod_res</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                       <span class=\"variable parameter\">acc</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                     <span class=\"variable parameter\">acc</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>I want <code>transform_spec</code> to transform this:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/romainl/vim-cool&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:event</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;BufReadPost&quot;</span> <span class=\"string\">&quot;BufNewFile&quot;</span><span class=\"punctuation bracket\">]</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>Into this:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/romainl/vim-cool&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:data</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:event</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;BufReadPost&quot;</span> <span class=\"string\">&quot;BufNewFile&quot;</span><span class=\"punctuation bracket\">]</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>By storing keys other than <code>src</code>, <code>name</code>, and <code>version</code> under a <code>data</code> table.\nThis is what I came up with:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">transform_spec</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"string\">&quot;Transform a vim.pack spec and move lze arguments into `data`&quot;</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">case</span> <span class=\"variable parameter\">spec</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">{</span><span class=\"variable\"></span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\"><span class=\"comment\">      ;; Split keys to vim.pack and rest into `data`.\n</div><div class=\"line\"></span>      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">pack_args</span> <span class=\"punctuation bracket\">{</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">data_args</span> <span class=\"punctuation bracket\">{</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword repeat\">each</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">k</span> <span class=\"variable\">v</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">pairs</span> <span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">if</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">list_contains</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">:src</span> <span class=\"string\">:name</span> <span class=\"string\">:version</span><span class=\"punctuation bracket\">]</span> <span class=\"variable parameter\">k</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">            <span class=\"punctuation bracket\">(</span><span class=\"keyword\">tset</span> <span class=\"variable parameter\">pack_args</span> <span class=\"variable parameter\">k</span> <span class=\"variable parameter\">v</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">            <span class=\"punctuation bracket\">(</span><span class=\"keyword\">tset</span> <span class=\"variable parameter\">data_args</span> <span class=\"variable parameter\">k</span> <span class=\"variable parameter\">v</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">set</span> pack_args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">data</span> <span class=\"variable parameter\">data_args</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"variable parameter\">pack_args</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">    ;; Bare strings are valid vim.pack specs too.\n</div><div class=\"line\"></span>    <span class=\"variable\">other</span>\n</div><div class=\"line\">    <span class=\"variable parameter\">other</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>Another quality of life feature I\u2019d like is to make it simpler to call <code>setup</code> functions.\n<a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> again does this well and it\u2019s pretty convenient.</p>\n<p>For example, this is how it looks like with <a href=\"https://github.com/BirdeeHub/lze\">lze</a> to add an <code>after</code> hook and call a <code>setup</code> function:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/A7Lavinraj/fyler.nvim&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:on_require</span> <span class=\"string\">:fyler</span>\n</div><div class=\"line\"> <span class=\"label\">:after</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">fyler</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:fyler</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span>fyler<span class=\"punctuation delimiter\">.</span><span class=\"function call\">setup</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:icon_provider</span> <span class=\"string\">&quot;nvim_web_devicons&quot;</span>\n</div><div class=\"line\">                        <span class=\"label\">:default_explorer</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>What if we could instead do:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/A7Lavinraj/fyler.nvim&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:on_require</span> <span class=\"string\">:fyler</span>\n</div><div class=\"line\"> <span class=\"label\">:setup</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:icon_provider</span> <span class=\"string\">&quot;nvim_web_devicons&quot;</span> <span class=\"label\">:default_explorer</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">]</span>\n</div></code></pre></div>\n<p>But this is just data and we can transform the second case to the first one fairly easily.\nIn the <code>transform_spec</code> function:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">transform_spec</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"string\">&quot;Transform a vim.pack spec and move lze arguments into `data`</span>\n</div><div class=\"line\"><span class=\"string\">   and create an `after` hook if `setup` is specified.&quot;</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">case</span> <span class=\"variable parameter\">spec</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">{</span><span class=\"variable\"></span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\"><span class=\"comment\">      ;; Split keys to vim.pack and rest into `data`.\n</div><div class=\"line\"></span>      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">pack_args</span> <span class=\"punctuation bracket\">{</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">data_args</span> <span class=\"punctuation bracket\">{</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword repeat\">each</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">k</span> <span class=\"variable\">v</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">pairs</span> <span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">if</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">list_contains</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">:src</span> <span class=\"string\">:name</span> <span class=\"string\">:version</span><span class=\"punctuation bracket\">]</span> <span class=\"variable parameter\">k</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">            <span class=\"punctuation bracket\">(</span><span class=\"keyword\">tset</span> <span class=\"variable parameter\">pack_args</span> <span class=\"variable parameter\">k</span> <span class=\"variable parameter\">v</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">            <span class=\"punctuation bracket\">(</span><span class=\"keyword\">tset</span> <span class=\"variable parameter\">data_args</span> <span class=\"variable parameter\">k</span> <span class=\"variable parameter\">v</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line hl\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">after</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">args</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line hl\"><span class=\"comment\">        ;; Call `setup()` functions if needed.\n</div><div class=\"line hl\"></span>        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">setup</span>\n</div><div class=\"line hl\">          <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">pkg</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">on_require</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">          <span class=\"punctuation bracket\">(</span>pkg<span class=\"punctuation delimiter\">.</span><span class=\"function call\">setup</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">setup</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\"><span class=\"comment\">        ;; Load user specified `after` if it exists.\n</div><div class=\"line hl\"></span>        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">after</span>\n</div><div class=\"line hl\">          <span class=\"punctuation bracket\">(</span>spec<span class=\"punctuation delimiter\">.</span><span class=\"function call\">after</span> <span class=\"variable parameter\">args</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">\n</div><div class=\"line hl\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">set</span> data_args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">after</span> <span class=\"variable parameter\">after</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">set</span> pack_args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">data</span> <span class=\"variable parameter\">data_args</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"variable parameter\">pack_args</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">    ;; Bare strings are valid vim.pack specs too.\n</div><div class=\"line\"></span>    <span class=\"variable\">other</span>\n</div><div class=\"line\">    <span class=\"variable parameter\">other</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>How to figure out the package name to require (since it may differ from the path)?\n<a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> has a bunch of rules to try to figure this out automatically but I chose to be explicit.\n<a href=\"https://github.com/BirdeeHub/lze\">lze</a> uses the <code>on_require</code> argument so it can load on a require call (on \n<code class=\"highlight fennel\"><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:fyler</span><span class=\"punctuation bracket\">)</span>\n</code> for example), which seems like a good idea to reuse.</p>\n<p>And just to prevent me from making mistakes, I added a sanity check:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line hl\"><span class=\"comment\">;; `:setup` needs to know what package to require,\n</div><div class=\"line hl\"></span><span class=\"comment\">;; therefore we use `:on_require`\n</div><div class=\"line hl\"></span><span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">and</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">setup</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">not</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">on_require</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">  <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">error</span> <span class=\"punctuation bracket\">(</span><span class=\"operator\">..</span> <span class=\"string\">&quot;`<span class=\"punctuation delimiter\">:</span>setup` specified without `on_require`<span class=\"punctuation delimiter\">:</span> &quot;</span>\n</div><div class=\"line hl\">             <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">inspect</span> <span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">after</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">args</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\"><span class=\"comment\">  ;; ...\n</div><div class=\"line\"></span>\n</div></code></pre></div>\n</section>\n<section id=\"Build-scripts-via-PackChanged-events\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Build-scripts-via-PackChanged-events\">Build scripts via PackChanged events</a></h3>\n<p>There\u2019s one last feature I really want from <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> and that\u2019s to automatically run build scripts after a package is installed or updated.</p>\n<p>I basically want to specify this in my specs:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/eraserhd/parinfer-rust&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:build</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;cargo&quot;</span> <span class=\"string\">&quot;build&quot;</span> <span class=\"string\">&quot;--release&quot;</span><span class=\"punctuation bracket\">]</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>Again, we\u2019ll rely on <a href=\"https://neovim.io/doc/user/pack.html#PackChanged\">PackChanged</a> for this:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"comment\">;; Before `vim.pack.add` to capture changes.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">augroup!</span> <span class=\"string\">:plugin_init</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">au!</span> <span class=\"string\">:PackChanged</span> <span class=\"variable parameter\">pack_changed</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>The above code uses macros from <a href=\"https://github.com/aileot/nvim-laurel\">nvim-laurel</a> to define an autocommand that calls the <code>pack_changed</code> function.\nThat function will then run <code>pack_changed</code> when the package is updated or installed:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">pack_changed</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">event</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">list_contains</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">:update</span> <span class=\"string\">:install</span><span class=\"punctuation bracket\">]</span> event<span class=\"punctuation delimiter\">.</span>data<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">kind</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">execute_build</span> event<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">data</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">  ;; Return false to not remove the autocommand.\n</div><div class=\"line\"></span>  <span class=\"boolean\">false</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">execute_build</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\"><span class=\"comment\">   ;; `?.` will prevent crashing if any field is nil.\n</div><div class=\"line\"></span>  <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">build</span> <span class=\"punctuation bracket\">(</span><span class=\"function macro\">?.</span> <span class=\"variable parameter\">pack</span> <span class=\"string\">:spec</span> <span class=\"string\">:data</span> <span class=\"string\">:build</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"variable parameter\">build</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">run_build_script</span> <span class=\"variable parameter\">build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>To run the scripts I use <a href=\"https://neovim.io/doc/user/lua.html#vim.system()\">vim.system</a> with some simple printing:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">run_build_script</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">path</span> pack<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">path</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">notify</span> <span class=\"punctuation bracket\">(</span><span class=\"operator\">..</span> <span class=\"string\">&quot;Run `&quot;</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">inspect</span> <span class=\"variable parameter\">build</span><span class=\"punctuation bracket\">)</span> <span class=\"string\">&quot;` for &quot;</span> pack<span class=\"punctuation delimiter\">.</span>spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">              <span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>log<span class=\"punctuation delimiter\">.</span>levels<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">INFO</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">system</span> <span class=\"variable parameter\">build</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:cwd</span> <span class=\"variable parameter\">path</span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\">              <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">exit_obj</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">                <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">not=</span> exit_obj<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">code</span> <span class=\"number\">0</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">                  ;; If I use `vim.notify` it errors with:\n</div><div class=\"line\"></span><span class=\"comment\">                  ;; vim/_editor.lua:0: E5560: nvim_echo must not be called in a fast event context\n</div><div class=\"line\"></span><span class=\"comment\">                  ;; Simply printing is fine I guess, it doesn't have to be the prettiest solution.\n</div><div class=\"line\"></span>                  <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">print</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">inspect</span> <span class=\"variable parameter\">build</span><span class=\"punctuation bracket\">)</span> <span class=\"string\">&quot;failed in&quot;</span> <span class=\"variable parameter\">path</span>\n</div><div class=\"line\">                         <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">inspect</span> <span class=\"variable parameter\">exit_obj</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>This will now allow us to run build scripts like <code>cargo build --release</code> or <code>make</code> after a package is installed or updated.\nIt\u2019s a bit too basic as there\u2019s no visible progress bar for long running builds (Rust, I\u2019m looking at you!) and it doesn\u2019t handle build errors that well but it works well enough I guess.</p>\n<p>But what about user commands or requiring a package? For example with <a href=\"https://github.com/nvim-treesitter/nvim-treesitter\">nvim-treesitter</a> you\u2019d want to run <code>:TSUpdate</code> after an update,\nsomething like this:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/nvim-treesitter/nvim-treesitter&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:version</span> <span class=\"string\">:main</span>\n</div><div class=\"line\"> <span class=\"label\">:build</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">cmd</span> <span class=\"string\">&quot;TSUpdate&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>Let\u2019s try it by allowing functions in the <code>build</code> parameter (and bare strings because why not):</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">execute_build</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">build</span> <span class=\"punctuation bracket\">(</span><span class=\"function macro\">?.</span> <span class=\"variable parameter\">pack</span> <span class=\"string\">:spec</span> <span class=\"string\">:data</span> <span class=\"string\">:build</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"variable parameter\">build</span>\n</div><div class=\"line hl\">    <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">case</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">type</span> <span class=\"variable parameter\">build</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\"><span class=\"comment\">      ;; We can specify either &quot;make&quot; or [&quot;make&quot;]\n</div><div class=\"line hl\"></span>      <span class=\"string\">&quot;string&quot;</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">run_build_script</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">build</span><span class=\"punctuation bracket\">]</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">      <span class=\"string\">&quot;table&quot;</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">run_build_script</span> <span class=\"variable parameter\">build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\"><span class=\"comment\">      ;; Run a callback instead.\n</div><div class=\"line hl\"></span>      <span class=\"string\">&quot;function&quot;</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">call_build_cb</span> <span class=\"variable parameter\">build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line hl\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">call_build_cb</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line hl\">  <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">notify</span> <span class=\"punctuation bracket\">(</span><span class=\"operator\">..</span> <span class=\"string\">&quot;Call build hook for &quot;</span> pack<span class=\"punctuation delimiter\">.</span>spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span><span class=\"punctuation bracket\">)</span> <span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>log<span class=\"punctuation delimiter\">.</span>levels<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">INFO</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">  <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>If we run this though it doesn\u2019t work:</p>\n<div class=\"code-wrapper wide\"><pre><code><div class=\"line\">Error in /home/tree/code/nvim-conf/init.lua..PackChanged Autocommands for \"*\":\n</div><div class=\"line\">Lua callback: vim/_editor.lua:0: /home/tree/code/nvim-conf/init.lua..PackChanged Autocommands for \"*\"..script nvim_exec2() called\n</div><div class=\"line\">at PackChanged Autocommands for \"*\":0, line 1: Vim:E492: Not an editor command: TSUpdate\n</div></code></pre></div>\n<p>The problem is that <code>PackChanged</code> is run before the pack is loaded.\nMaybe we could work around this by calling <a href=\"https://neovim.io/doc/user/repeat.html#%3Apackadd\">packadd</a> ourselves but that would shortcut lazy loading.\nIn this instance we\u2019d like to run <code>TSUpdate</code> after the pack is loaded but only if it\u2019s been updated or installed so we don\u2019t run it after every restart.</p>\n<aside class=\"note\">\n<p>Yeah I know that <a href=\"https://github.com/nvim-treesitter/nvim-treesitter\">nvim-treesitter</a> shouldn\u2019t be lazy loaded anyway so it might be a bad example.</p>\n</aside>\n<p>What I did was introduce an <code>after_build</code> parameter to the spec that\u2019s run after load if a <code>PackChanged</code> event was seen before:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/nvim-treesitter/nvim-treesitter&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:version</span> <span class=\"string\">:main</span>\n</div><div class=\"line hl\"> <span class=\"label\">:after_build</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">cmd</span> <span class=\"string\">&quot;TSUpdate&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>Then in <code>plugins/init.fnl</code> I use a local variable <code>packs_changed</code> that\u2019s updated on <a href=\"https://neovim.io/doc/user/pack.html#PackChanged\">PackChanged</a> like so:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line hl\"><span class=\"comment\">;; Capture packs that are updated or installed.\n</div><div class=\"line hl\"></span><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">g!</span> <span class=\"string\">:packs_changed</span> <span class=\"punctuation bracket\">{</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">\n</div><div class=\"line hl\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">set_pack_changed</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">name</span> <span class=\"variable parameter\">event</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line hl\"><span class=\"comment\">  ;; Maybe there's an easier way of updating a table global...?\n</div><div class=\"line hl\"></span>  <span class=\"punctuation bracket\">(</span><span class=\"keyword\">var</span> <span class=\"variable\">packs</span> <span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">g</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">packs_changed</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword\">tset</span> <span class=\"variable parameter\">packs</span> <span class=\"variable parameter\">name</span> <span class=\"variable parameter\">event</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">  <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">g!</span> <span class=\"string\">:packs_changed</span> <span class=\"variable parameter\">packs</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">pack_changed</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">event</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">list_contains</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">:update</span> <span class=\"string\">:install</span><span class=\"punctuation bracket\">]</span> event<span class=\"punctuation delimiter\">.</span>data<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">kind</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">pack</span> event<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">data</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">    <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">set_pack_changed</span> pack<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">spec</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span> <span class=\"variable parameter\">event</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">execute_build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">  <span class=\"boolean\">false</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>Then we\u2019ll call <code>after_build</code> from the <code>after</code> hook we setup before:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">transform_spec</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">spec</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">case</span> <span class=\"variable parameter\">spec</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">{</span><span class=\"variable\"></span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\">    <span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\"><span class=\"comment\">      ;; Split keys to vim.pack and rest into `data`.\n</div><div class=\"line\"></span><span class=\"comment\">      ;; ...\n</div><div class=\"line\"></span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"variable parameter\">after</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">args</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line hl\">        <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">pack_changed_event</span> <span class=\"punctuation bracket\">(</span><span class=\"operator\">.</span> <span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">g</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">packs_changed</span> args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">        <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">set_pack_changed</span> args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span> <span class=\"boolean\">false</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">setup</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">pkg</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">on_require</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span>pkg<span class=\"punctuation delimiter\">.</span><span class=\"function call\">setup</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">setup</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\"><span class=\"comment\">        ;; Run `after_build` scripts if a `PackChanged` event\n</div><div class=\"line hl\"></span><span class=\"comment\">        ;; was run with `install` or `update`.\n</div><div class=\"line hl\"></span>        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">and</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">after_build</span> <span class=\"variable parameter\">pack_changed_event</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line hl\">          <span class=\"punctuation bracket\">(</span>spec<span class=\"punctuation delimiter\">.</span><span class=\"function call\">after_build</span> <span class=\"variable parameter\">args</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> spec<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">after</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span>spec<span class=\"punctuation delimiter\">.</span><span class=\"function call\">after</span> <span class=\"variable parameter\">args</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">set</span> data_args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">after</span> <span class=\"variable parameter\">after</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">(</span><span class=\"keyword\">set</span> pack_args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">data</span> <span class=\"variable parameter\">data_args</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"variable parameter\">pack_args</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">    <span class=\"variable\">other</span>\n</div><div class=\"line\">    <span class=\"variable parameter\">other</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>With this we can finally specify build actions such as these:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:build</span> <span class=\"string\">&quot;make&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:build</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;cargo&quot;</span> <span class=\"string\">&quot;build&quot;</span> <span class=\"string\">&quot;--release&quot;</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\"> <span class=\"label\">:after_build</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">cmd</span> <span class=\"string\">&quot;TSUpdate&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<aside class=\"important\">\n<p>While the build system mostly works, once in a while it\u2019ll break and fail to run the build scripts.\nMaybe there was a weird build error or something.\nFor these cases I have a \n<code class=\"highlight fennel\"><span class=\"string\">:BuildPacks</span>\n</code> user command that runs <code>build</code> and <code>after_build</code> for all packs like so:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">command!</span> <span class=\"string\">:BuildPacks</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">            <span class=\"punctuation bracket\">(</span><span class=\"keyword repeat\">each</span> <span class=\"punctuation bracket\">[</span><span class=\"variable\">_</span> <span class=\"variable\">pack</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">ipairs</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>pack<span class=\"punctuation delimiter\">.</span><span class=\"function call\">get</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">              <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">execute_build</span> <span class=\"variable parameter\">pack</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">              <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">after_build</span> <span class=\"punctuation bracket\">(</span><span class=\"function macro\">?.</span> <span class=\"variable parameter\">pack</span> <span class=\"string\">:spec</span> <span class=\"string\">:data</span> <span class=\"string\">:after_build</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">              <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"variable parameter\">after_build</span>\n</div><div class=\"line\">                <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">execute_after_build</span> <span class=\"variable parameter\">after_build</span> pack<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">spec</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">name</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>I really hope that proper build script support will land in core Neovim one day so I can rid myself of my crappy implementation.\nIt makes me feel icky.</p>\n</aside>\n</section>\n</section>\n<section id=\"Some-Fennel-examples\">\n<h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Some-Fennel-examples\">Some Fennel examples</a></h2>\n<p>You\u2019ve already seen how Fennel code looks like but what about configuration with Fennel?\nOne of the negative things of moving my configuration from Vimscript to Lua was that simple things such as settings options or simple keymaps is more verbose.</p>\n<p>So how does Fennel compare for the simpler, more declarative stuff?</p>\n<section id=\"Options\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Options\">Options</a></h3>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight vim\"><div class=\"line\"><span class=\"support function viml\">set</span> relativenumber\n</div><div class=\"line\"><span class=\"support function viml\">set</span> clipboard^=unnamed,unnamedplus\n</div><div class=\"line\"><span class=\"support function viml\">set</span> backupdir<span class=\"storage function viml\">=~</span><span class=\"string regexp viml\">/.config/</span>nvim/backup\n</div><div class=\"line\"><span class=\"support function viml\">let</span> mapleader=<span class=\"string quoted double viml\">&quot; &quot;</span>\n</div></code></pre></div>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\">vim.opt.relativenumber <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>\n</div><div class=\"line\">vim.opt.clipboard:append({ <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>unnamed<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>unnamedplus<span class=\"punctuation definition string end lua\">&quot;</span></span> })\n</div><div class=\"line\">vim.opt.backupdir <span class=\"keyword operator lua\">=</span> vim.fn.expand(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>~/.config/nvim/backup<span class=\"punctuation definition string end lua\">&quot;</span></span>)\n</div><div class=\"line\">vim.g.mapleader <span class=\"keyword operator lua\">=</span> <span class=\"string quoted other multiline lua\"><span class=\"punctuation definition string begin lua\">[[</span> <span class=\"punctuation definition string end lua\">]]</span></span>\n</div></code></pre></div>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">set!</span> <span class=\"string\">:relativenumber</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">set!</span> <span class=\"string\">:clipboard</span> <span class=\"operator\">+</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;unnamed&quot;</span> <span class=\"string\">&quot;unnamedplus&quot;</span><span class=\"punctuation bracket\">]</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">set!</span> <span class=\"string\">:backupdir</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>fn<span class=\"punctuation delimiter\">.</span><span class=\"function call\">expand</span> <span class=\"string\">&quot;~/.config/nvim/backup&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">g!</span> <span class=\"string\">:mapleader</span> <span class=\"string\">&quot; &quot;</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>With <a href=\"https://github.com/aileot/nvim-laurel\">nvim-laurel</a> macros I think Fennel is decent.\nSlightly better than Lua but not as convenient as Vimscript.</p>\n</section>\n<section id=\"Keymaps\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Keymaps\">Keymaps</a></h3>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"keyword control lua\">local</span> map <span class=\"keyword operator lua\">=</span> vim.keymap.set\n</div><div class=\"line\">map(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>n<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>&lt;localleader&gt;D<span class=\"punctuation definition string end lua\">&quot;</span></span>, vim.lsp.buf.declaration,\n</div><div class=\"line\">  { silent <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>, buffer <span class=\"keyword operator lua\">=</span> buffer, desc <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>Declaration<span class=\"punctuation definition string end lua\">&quot;</span></span> }\n</div><div class=\"line\">)\n</div><div class=\"line\">map(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>n<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>&lt;leader&gt;ep<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"keyword control lua\">function</span>() find_org_file(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>projects<span class=\"punctuation definition string end lua\">&quot;</span></span>) <span class=\"keyword control lua\">end</span>,\n</div><div class=\"line\">  { desc <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>Org projects<span class=\"punctuation definition string end lua\">&quot;</span></span> }\n</div><div class=\"line\">)\n</div><div class=\"line\">map(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>n<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>]t<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"keyword control lua\">function</span>()\n</div><div class=\"line\">  <span class=\"support function lua\">require</span>(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>trouble<span class=\"punctuation definition string end lua\">&quot;</span></span>).next({ skip_groups <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>, jump <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span> })\n</div><div class=\"line\"><span class=\"keyword control lua\">end</span>, {\n</div><div class=\"line\">  desc <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>Trouble next<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">  silent <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>,\n</div><div class=\"line\">})\n</div></code></pre></div>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">bmap!</span> <span class=\"string\">:n</span> <span class=\"string\">&quot;&lt;localleader&gt;D&quot;</span> <span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">lsp</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">buf</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">declaration</span>\n</div><div class=\"line\">       <span class=\"punctuation bracket\">{</span><span class=\"label\">:silent</span> <span class=\"boolean\">true</span> <span class=\"label\">:desc</span> <span class=\"string\">&quot;Declaration&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">map!</span> <span class=\"string\">:n</span> <span class=\"string\">&quot;&lt;leader&gt;ep&quot;</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">find_org_file</span> <span class=\"string\">&quot;projects&quot;</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">{</span><span class=\"label\">:desc</span> <span class=\"string\">&quot;Org projects&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">map!</span> <span class=\"string\">:n</span> <span class=\"string\">&quot;<span class=\"punctuation bracket\">]</span>t&quot;</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">trouble</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:trouble</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span>trouble<span class=\"punctuation delimiter\">.</span><span class=\"function call\">next</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:skip_groups</span> <span class=\"boolean\">true</span> <span class=\"label\">:jump</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">{</span><span class=\"label\">:silent</span> <span class=\"boolean\">true</span> <span class=\"label\">:desc</span> <span class=\"string\">&quot;Trouble next&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>Not a huge difference to be honest.\nI like the <code>#(do_the_thing)</code> shorthand for anonymous functions fennel has.\nHaving to (sometimes) split up <code>require</code> and method calls on separate lines in Fennel is annoying.</p>\n<aside class=\"update\">\n<div class=\"info\">Update <span class=\"date\">2025-10-29</span></div>\n<p><a href=\"https://www.reddit.com/r/neovim/comments/1oj1unx/packing_neovim_with_fennel/nm04511/\">A comment on Reddit</a> pointed out that you can simplify <code>require</code> and method calls with a macro:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword function\">fn</span> <span class=\"variable parameter\">m</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">m</span> <span class=\"variable parameter\">func</span> <span class=\"variable parameter\">...</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">  <span class=\"string\">&quot;Call a function on a module&quot;</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">assert-compile</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">sym?</span> <span class=\"variable parameter\">m</span><span class=\"punctuation bracket\">)</span> <span class=\"string\">&quot;expected module name&quot;</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">  <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">assert-compile</span> <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">sym?</span> <span class=\"variable parameter\">func</span><span class=\"punctuation bracket\">)</span> <span class=\"string\">&quot;expected function name&quot;</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">  <span class=\"punctuation special\">`</span><span class=\"punctuation bracket\">(</span><span class=\"punctuation bracket\">(</span><span class=\"operator\">.</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"punctuation special\">,</span><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">tostring</span> <span class=\"variable parameter\">m</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span> <span class=\"punctuation special\">,</span><span class=\"punctuation bracket\">(</span><span class=\"function builtin\">tostring</span> <span class=\"variable parameter\">func</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span> <span class=\"punctuation special\">,</span><span class=\"variable builtin\">...</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>And then use it like so:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">map!</span> <span class=\"string\">:n</span> <span class=\"string\">&quot;<span class=\"punctuation bracket\">]</span>t&quot;</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">m</span> <span class=\"variable parameter\">trouble</span> <span class=\"function builtin\">next</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:skip_groups</span> <span class=\"boolean\">true</span> <span class=\"label\">:jump</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">      <span class=\"punctuation bracket\">{</span><span class=\"label\">:silent</span> <span class=\"boolean\">true</span> <span class=\"label\">:desc</span> <span class=\"string\">&quot;Trouble next&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n</aside>\n</section>\n<section id=\"Overriding-highlight-groups\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Overriding-highlight-groups\">Overriding highlight groups</a></h3>\n<p>One example that was a big step up with Fennel is overriding highlight groups.\nI\u2019m using <a href=\"https://github.com/savq/melange-nvim\">melange</a> which is a fantastic and underrated color scheme but I\u2019ve collected a fair bit of overrides for it.</p>\n<p>In Lua you use <a href=\"https://neovim.io/doc/user/api.html#nvim_set_hl()\">nvim_set_hl</a> to add an override, for example like this:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\">vim.api.nvim_set_hl(<span class=\"constant numeric lua\">0</span>, <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>@symbol.elixir<span class=\"punctuation definition string end lua\">&quot;</span></span>, { link <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>@label<span class=\"punctuation definition string end lua\">&quot;</span></span> })\n</div></code></pre></div>\n<p>When you do this 100 times this is <em>annoying</em> so I made an override table to accomplish the job:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"keyword control lua\">local</span> overrides <span class=\"keyword operator lua\">=</span> {\n</div><div class=\"line\">  { name <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>@symbol.elixir<span class=\"punctuation definition string end lua\">&quot;</span></span>, val <span class=\"keyword operator lua\">=</span> { link <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>@label<span class=\"punctuation definition string end lua\">&quot;</span></span> } },\n</div><div class=\"line\">  { name <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>@string.special.symbol.elixir<span class=\"punctuation definition string end lua\">&quot;</span></span>, val <span class=\"keyword operator lua\">=</span> { link <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>@label<span class=\"punctuation definition string end lua\">&quot;</span></span> } },\n</div><div class=\"line\">  { name <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>@constant.elixir<span class=\"punctuation definition string end lua\">&quot;</span></span>, val <span class=\"keyword operator lua\">=</span> { link <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>Constant<span class=\"punctuation definition string end lua\">&quot;</span></span> } },\n</div><div class=\"line\">  <span class=\"comment line double-dash lua\"><span class=\"punctuation definition comment lua\">--</span> And around 100 other overrides...\n</div><div class=\"line\"></span>}\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"keyword control lua\">for</span> _, v <span class=\"keyword control lua\">in</span> <span class=\"support function lua\">pairs</span>(overrides) <span class=\"keyword control lua\">do</span>\n</div><div class=\"line\">  vim.api.nvim_set_hl(<span class=\"constant numeric lua\">0</span>, v.name, v.val)\n</div><div class=\"line\"><span class=\"keyword control lua\">end</span>\n</div></code></pre></div>\n<p>In <a href=\"https://fennel-lang.org/\">Fennel</a> with the <a href=\"https://github.com/aileot/nvim-laurel/blob/main/docs/reference.md#highlight\">hi!</a> macro this all becomes as simple as:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">hi!</span> <span class=\"string\">&quot;<span class=\"punctuation special\">@</span>symbol.elixir&quot;</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:link</span> <span class=\"string\">&quot;<span class=\"punctuation special\">@</span>label&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">hi!</span> <span class=\"string\">&quot;<span class=\"punctuation special\">@</span>string.special.symbol.elixir&quot;</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:link</span> <span class=\"string\">&quot;<span class=\"punctuation special\">@</span>label&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">hi!</span> <span class=\"string\">&quot;<span class=\"punctuation special\">@</span>constant.elixir&quot;</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:link</span> <span class=\"string\">&quot;Constant&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n</section>\n<section id=\"Autocommands\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Autocommands\">Autocommands</a></h3>\n<p>Here are some autocommands to enable <a href=\"https://neovim.io/doc/user/options.html#'cursorline'\">cursorline</a> only in the currently active window (while skipping buffers such as the dashboard):</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"keyword control lua\">local</span> group <span class=\"keyword operator lua\">=</span> augroup(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>my-autocmds<span class=\"punctuation definition string end lua\">&quot;</span></span>, { clear <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span> })\n</div><div class=\"line\">autocmd({ <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>VimEnter<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>WinEnter<span class=\"punctuation definition string end lua\">&quot;</span></span>, <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>BufWinEnter<span class=\"punctuation definition string end lua\">&quot;</span></span> }, {\n</div><div class=\"line\">  group <span class=\"keyword operator lua\">=</span> group,\n</div><div class=\"line\">  callback <span class=\"keyword operator lua\">=</span> <span class=\"keyword control lua\">function</span>(x)\n</div><div class=\"line\">    <span class=\"keyword control lua\">if</span> <span class=\"support function library lua\">string.len</span>(x.file) <span class=\"keyword operator lua\">&gt;</span> <span class=\"constant numeric lua\">0</span> <span class=\"keyword control lua\">then</span>\n</div><div class=\"line\">      vim.opt_local.cursorline <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>\n</div><div class=\"line\">    <span class=\"keyword control lua\">end</span>\n</div><div class=\"line\">  <span class=\"keyword control lua\">end</span>,\n</div><div class=\"line\">})\n</div><div class=\"line\">autocmd(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>WinLeave<span class=\"punctuation definition string end lua\">&quot;</span></span>, {\n</div><div class=\"line\">  group <span class=\"keyword operator lua\">=</span> group,\n</div><div class=\"line\">  callback <span class=\"keyword operator lua\">=</span> <span class=\"keyword control lua\">function</span>()\n</div><div class=\"line\">    vim.opt_local.cursorline <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">false</span>\n</div><div class=\"line\">  <span class=\"keyword control lua\">end</span>,\n</div><div class=\"line\">})\n</div></code></pre></div>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">augroup!</span> <span class=\"string\">:my-autocmds</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">au!</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">:VimEnter</span> <span class=\"string\">:WinEnter</span> <span class=\"string\">:BufWinEnter</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">               <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                  <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"operator\">&gt;</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">string</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">len</span> $1<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">file</span><span class=\"punctuation bracket\">)</span> <span class=\"number\">0</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                    <span class=\"punctuation bracket\">(</span>let! <span class=\"string\">:<span class=\"module\">opt_local</span></span> <span class=\"string\">:cursorline</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                  <span class=\"boolean\">false</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">au!</span> <span class=\"string\">:WinLeave</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">do</span>\n</div><div class=\"line\">                            <span class=\"punctuation bracket\">(</span>let! <span class=\"string\">:<span class=\"module\">opt_local</span></span> <span class=\"string\">:cursorline</span> <span class=\"boolean\">false</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                            <span class=\"boolean\">false</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n</section>\n<section id=\"Plugin-specs\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Plugin-specs\">Plugin specs</a></h3>\n<p>One thing I like more in Lua compared to Fennel is how readable tables are.\nThe Fennel formatter <a href=\"https://git.sr.ht/~technomancy/fnlfmt\">fnlfmt</a> might be partly to blame as it has a tendency to use very little whitespace. Regardless, I prefer this Lua code:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"keyword control lua\">return</span> {\n</div><div class=\"line\">  <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/stevearc/conform.nvim<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">  { src <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/mason-org/mason.nvim<span class=\"punctuation definition string end lua\">&quot;</span></span>, dep_of <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>mason-lspconfig.nvim<span class=\"punctuation definition string end lua\">&quot;</span></span> },\n</div><div class=\"line\">  { src <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/neovim/nvim-lspconfig<span class=\"punctuation definition string end lua\">&quot;</span></span>, dep_of <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>mason-lspconfig.nvim<span class=\"punctuation definition string end lua\">&quot;</span></span> },\n</div><div class=\"line\">  <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/mason-org/mason-lspconfig.nvim<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">  {\n</div><div class=\"line\">    src <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>https://github.com/nvim-treesitter/nvim-treesitter<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">    version <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>main<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">    after <span class=\"keyword operator lua\">=</span> <span class=\"keyword control lua\">function</span>()\n</div><div class=\"line\">      vim.cmd(<span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>TSUpdate<span class=\"punctuation definition string end lua\">&quot;</span></span>)\n</div><div class=\"line\">    <span class=\"keyword control lua\">end</span>,\n</div><div class=\"line\">  },\n</div><div class=\"line\">}\n</div></code></pre></div>\n<p>Over this corresponding Fennel code:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/stevearc/conform.nvim&quot;</span>\n</div><div class=\"line\"> <span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/mason-org/mason.nvim&quot;</span> <span class=\"label\">:dep_of</span> <span class=\"string\">:mason-lspconfig.nvim</span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\"> <span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/neovim/nvim-lspconfig&quot;</span> <span class=\"label\">:dep_of</span> <span class=\"string\">:mason-lspconfig.nvim</span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\"> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/mason-org/mason-lspconfig.nvim&quot;</span>\n</div><div class=\"line\"> <span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/nvim-treesitter/nvim-treesitter&quot;</span>\n</div><div class=\"line\">  <span class=\"label\">:version</span> <span class=\"string\">:main</span>\n</div><div class=\"line\">  <span class=\"label\">:after</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">cmd</span> <span class=\"string\">&quot;TSUpdate&quot;</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>To me the Lua code is for some reason easier to read.</p>\n<p>Similarly I don\u2019t have a problem with this <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> spec:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight lua\"><div class=\"line\"><span class=\"keyword control lua\">return</span> {\n</div><div class=\"line\">  <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>folke/snacks.nvim<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">  priority <span class=\"keyword operator lua\">=</span> <span class=\"constant numeric lua\">1000</span>,\n</div><div class=\"line\">  lazy <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">false</span>,\n</div><div class=\"line\">  opts <span class=\"keyword operator lua\">=</span> {\n</div><div class=\"line\">    indent <span class=\"keyword operator lua\">=</span> {\n</div><div class=\"line\">      indent <span class=\"keyword operator lua\">=</span> {\n</div><div class=\"line\">        enabled <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>,\n</div><div class=\"line\">        char <span class=\"keyword operator lua\">=</span> <span class=\"string quoted double lua\"><span class=\"punctuation definition string begin lua\">&quot;</span>\u2506<span class=\"punctuation definition string end lua\">&quot;</span></span>,\n</div><div class=\"line\">      },\n</div><div class=\"line\">      scope <span class=\"keyword operator lua\">=</span> {\n</div><div class=\"line\">        enabled <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>,\n</div><div class=\"line\">        only_current <span class=\"keyword operator lua\">=</span> <span class=\"constant language lua\">true</span>,\n</div><div class=\"line\">      },\n</div><div class=\"line\">    },\n</div><div class=\"line\">    scroll <span class=\"keyword operator lua\">=</span> {\n</div><div class=\"line\">      animate <span class=\"keyword operator lua\">=</span> {\n</div><div class=\"line\">        duration <span class=\"keyword operator lua\">=</span> { step <span class=\"keyword operator lua\">=</span> <span class=\"constant numeric lua\">15</span>, total <span class=\"keyword operator lua\">=</span> <span class=\"constant numeric lua\">150</span> },\n</div><div class=\"line\">      },\n</div><div class=\"line\">    },\n</div><div class=\"line\">    explorer <span class=\"keyword operator lua\">=</span> {},\n</div><div class=\"line\">  },\n</div><div class=\"line\">}\n</div></code></pre></div>\n<p>But with this new Fennel spec I use\u2014even though it\u2019s simpler in some ways\u2014it\u2019s harder for me to quickly see what table the keys belong to:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">{</span><span class=\"label\">:src</span> <span class=\"string\">&quot;https<span class=\"punctuation delimiter\">:</span>//github.com/folke/snacks.nvim&quot;</span>\n</div><div class=\"line\"> <span class=\"label\">:on_require</span> <span class=\"string\">:snacks</span>\n</div><div class=\"line\"> <span class=\"label\">:lazy</span> <span class=\"boolean\">false</span>\n</div><div class=\"line\"> <span class=\"label\">:setup</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:indent</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:indent</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:enabled</span> <span class=\"boolean\">true</span> <span class=\"label\">:char</span> <span class=\"string\">&quot;\u2506&quot;</span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\">                  <span class=\"label\">:scope</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:enabled</span> <span class=\"boolean\">true</span> <span class=\"label\">:only_current</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\">         <span class=\"label\">:scroll</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:animate</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:duration</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:step</span> <span class=\"number\">15</span> <span class=\"label\">:total</span> <span class=\"number\">150</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span>\n</div><div class=\"line\">         <span class=\"label\">:explorer</span> <span class=\"punctuation bracket\">{</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">}</span>\n</div></code></pre></div>\n<p>Maybe it\u2019s something you\u2019ll get used to?</p>\n<aside class=\"note\">\n<p>A big plus with the setup I use is that I can mix Funnel and Lua, so if I get tired of the <a href=\"https://fennel-lang.org/\">Fennel</a> tables I could keep them in Lua and have the more \u201ccodey\u201d parts in Fennel.</p>\n</aside>\n</section>\n</section>\n<section id=\"Notable-plugin-updates\">\n<h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Notable-plugin-updates\">Notable plugin updates</a></h2>\n<p>Neovim is moving quickly and I\u2019ve had a bit of catching up to do in the plugin department.\nI won\u2019t bore you with an exhaustive list; just a few highlights.</p>\n<section id=\"Native-undotree\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Native-undotree\">Native undotree</a></h3>\n<p>I\u2019ve been using <a href=\"https://github.com/jiaoshijie/undotree\">undotree</a> a long time and it\u2019s excellent.\n<a href=\"https://neovim.io/doc/user/plugins.html#_builtin-plugin:-undotree\">This feature</a> was <a href=\"https://github.com/neovim/neovim/pull/35627\">recently merged into Neovim</a>:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"comment\">;; It's optional so we need to use packadd to activate the plugin:\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">cmd</span> <span class=\"string\">&quot;packadd nvim.undotree&quot;</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">;; Then we can add a keymap to open it:\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">map!</span> <span class=\"string\">:n</span> <span class=\"string\">&quot;&lt;leader&gt;u&quot;</span> <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">:</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:undotree</span><span class=\"punctuation bracket\">)</span> <span class=\"string\">:open</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:command</span> <span class=\"string\">&quot;topleft 30vnew&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n</section>\n<section id=\"Simplified-LSP-config\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Simplified-LSP-config\">Simplified LSP config</a></h3>\n<p>Neovim routinely gets shit on for LSPs being so hard to setup.\nYes, it could probably be easier but Neovim has recently made some changes to streamline LSP configuration and it\u2019s not nearly as involved as it used to be.</p>\n<p>Here\u2019s how my base config looks like:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword import\">require-macros</span> <span class=\"string\">:macros</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"comment\">;; Convenient way of installing LSPs and other tools.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">mason</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:mason</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span>mason<span class=\"punctuation delimiter\">.</span><span class=\"function call\">setup</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"comment\">;; Convenient way of automatically enabling LSPs installed via Mason.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">mason-lspconfig</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:mason-lspconfig</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span>mason-lspconfig<span class=\"punctuation delimiter\">.</span><span class=\"function call\">setup</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:automatic_enable</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"comment\">;; Show diagnostics as virtual lines on the current line.\n</div><div class=\"line\"></span><span class=\"comment\">;; It's pretty cool actually, you should try it out.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">diagnostic</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">config</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:virtual_text</span> <span class=\"boolean\">false</span>\n</div><div class=\"line\">                        <span class=\"label\">:severity_sort</span> <span class=\"boolean\">true</span>\n</div><div class=\"line\">                        <span class=\"label\">:virtual_lines</span> <span class=\"punctuation bracket\">{</span> <span class=\"label\">:current_line</span> <span class=\"boolean\">true</span> <span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"comment\">;; I like inlay hints.\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>lsp<span class=\"punctuation delimiter\">.</span>inlay_hint<span class=\"punctuation delimiter\">.</span><span class=\"function call\">enable</span> <span class=\"boolean\">true</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">augroup!</span> <span class=\"string\">:my-lsps</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">au!</span> <span class=\"string\">:LspAttach</span>\n</div><div class=\"line\">               <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">_</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">snacks</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:snacks</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">bmap!</span> <span class=\"string\">:n</span> <span class=\"string\">&quot;&lt;localleader&gt;D&quot;</span> snacks<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">picker</span><span class=\"punctuation delimiter\">.</span><span class=\"variable member\">lsp_declarations</span>\n</div><div class=\"line\">                        <span class=\"punctuation bracket\">{</span><span class=\"label\">:silent</span> <span class=\"boolean\">true</span> <span class=\"label\">:desc</span> <span class=\"string\">&quot;Declaration&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">bmap!</span> <span class=\"string\">:n</span> <span class=\"string\">&quot;&lt;localleader&gt;l&quot;</span>\n</div><div class=\"line\">                        <span class=\"keyword function\">#</span><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>diagnostic<span class=\"punctuation delimiter\">.</span><span class=\"function call\">open_float</span> <span class=\"punctuation bracket\">{</span><span class=\"label\">:focusable</span> <span class=\"boolean\">false</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                        <span class=\"punctuation bracket\">{</span><span class=\"label\">:silent</span> <span class=\"boolean\">true</span> <span class=\"label\">:desc</span> <span class=\"string\">&quot;Diagnostics&quot;</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">                ;; etc\n</div><div class=\"line\"></span>\n</div></code></pre></div>\n<p>I also use <a href=\"https://github.com/neovim/nvim-lspconfig\">nvim-lspconfig</a> but it doesn\u2019t do anything magical (anymore).\nIt\u2019s basically a <a href=\"https://github.com/neovim/nvim-lspconfig/tree/master/lsp\">collection of LSP configs</a>, so I don\u2019t have to fill my config with things like this:</p>\n<div class=\"code-wrapper\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>lsp<span class=\"punctuation delimiter\">.</span><span class=\"function call\">config</span> <span class=\"string\">&quot;expert&quot;</span>\n</div><div class=\"line\">                <span class=\"punctuation bracket\">{</span><span class=\"label\">:cmd</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;expert&quot;</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">                 <span class=\"label\">:root_markers</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;mix.exs&quot;</span> <span class=\"string\">&quot;.git&quot;</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">                 <span class=\"label\">:filetypes</span> <span class=\"punctuation bracket\">[</span><span class=\"string\">&quot;elixir&quot;</span> <span class=\"string\">&quot;eelixir&quot;</span> <span class=\"string\">&quot;heex&quot;</span><span class=\"punctuation bracket\">]</span><span class=\"punctuation bracket\">}</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>lsp<span class=\"punctuation delimiter\">.</span><span class=\"function call\">enable</span> <span class=\"string\">&quot;expert&quot;</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>If you don\u2019t want to change the keymaps (Neovim comes with defaults that I personally dislike) or customize specific LSPs then there\u2019s not that much left.\n<a href=\"https://github.com/mason-org/mason.nvim\">Mason</a> is also totally optional and if you want to manage your LSPs outside of Neovim you can totally do that.\nThe only thing missing is autocomplete, which <a href=\"https://github.com/Saghen/blink.cmp\">blink.cmp</a> provides out of the box.</p>\n</section>\n<section id=\"Automatically-install-and-enable-treesitter-grammars\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Automatically-install-and-enable-treesitter-grammars\">Automatically install and enable treesitter grammars</a></h3>\n<p>Another thing that has changed since my last config overhaul is <a href=\"https://github.com/nvim-treesitter/nvim-treesitter\">nvim-treesitter</a> being rewritten and is now a much simpler plugin. The new version lives on the <a href=\"https://github.com/nvim-treesitter/nvim-treesitter/tree/main\">main branch</a> and the old archived one on <code>master</code> and it contains a bunch of breaking changes.</p>\n<p>For example, it no longer supports installing and activating grammars automatically.\nI think I saw a plugin for that somewhere but here\u2019s some Fennel code that sets it up:</p>\n<div class=\"code-wrapper wide\"><div class=\"descr\"></div><pre><code class=\"highlight fennel\"><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword import\">require-macros</span> <span class=\"string\">:macros</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">nvim-treesitter</span> <span class=\"punctuation bracket\">(</span><span class=\"function builtin\">require</span> <span class=\"string\">:nvim-treesitter</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"comment\">;; Ignore auto install for these filetypes:\n</div><div class=\"line\"></span><span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">ignored_ft</span> <span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">]</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">\n</div><div class=\"line\"><span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">augroup!</span> <span class=\"string\">:treesitter</span>\n</div><div class=\"line\">          <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">au!</span> <span class=\"string\">:FileType</span>\n</div><div class=\"line\">               <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"punctuation bracket\">[</span><span class=\"variable parameter\">args</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">bufnr</span> args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">buf</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                 <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">ft</span> args<span class=\"punctuation delimiter\">.</span><span class=\"variable member\">match</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\"><span class=\"comment\">                 ;; Auto install grammars unless explicitly ignored.\n</div><div class=\"line\"></span>                 <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">not</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">list_contains</span> <span class=\"variable parameter\">ignored_ft</span> <span class=\"variable parameter\">ft</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                   <span class=\"punctuation bracket\">(</span><span class=\"variable parameter\">:</span> <span class=\"punctuation bracket\">(</span>nvim-treesitter<span class=\"punctuation delimiter\">.</span><span class=\"function call\">install</span> <span class=\"variable parameter\">ft</span><span class=\"punctuation bracket\">)</span> <span class=\"string\">:await</span>\n</div><div class=\"line\">                      <span class=\"punctuation bracket\">(</span><span class=\"keyword function\">\u03bb</span> <span class=\"punctuation bracket\">[</span><span class=\"punctuation bracket\">]</span>\n</div><div class=\"line\"><span class=\"comment\">                        ;; Enable highlight only if there's an installed grammar.\n</div><div class=\"line\"></span>                        <span class=\"punctuation bracket\">(</span><span class=\"keyword\">local</span> <span class=\"variable\">installed</span> <span class=\"punctuation bracket\">(</span>nvim-treesitter<span class=\"punctuation delimiter\">.</span><span class=\"function call\">get_installed</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                        <span class=\"punctuation bracket\">(</span><span class=\"keyword conditional\">when</span> <span class=\"punctuation bracket\">(</span><span class=\"keyword operator\">and</span> <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>api<span class=\"punctuation delimiter\">.</span><span class=\"function call\">nvim_buf_is_loaded</span> <span class=\"variable parameter\">bufnr</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                                   <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span><span class=\"function call\">list_contains</span> <span class=\"variable parameter\">installed</span> <span class=\"variable parameter\">ft</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div><div class=\"line\">                          <span class=\"punctuation bracket\">(</span><span class=\"module\">vim</span><span class=\"punctuation delimiter\">.</span>treesitter<span class=\"punctuation delimiter\">.</span><span class=\"function call\">start</span> <span class=\"variable parameter\">bufnr</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span><span class=\"punctuation bracket\">)</span>\n</div></code></pre></div>\n<p>If you use <a href=\"https://github.com/nvim-treesitter/nvim-treesitter-textobjects/tree/main\">nvim-treesitter-textobjects</a> (which you should) remember to migrate to the <code>main</code> branch there too.</p>\n</section>\n<section id=\"Some-new-fun-plugins\">\n<h3><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Some-new-fun-plugins\">Some new fun plugins</a></h3>\n<ol>\n<li>\n<p><a href=\"https://github.com/A7Lavinraj/fyler.nvim\">fyler.nvim</a>, edit a file explorer like a buffer</p>\n<p><a href=\"https://github.com/stevearc/oil.nvim\">oil.nvim</a> is a great plugin that allows you to manage files by simply editing text.\n<a href=\"https://github.com/A7Lavinraj/fyler.nvim\">fyler.nvim</a> takes it to the next level by combining it with a tree-style file explorer.</p>\n<aside class=\"tip\">\n<p>You may wonder, how in the world does it work?</p>\n<p>It\u2019s both smart and simple: the plugins use unique identifiers together with Neovim\u2019s conceal feature to hide them.\nIf you go into an <a href=\"https://github.com/stevearc/oil.nvim\">oil.nvim</a> or <a href=\"https://github.com/A7Lavinraj/fyler.nvim\">fyler.nvim</a> buffer and remove the conceal with <code>:set conceallevel=0</code> you can see this for yourself:</p>\n<div class=\"code-wrapper\"><pre><code><div class=\"line\">/00008 drafts\n</div><div class=\"line\">  /00037 my_first_homelab_rack.dj\n</div><div class=\"line\">  /00038 nvim_fennel_pack_rewrite.dj\n</div><div class=\"line\">  /00041 leftie.dj\n</div></code></pre></div>\n<p>So if I would rename <code>leftie</code> to <code>rightie</code> in the buffer above and save:</p>\n<div class=\"code-wrapper\"><pre><code><div class=\"line\">/00041 rightie.dj\n</div></code></pre></div>\n<p>The plugin would see the <code>/00041</code> identifier and recognize the rename.</p>\n</aside>\n</li>\n<li>\n<p><a href=\"https://github.com/Saghen/blink.cmp\">blink.cmp</a>, faster autocomplete</p>\n<p>I\u2019ve been using <a href=\"https://github.com/hrsh7th/nvim-cmp\">nvim-cmp</a> as my completion plugin but I migrated to <a href=\"https://github.com/Saghen/blink.cmp\">blink.cmp</a> as it\u2019s faster and more actively maintained.\nIt\u2019s too bad that it broke <a href=\"https://www.jonashietala.se/blog/2024/05/26/autocomplete_with_nvim-cmp/\">my custom nvim-cmp source for my blog</a> but it wasn\u2019t too hard to migrate.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/folke/snacks.nvim\">snacks.nvim</a>, a better picker</p>\n<p><a href=\"https://github.com/nvim-telescope/telescope.nvim\">telescope.nvim</a> has been a solid picker but it\u2019s no longer actively developed and the <a href=\"https://github.com/folke/snacks.nvim\">snacks.nvim</a>\nis the replacement I settled on.</p>\n<p>I tried <a href=\"https://github.com/dmtrKovalenko/fff.nvim\">fff.nvim</a> for file picking but surprisingly it felt really slow compared to <a href=\"https://github.com/folke/snacks.nvim\">snacks.nvim</a>.\n<a href=\"https://github.com/ibhagwan/fzf-lua\">fzf-lua</a> is another great alternative that I haven\u2019t given enough attention to.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/MagicDuck/grug-far.nvim\">grug-far.nvim</a>, global query replace</p>\n<p>I\u2019ve been happy with Neovim\u2019s regular <code>%s/foo/bar</code> for single files (aided by <a href=\"https://github.com/roobert/search-replace.nvim\">search-replace.nvim</a> for easy population).\nBut query replace in multiple files has always felt lacking.\nI used to use <a href=\"https://github.com/nvim-telescope/telescope.nvim\">telescope.nvim</a> to populate the quickfix window and then use <a href=\"https://github.com/gabrielpoca/replacer.nvim\">replacer.nvim</a> to make it editable, updating multiple files.</p>\n<p>It worked but was a bit annoying so now I\u2019m trying <a href=\"https://github.com/MagicDuck/grug-far.nvim\">grug-far.nvim</a> as a more \u201cover engineered\u201d solution.\nI haven\u2019t used it that long to say for sure but I\u2019m hopeful.</p>\n<aside class=\"note\">\n<p>Yes, LSP backed rename exists and it\u2019s great. But sometimes you want to operate on text.</p>\n</aside>\n</li>\n</ol>\n</section>\n</section>\n<section id=\"Ending-thougths\">\n<h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#Ending-thougths\">Ending thougths</a></h2>\n<p>It would be better to gradually evolve your Neovim config over time instead of doing these large rewrites.\nBut afterwards it feels pretty good as I can once more try to claim with a straight face that I know what\u2019s in my configuration and what it\u2019s doing.</p>\n<p>The <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a> migration was more painful than I had expected.\nIt\u2019s still an experimental nightly feature and it\u2019s missing a lot of nice features that <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> has.\nI\u2019ll keep using <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a> as I think I\u2019ve gotten it to a state of good enough but I\u2019m looking forward to <a href=\"https://neovim.io/doc/user/pack.html#vim.pack\">vim.pack</a> becoming more feature complete.</p>\n<p><a href=\"https://fennel-lang.org/\">Fennel</a> is fun to write in and I will keep using it where I can.\nTo be honest though, for basic configuration I was expecting <a href=\"https://fennel-lang.org/\">Fennel</a> to make a bigger difference than it did.\nIt\u2019s nicer for sure but it\u2019s nothing revolutionary.</p>\n<p>Then again, it\u2019s the little things in life that matters.</p>\n<div class=\"center\">\n<p><a href=\"https://github.com/treeman/nvim-conf\">Link to my new Neovim config on GitHub</a></p>\n</div>\n</section>"
            ],
            "link": "https://www.jonashietala.se/blog/2025/10/29/packing_neovim_with_fennel",
            "publishedAt": "2025-10-29",
            "source": "Jonas Hietala",
            "summary": "<figure><img alt=\"\" src=\"https://www.jonashietala.se/images/new_config_meme.jpg\" /> <figcaption>I\u2019ve got lots of stuff to do but I ended up rewriting my Neovim config instead. </figcaption></figure> <blockquote> <p>\u2026 anyone can do any amount of work, provided it isn\u2019t the work he is supposed to be doing at that moment. </p> <footer><span class=\"author\">Robert Benchley, in Chips off the Old Benchley, 1949 </span></footer> </blockquote> <p>My partner Veronica is amazing as she\u2019ll listen to my bullshit and random whims (or at least, pretend to). That\u2019s a big benefit to having a blog: so I have an outlet for rambling about my weird projects and random fixations and spare Veronica\u2019s sanity a little.</p> <p>I know that Veronica won\u2019t be impressed by another Neovim config rewrite (even when done in Lisp!) so I\u2019ll simply write a big blog post about it.</p> <aside class=\"warn\"> <p>This post will contain wild Lisp code and random Neovim references. Please consult the <a href=\"https://fennel-lang.org/reference\">Fennel safety manual</a> and your nearest <a href=\"https://neovim.io/doc/user/helphelp.html\">Neovim :help station</a> for assistance.</p> </aside> <p></p> <section id=\"The-rewrite\"> <h2><a class=\"heading-ref\" href=\"https://www.jonashietala.se/#The-rewrite\">The rewrite</a></h2> <p>I wanted to rewrite my Neovim configuration in <a href=\"https://fennel-lang.org/\">Fennel</a> (a Lisp that compiles to Lua) and while doing so I wanted to migrate from <a href=\"https://github.com/folkqe/lazy.nvim\">lazy.nvim</a> to Neovim\u2019s new built-in package",
            "title": "Packing Neovim with Fennel"
        },
        {
            "content": [],
            "link": "https://www.nytimes.com/2025/09/25/learning/tiny-memoir-contest-for-students-write-a-100-word-personal-narrative.html",
            "publishedAt": "2025-10-29",
            "source": "Modern Love - NYT",
            "summary": "We invite teenagers to tell a story about a meaningful life experience in just 100 words. Contest dates: Oct. 22-Dec. 3, 2025.",
            "title": "Tiny Memoir Contest for Students: Write a 100-Word Personal Narrative"
        },
        {
            "content": [],
            "link": "https://www.nytimes.com/2025/10/15/podcasts/malala-yousafzai-modern-love.html",
            "publishedAt": "2025-10-29",
            "source": "Modern Love - NYT",
            "summary": "The global activist gets candid in her new memoir. She spoke with us about struggling with panic attacks, finding her personal style and changing her mind about what marriage could be.",
            "title": "Malala Yousafzai Thought She\u2019d Never Fall in Love"
        },
        {
            "content": [],
            "link": "https://www.nytimes.com/2025/10/29/style/tiny-modern-love-stories-we-are-a-comedy-of-errors.html",
            "publishedAt": "2025-10-29",
            "source": "Modern Love - NYT",
            "summary": "Modern Love in miniature, featuring reader-submitted stories of no more than 100 words.",
            "title": "Tiny Love Stories: \u2018We Are a Comedy of Errors\u2019"
        },
        {
            "content": [
                "<p>The Chinese and Americans are currently negotiating a trade deal. There are plenty of ways to generate a win-win deal, and early signs of this are promising on many fronts.</p>\n<p>Since this will be discussed for real tomorrow as per reports, I will offer my thoughts on this one more time.</p>\n<p>The biggest mistake America could make would be to effectively give up Taiwan, which would be catastrophic on many levels including that Taiwan contains TSMC. I am assuming we are not so foolish as to seriously consider doing this, still I note it.</p>\n<p>Beyond that, the key thing, basically the only thing, America has to do other than \u2018get a reasonable deal overall\u2019 is not be so captured or foolish or both as to allow export of the B30A chip, or even worse than that (yes it can always get worse) allow relaxation of restrictions on semiconductor manufacturing imports.</p>\n<div>\n\n\n<span id=\"more-24821\"></span>\n\n\n</div>\n<p>At first I hadn\u2019t heard signs about this. But now it looks like the nightmare of handing China compute parity on a silver platter is very much in play.</p>\n<p>I disagreed with the decision to sell the Nvidia H20 chips to China, but that chip was and is decidedly behind the frontier and has its disadvantages. Fortunately for us China for an opaque combination of reasons (including that they are not yet \u2018AGI pilled\u2019 and plausibly to save face or as part of negotiations) chose to turn those chips down.</p>\n<p>The B30A would not be like that. It would mean China could match B300-clusters at only a modest additional cost. If Nvidia allocated chips sufficiently aggressively, and there is every reason to suggest they might do so, China could achieve compute parity with the United States in short order, greatly enhancing its models and competitiveness along with its entire economy and ability to fight wars. Chinese company market share and Chinese model market share of inference would skyrocket.</p>\n\n\n<h4 class=\"wp-block-heading\">What It Would Mean To Sell The B30A</h4>\n\n\n<p>I turn over the floor to IFP and Saif Khan.</p>\n<blockquote><p><a href=\"https://x.com/KhanSaifM/status/1982859134530937049\">Saif Khan</a>: Trump is meeting Xi this week for China trade talks. Congress is worried Trump may offer downgraded Blackwell AI chips as a concession. If this happens, it could effectively mean the end of US chip restrictions. Thread with highlights from our new 7,000-word report.</p>\n<p>First &#8211; the reported chip specs: The \u201cB30A\u201d is rumored to be half of NVIDIA\u2019s flagship B300: half the processing performance, half the memory bandwidth, and half the price. This means the B30A\u2019s performance per $ is similar to the B300.</p>\n<p>The B30A would: &#8211; Be far better than any Chinese AI chip &#8211; Have &gt;12x the processing performance of the H20, a chip requiring an export license that has been approved for export in only limited quantities. &#8211; Exceed current export control thresholds by &gt;18x</p>\n<p>At a system level, a B30A-cluster would cost only ~20% more than a B300-cluster, a cost China can subsidize. Chinese AI labs would have access to supercomputers for AI training as powerful as those available to US AI labs.</p>\n<div>\n<figure>\n<div>\n\n\n<figure class=\"wp-block-image\"><img alt=\"\" src=\"https://substackcdn.com/image/fetch/$s_!T3at!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a1cde7a-a85d-4ea3-92df-5b11132cce2e_1008x1214.jpeg\" /></figure>\n\n\n<div></div>\n</div>\n</figure>\n</div>\n</blockquote>\n<p>When you put it that way, selling these chips to China seems like a really crazy thing to do if you care about whether American AI and American AI models are better than their Chinese counterparts, or you care about who has more compute. It would be a complete repudiation of the idea that we should have more and better compute than China.</p>\n<blockquote><p><a href=\"https://x.com/calebwatney/status/1983377394795774075\">Caleb Watney</a>: I would simply not give away the essential bottleneck input for the most important dual-use technology of our era to the US\u2019s primary geopolitical rival.</p>\n<p>Hard to understate what a blow this would be for American leadership in AI if [sales of B30As] happens.</p>\n<p>The US was not selling our supplies of enriched uranium to the Axis powers as we were building the Manhattan Project.</p>\n<p>We could go from a 31x compute lead (in the best case scenario) to actually giving China a 1.1x compute lead if we sell the farm here.</p></blockquote>\n<p><a href=\"https://ifp.org/the-b30a-decision/\">The full report is here.</a></p>\n<blockquote><p>But won\u2019t US chip restrictions cause Huawei to backfill with its own AI chips? No, for both supply and demand reasons.</p>\n<p>On the supply side, China faces bottlenecks due to US/allied chipmaking tool controls. AI chips require two components: processor dies and high-bandwidth memory (HBM). US capacity for processors is 35-38x of China\u2019s (or adjusting for China\u2019s higher mfg errors, 160-170x).</p>\n<p>China fares even worse on HBM, making virtually none this year. Even next year, the US advantage will be 70x.</p>\n<p>As a result, five different analysts find Huawei makes an extremely small number of AI chips. They\u2019ll be at 1-4% of US AI chips this year, and 1-2% in 2026 as the US ramps and Huawei stalls.</p>\n<p>On the demand side, China will likely create artificial demand for inferior Huawei chips. So B30A sales to China will have minimal effect on Huawei market expansion. Instead, sales would supercharge China\u2019s frontier AI &amp; arm Chinese cloud to compete globally with US cloud.</p>\n<p><a href=\"https://x.com/michaelsobolik/status/1983366141620957486\">Michael Sobolik</a> (Senior Fellow, Hudson Institute): Allowing Nvidia to sell modified Blackwell chips to China would unilaterally surrender our greatest AI advantage to the Chinese Communist Party.</p>\n<p>This would be a grave mistake.</p>\n<p>This is why @SenatorBanks\u2019 GAIN AI Act is so important. American chips should go American companies, not China.</p>\n<p>America First!</p></blockquote>\n<p>China is going to maximize production on and progress of Huawei chips no matter what because they (correctly) see it as a dependency issue, and to this end they will ensure that Huawei chips sell out indefinitely, no matter what we do, and the amounts they have is tiny. The idea that they would be meaningfully exporting them any time soon is absurd, unless we are selling them so many B30As they have compute to spare.</p>\n<p>Huawei is going to produce as many chips as possible, at as high quality as possible, from this point forth, which for a while will be \u2018not many.\u2019 Our decision here has at most minimal impact on their decisions and capacity, while potentially handing the future of AI to China by shoring up their one weakness.</p>\n<p>Congress is trying to force through the GAIN Act to try and stop this sort of thing, and despite the political costs of doing so Microsoft sees this as important enough that it has thrown its support behind the GAIN Act. If the White House wants to make the case that the GAIN Act is not necessary, this is the time to make that case.</p>\n\n\n<h4 class=\"wp-block-heading\">A Note On The \u2018Tech Stack\u2019</h4>\n\n\n<p>Even if you believe in the White House\u2019s \u2018tech stack\u2019 theory (which I don\u2019t), and that Huawei is much closer to catching up than they look (which again I don\u2019t), this is still madness, because ultimately under that theory what matters are the models not the chips.</p>\n<p>The the extent anyone was locked into anything, this newly empowered and market ascendant hybrid Nvidia-China stack (whether the main models were DeepSeek, Qwen, Kimi or someone else) would lock people far more into the models than the chips, and the new chips would provide the capacity to serve those customers while starving American companies of compute and also profit margins.</p>\n<p>Then, if and when the Huawei chips are produced in sufficient quantity and quality, a process that would proceed apace regardless, it would be a seamless transfer, that PRC would insist upon, to then gradually transition to serving this via their own chips.</p>\n<p>Again, if anything, importing massive supplies of Nvidia compute would open up the opportunity for far earlier exports of Huawei chips to other nations, if China wanted to pursue that strategy for real, and allows them to offer better products across the board. This is beyond foolish.</p>\n\n\n<h4 class=\"wp-block-heading\">A Note On Trade Imbalances</h4>\n\n\n<p>Is a major driver of potentially selling these chips that they would be exports to China, and assist with balance of trade?</p>\n<p>I don\u2019t know if this is a major driving factor, especially since the chips would be coming from Taiwan and not from America, but if it is then I would note that China will use these chips to avoid importing compute in other ways, and use them to develop and export services. Chips are inputs to other products, not final goods. Selling these chips will not improve our balance of trade on net over the medium term.</p>\n\n\n<h4 class=\"wp-block-heading\">What If They Don\u2019t Want The Chips?</h4>\n\n\n<p>Is it possible that China would not see it this way, and would turn down even these almost state of the art chips? I find this highly unlikely.</p>\n<p>One reason to find it unlikely is to look at Nvidia\u2019s stock over the last day of trading. They are a $5 trillion company, whose stock is up by 9% and whose products sell out, on the chance they\u2019ll be allowed to sell chips to China. The market believes the Chinese would buy big over an extended period.</p>\n<p>But let\u2019s suppose, in theory, that the Chinese care so much about self-sufficiency and resilience or perhaps pride, or perhaps are taking sufficient queues from our willingness to sell it, that they would turn down the B30As.</p>\n<p>In that case, they also don\u2019t care about you offering it to them. It doesn\u2019t get you anything in the negotiation and won\u2019t help you get to a yes. Trump understands this. Never give up anything the other guy doesn\u2019t care about. Even if you don\u2019t face a backlash and you somehow fully \u2018get away with it,\u2019 what was the point?</p>\n<p>This never ends positively for America. Take the chips off the table.</p>\n\n\n<h4 class=\"wp-block-heading\">Nvidia Is Going Great Anyway Thank You</h4>\n\n\n<p>Does Nvidia need this? Nvidia absolutely does not need this. They\u2019re selling out their chips either way and business is going gangbusters across the board.</p>\n<p>Here\u2019s some of what else they announced on Tuesday alone, as the stock passed $200 (it was $139 one year ago, $12.53 post-split five years ago):</p>\n<blockquote><p><a href=\"https://x.com/MorningBrew/status/1983262108281118955\">Morning Brew: Nvidia announcements today: </a></p>\n<p>&#8211; Eli Lilly partnership</p>\n<p>&#8211; Palantir partnership</p>\n<p>&#8211; Hyundai partnership</p>\n<p>&#8211; Samsung partnership</p>\n<p>&#8211; $1 billion investment in Nokia</p>\n<p>&#8211; Uber partnership to build 100,000 robotaxi fleet</p>\n<p>&#8211; $500 billion in expected revenue over through 2026</p>\n<p>&#8211; New system connecting quantum computers to its AI chips</p>\n<p>&#8211; Department of Energy partnership to build 7 new supercomputers</p></blockquote>\n\n\n<h4 class=\"wp-block-heading\">Oh Yeah That Other Thing</h4>\n\n\n<p>Throughout this post, I have made the case against selling B30As to China purely on the basis of the White House\u2019s own publicly stated goals. If what we care about are purely \u2018beating China\u2019 and \u2018winning the AI race\u2019 where that race means ensuring American models retain market share, and ensuring we retain strategic and military and diplomatic advantages, then this would be one of the worst moves one could make. We would be selling out our biggest edge in order to sell a few chips.</p>\n<p>That is not to minimize that there are other important reasons to sell B30As to China, as this would make it far more likely that China is the one to develop AGI or ASI before we do, or that this development is made in a relatively reckless and unsafe fashion. If we sell these chips and China then catches up to us, not only do we risk that it is China that builds it first, it will be built in extreme haste and recklessness no matter who does it. I would expect everyone to collectively lose their minds, and for our negotiating position, should we need to make a deal, to deteriorate dramatically.</p>\n<p>Even if it is merely the newly supercharged Chinese models getting market penetration in America, I would expect everyone to lose their minds from that alone. That leads to very bad political decisions all around.</p>\n<p>That will all be true even if AGI takes 10 years to develop as per Andrej Karpathy.</p>\n<p>But that\u2019s not what is important to the people negotiating and advising on this. To them, let me be clear: Purely in terms of your own views and goals, this is madness.</p>\n<p>&nbsp;</p>\n\n\n<h4 class=\"wp-block-heading\"></h4>"
            ],
            "link": "https://thezvi.wordpress.com/2025/10/29/please-do-not-sell-b30a-chips-to-china/",
            "publishedAt": "2025-10-29",
            "source": "TheZvi",
            "summary": "The Chinese and Americans are currently negotiating a trade deal. There are plenty of ways to generate a win-win deal, and early signs of this are promising on many fronts. Since this will be discussed for real tomorrow as per &#8230; <a href=\"https://thezvi.wordpress.com/2025/10/29/please-do-not-sell-b30a-chips-to-china/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "title": "Please Do Not Sell B30A Chips to China"
        },
        {
            "content": [],
            "link": "https://xkcd.com/3161/",
            "publishedAt": "2025-10-29",
            "source": "XKCD",
            "summary": "<img alt=\"Carefully maneuvering the balloon down a mineshaft in an effort to break the OTHER altitude record\" src=\"https://imgs.xkcd.com/comics/airspeed.png\" title=\"Carefully maneuvering the balloon down a mineshaft in an effort to break the OTHER altitude record\" />",
            "title": "Airspeed"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-10-29"
}