{
    "articles": [
        {
            "content": [
                "<p>Last week, the Swift.org website <a href=\"https://www.swift.org/blog/redesigned-swift-org-is-now-live/\">got a redesign</a>.\nI don\u2019t write much Swift at the moment, but I glanced at the new website to see what\u2019s up and OOH COOL BIRD!</p>\n\n<p>When you load the page, there\u2019s a swooping animation as the bird appears:</p>\n\n\n\n<video class=\"light-video\" poster=\"https://alexwlchan.net/images/2025/swift_bird_light.jpg\" src=\"https://alexwlchan.net/images/2025/swift_bird_light.mp4\"></video>\n<video class=\"dark-video\" poster=\"https://alexwlchan.net/images/2025/swift_bird_dark.jpg\" src=\"https://alexwlchan.net/images/2025/swift_bird_dark.mp4\"></video>\n\n<p>I was curious how the animation worked.\nI thought maybe it was an autoplaying video with no controls, but no, it\u2019s much cooler than that!\nThe animation is implemented entirely in code \u2013 there are a few image assets, and then the motion uses JavaScript and the HTML5 canvas element.</p>\n\n<p>I\u2019ve never done anything with animation, so I started reading the code to understand how it works.\nI\u2019m not going to walk through it in detail, but I do want to show you what I learnt.</p>\n\n<p>All the code from the Swift.org website is <a href=\"https://github.com/swiftlang/swift-org-website/\">open source on GitHub</a>, and the JavaScript file that implements this animation was written by three engineers: <a href=\"https://github.com/federicobucchi\">Federico Bucchi</a>, <a href=\"https://github.com/jesseaborden\">Jesse Borden</a>, and <a href=\"https://github.com/nkrambo\">Nicholas Krambousanos</a>.</p>\n\n<blockquote class=\"toc\">\n  <h3>Table of contents</h3>\n  <ul>\n    <li><a href=\"https://alexwlchan.net/2025/swift-bird-animation/#key_steps\">What are the key steps in this animation?</a></li>\n    <li><a href=\"https://alexwlchan.net/2025/swift-bird-animation/#partial_path\">Only draw part of a curved path with a dash pattern</a></li>\n    <li><a href=\"https://alexwlchan.net/2025/swift-bird-animation/#masking\">Mask an image with a <code>globalCompositeOperation</code></a></li>\n    <li><a href=\"https://alexwlchan.net/2025/swift-bird-animation/#animejs\">Animate the brush stroke with Anime.js</a></li>\n    <li><a href=\"https://alexwlchan.net/2025/swift-bird-animation/#mutationobserver\">Start the animation with a <code>MutationObserver</code></a></li>\n    <li><a href=\"https://alexwlchan.net/2025/swift-bird-animation/#reduce_motion\">Skip the animation if you have <code>(prefers-reduced-motion: reduce)</code></a></li>\n    <li><a href=\"https://alexwlchan.net/2025/swift-bird-animation/#closing_thoughts\">Closing thoughts</a></li>\n  </ul>\n</blockquote>\n\n\n\n<h2 id=\"key_steps\">What are the key steps in this animation?</h2>\n\n<p>Most of the animation is made up of five \u201cswoop\u201d images, which look like strokes of a paintbrush.\nThese were clearly made by an artist in a design app like Photoshop.</p>\n\n<figure>\n  <img alt=\"\" src=\"https://alexwlchan.net/images/2025/orange-swoop-top.png\" />\n  <img alt=\"\" src=\"https://alexwlchan.net/images/2025/purple-swoop.png\" />\n  <img alt=\"\" src=\"https://alexwlchan.net/images/2025/orange-swoop-bottom.png\" />\n</figure>\n\n<p>These images are gradually revealed, so it looks like somebody actually painting with a brush.\nThis is more complex than a simple horizontal wipe, the sort of animation you might do in PowerPoint.\nNotice how, for example, the purple swoop doubles back on itself \u2013 if you did a simple left-to-right wipe, it would start as two separate swoops before joining into one.\nIt would look very strange!</p>\n\n<p>Each swoop is animated in the same way, so let\u2019s focus on the purple one, just because it\u2019s the most visually interesting.</p>\n\n<p>The animation is applying a mask to the underlying image, and the mask gradually expands to show more and more of the image.\nThe mask matches the general shape of the brush stroke, so as it expands, it reveals more of the image.\nI wrote about <a href=\"https://alexwlchan.net/2021/inner-outer-strokes-svg/\">masking with SVG</a> four years ago, and the principle is similar here \u2013 but the Swift.org animation uses HTML5 canvas, not SVG.</p>\n\n<p>The best way to explain this is with a quick demo: as you drag the slider back and forth, you can see the mask get longer and shorter, and that\u2019s reflected in the final image.</p>\n\n\n\n\n\n\n\n<blockquote class=\"light_block\">\n  <div class=\"demo\">\n    <div class=\"cell\">\n      <img alt=\"\" src=\"https://alexwlchan.net/images/2025/purple-swoop.png\" />\n      <div class=\"label\">original image</div>\n    </div>\n    <div class=\"operator\">+</div>\n    <div class=\"cell\">\n      <canvas height=\"961\" id=\"plain-swoop\" width=\"1116\"></canvas>\n      <div class=\"label\">mask</div>\n    </div>\n    <div class=\"operator\">\u2192</div>\n    <div class=\"cell\">\n      <canvas height=\"961\" id=\"purple-swoop\" width=\"1116\"></canvas>\n      <div class=\"label\">final image</div>\n    </div>\n  </div>\n  <div>\n    <em>animation progress:</em><br />\n    <input max=\"1\" min=\"0\" step=\"0.01\" type=\"range\" value=\"0.5\" />\n  </div>\n</blockquote>\n\n<p>We can break this down into a couple of steps:</p>\n\n<ul>\n  <li>Only draw part of a curved path (drawing the mask)</li>\n  <li>Combine the partially-drawn path with the original image (applying the mask)</li>\n  <li>Gradually increase the amount of the path that we draw (animating the path)</li>\n  <li>Start the animation when the page loads</li>\n</ul>\n\n<p>Let\u2019s go through each of these in turn.</p>\n\n<h2 id=\"partial_path\">Only draw part of a curved path with a dash pattern</h2>\n\n<p>Alongside the graphical image of a brush stroke, the artist supplied an SVG path for the mask:</p>\n<pre><code>M-34 860C-34 860 42 912 102 854C162 796 98 658 50 556C2 454 18 48 142 88C272 130 290 678 432 682C574 686 434 102 794 90C1009 83 1028 280 1028 280\n</code></pre>\n<p>If you\u2019re not familiar with SVG path syntax, I really recommend Mathieu Dutour\u2019s excellent <a href=\"https://svg-path-visualizer.netlify.app/#M-34%20860C-34%20860%2042%20912%20102%20854C162%20796%2098%20658%2050%20556C2%20454%2018%2048%20142%2088C272%20130%20290%20678%20432%20682C574%20686%20434%20102%20794%2090C1009%2083%201028%20280%201028%20280\">SVG Path Visualizer tool</a>.\nYou give it a path definition, and it gives you a step-by-step explanation of what it\u2019s doing, and you can see where each part of the path appears in the final shape.</p>\n\n<p><a href=\"https://svg-path-visualizer.netlify.app/#M-34%20860C-34%20860%2042%20912%20102%20854C162%20796%2098%20658%2050%20556C2%20454%2018%2048%20142%2088C272%20130%20290%20678%20432%20682C574%20686%20434%20102%20794%2090C1009%2083%201028%20280%201028%20280\">  <source type=\"image/png\" /> <source media=\"(prefers-color-scheme: dark)\" type=\"image/png\" /> <img alt=\"Screenshot of the path visualizer, with a breakdown of how the path works and an annotated swoop that matches the purple swoop.\" class=\"screenshot dark_aware\" src=\"https://alexwlchan.net/images/2025/svg_pathviz_1x.png\" width=\"600\" />  </a></p>\n\n<p>We can draw this path on an HTML5 canvas like so:</p>\n<pre><code><span class=\"kd\">const</span> <span class=\"nx\">canvas</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">canvas</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nf\">getContext</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">2d</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">lineWidth</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">lineCap</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">round</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">strokeStyle</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Path2D</span><span class=\"p\">(</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">M-34 860C-34 860 42 912 102 854C162 796 98 658 50 556C2 454 18 48 142 88C272 130 290 678 432 682C574 686 434 102 794 90C1009 83 1028 280 1028 280</span><span class=\"dl\">\"</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">);</span>\n</code></pre>\n<p>The way Swift.org draws a partial path is a really neat trick: they\u2019re using a line dash pattern with a variable offset.\nIt took me a moment to figure out what their code was doing, but then it all clicked into place.</p>\n\n<p>First they set a line dash pattern using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\"><code>setLineDash()</code></a>, which specifies alternating lengths of lines and gaps to draw the line.\nHere\u2019s a quick demo:</p>\n\n\n\n<blockquote class=\"light_block\" id=\"lineDashDemo\">\n  <div>\n<pre><code><span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">setLineDash</span><span class=\"p\">([<span class=\"mi\">100</span>])</span></code></pre>\n<input max=\"3000\" min=\"0\" step=\"1\" type=\"range\" value=\"100\" />\n  </div>\n\n  <div class=\"cell\">\n    <canvas height=\"961\" width=\"1116\"></canvas>\n  </div>\n</blockquote>\n\n\n\n<p>The path starts in the lower left-hand corner, and notice how it always starts with a complete dash, not a gap.\nYou can change this by setting the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset\"><code>lineDashOffset</code> property</a>, which causes the patern to start on a gap, or halfway through a dash.\nHere\u2019s a demo where you can set both variables at once:</p>\n\n<blockquote class=\"light_block\" id=\"lineDashOffsetDemo\">\n  <div>\n    <div class=\"lineDash\">\n<pre><code><span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">setLineDash</span><span class=\"p\">([<span class=\"mi\">75</span>])</span></code></pre>\n<input max=\"3000\" min=\"0\" step=\"1\" type=\"range\" value=\"75\" />\n    </div>\n\n    <div class=\"lineDashOffset\">\n<pre><code><span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">lineDashOffset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span></code></pre>\n<input max=\"3000\" min=\"-3000\" step=\"1\" type=\"range\" value=\"0\" />\n    </div>\n  </div>\n\n  <div class=\"cell\">\n    <canvas height=\"961\" width=\"1116\"></canvas>\n  </div>\n</blockquote>\n\n\n\n<p>I find the behaviour of <code>lineDashOffset</code> a bit counter-intuitive: as I increase the offset, it looks like the path is moving backward.\nI was expecting increasing the offset to increase the start of the first dash, so the line would move in the other direction.\nI\u2019m sure it makes sense if you have the right mental model, but I\u2019m not sure what it is.</p>\n\n<p>If you play around with these two variables, you might start to see how you can animate the path as if it\u2019s being drawn from the start.\nHere are the steps:</p>\n\n<ol>\n  <li>\n    <p>Set the dash length to the exact length of the path.\nThis means every dash and every gap is the same length as the entire path.</p>\n\n    <p>(The length of the purple swoop path is 2776, a number I got from the Swift.org source code.\nThis must have been calculated with an external tool; I can\u2019t find a way to calculate this length in a canvas.)</p>\n  </li>\n  <li>\n    <p>Set the dash offset to the exact length of the path.\nThis means the entire path is just a gap, which makes it look like there\u2019s nothing there.</p>\n  </li>\n  <li>\n    <p>Gradually reduce the dash offset to zero.\nA dash becomes visible at the beginning of the path, and the closer the offset gets to zero, the more of that dash is visible.\nEventually it fills the entire path.</p>\n  </li>\n</ol>\n\n<p>Here\u2019s one more demo, where I\u2019ve set up the line dash pattern, and you can adjust the progress.\nNotice how the line gradually appears:</p>\n\n<blockquote class=\"light_block\" id=\"progressDemo\">\n  <div>\n<pre><code><span class=\"kd\">const</span> <span class=\"nx\">progress</span> <span class=\"o\">=</span> <span class=\"mi\">0.0</span><span class=\"p\">;</span></code></pre>\n<input max=\"1.0\" min=\"0.0\" step=\"0.01\" type=\"range\" value=\"0.0\" />\n\n    <pre><code><span class=\"kd\">const</span> <span class=\"nx\">pathLength</span> <span class=\"o\">=</span> <span class=\"mi\">2776</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">setLineDash</span><span class=\"p\">([</span><span class=\"nx\">pathLength</span><span class=\"p\">]);</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">lineDashOffset</span> <span class=\"o\">=</span> <span class=\"nx\">pathLength</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"nx\">progress</span><span class=\"p\">);</span></code></pre>\n</div>\n\n  <div class=\"cell\">\n    <canvas height=\"961\" width=\"1116\"></canvas>\n  </div>\n</blockquote>\n\n\n\n<p>Now we have a way to draw part of a path, and as we advance the progress, it looks it\u2019s being drawn with a brush.\nThe real code has a couple of extra styles \u2013 in particular, it sets a stroke width and a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\">line cap</a> \u2013 but it\u2019s the way the animation uses the dash pattern that really stood out to me.</p>\n\n<p>Once we have our path, how do we use it to mask an image?</p>\n\n<h2 id=\"masking\">Mask an image with a <code>globalCompositeOperation</code>\n</h2>\n\n<p>The masking uses a property of HTML5 canvas called <code>globalCompositeOperation</code>.\nIf you\u2019ve already drawn some shapes on a canvas, you can control how new shapes will appear on top of them \u2013 for example, which one appears on top, or whether to clip one to fit inside the other.</p>\n\n<p>I\u2019m familiar with the basic idea \u2013 I wrote an article about <a href=\"https://alexwlchan.net/2021/inner-outer-strokes-svg/\">clips and masks in SVG</a> in 2021 that I still look back on fondly \u2013 but I find this feature a bit confusing, especially the terminology.\nRather than talking about clips or masks, this property is defined using <em>sources</em> (shapes you\u2019re about to draw on the canvas) and <em>destinations</em> (shapes that are already on the canvas).\nI\u2019m sure that naming makes sense to somebody, but it\u2019s not immediately obvious to me.</p>\n\n<p>First we need to load the bitmap image which will be our \u201csource\u201d.\nWe can create a new <code>img</code> element with <code>document.createElement(\"img\")</code>, then load the image by setting the <code>src</code> attribute:</p>\n<pre><code><span class=\"kd\">const</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">img</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">;</span>\n</code></pre>\n<p>In the Swift.org animation, the value of <code>globalCompositeOperation</code> is <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation#source-in\"><code>source-in</code></a> \u2013 the new shape is only drawn where the new shape and the old shape overlap, and the old shape becomes transparent.</p>\n\n<p>Here\u2019s the code:</p>\n<pre><code><span class=\"c1\">// The thick black stroke is the \"destination\"</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// The \"source-in\" mode means only the part of the source that is</span>\n<span class=\"c1\">// inside the destination will be shown, and the destination will</span>\n<span class=\"c1\">// be transparent.</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">globalCompositeOperation</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">source-in</span><span class=\"dl\">'</span>\n\n<span class=\"c1\">// The bitmap image is the \"source\"</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">drawImage</span><span class=\"p\">(</span><span class=\"nx\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n<p>and here\u2019s what the result looks like, when the animation is halfway complete:</p>\n\n<blockquote class=\"light_block\">\n  <div class=\"demo\">\n    <div class=\"cell\">\n      <canvas height=\"961\" id=\"destination\" width=\"1116\"></canvas>\n      <div class=\"label\">destination</div>\n    </div>\n    <div class=\"operator\">+</div>\n    <div class=\"cell\">\n      <img alt=\"\" src=\"https://alexwlchan.net/images/2025/purple-swoop.png\" />\n      <div class=\"label\">source</div>\n    </div>\n    <div class=\"operator\">\u2192</div>\n    <div class=\"cell\">\n      <canvas height=\"961\" id=\"globalCompositeOperationDemoResult\" width=\"1116\"></canvas>\n      <div class=\"label\">final image</div>\n    </div>\n  </div>\n</blockquote>\n\n<p>There are many different composite operations, including ones that combine colours or blend pixels from both shapes.\nIf you\u2019re interested, you can read the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\">docs on MDN</a>, which includes a demo of all the different blending modes.</p>\n\n<p>This is a bit of code where I can definitely understand what it does when I read it, but I wouldn\u2019t feel confident writing something like this myself.\nIt\u2019s too complex a feature to wrap my head around with a single example, and the other examples I found are too simple and unmotivating.\n(Many sites use the example of a solid red circle and a solid blue rectangle, which I find completely unhelpful because I can produce the final result in a dozen other ways.\nWhat\u2019s the real use case for this property?\nWhat can I only do if I use <code>globalCompositeOperation</code>?)</p>\n\n<p>Then again, perhaps I\u2019m not the target audience for this feature.\nI mostly do simple illustrations, and this is a more powerful graphics operation.\nI\u2019m glad to know it\u2019s there, even if I\u2019m not sure when I\u2019ll use it.</p>\n\n<p>Now we can draw a partial stroke and use it as a mask, how do we animate it?</p>\n\n\n\n<h2 id=\"animejs\">Animate the brush stroke with Anime.js</h2>\n\n<p>Before I started reading the code in detail, I tried to work out how I might create an animation like this myself.</p>\n\n<p>I haven\u2019t done much animation, so the only thing I could think of was JavaScript\u2019s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout\"><code>setTimeout()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval\"><code>setInterval()</code></a> functions.\nUsing those repeatedly to update a progress value would gradually draw the stroke.\nI tried it, and that does work!\nBut I can think of some good reasons why it\u2019s not what\u2019s used for the animation on Swift.org.</p>\n\n<p>The timing of <code>setTimeout()</code> and <code>setInterval()</code> isn\u2019t guaranteed \u2013 the browser may <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout#reasons_for_delays_longer_than_specified\">delay longer than expected</a> if the system is under load or you\u2019re updating too often.\nThat could make the animation jerky or stuttery.\nEven if the delays fire correctly, it could still look a bit janky \u2013 you\u2019re stepping between a series of discrete frames, rather than smoothly animating a shape.\nIf there\u2019s too much of a change between each frame, it would ruin the illusion.</p>\n\n<p>Swift.org is using Julian Garnier\u2019s <a href=\"https://animejs.com/\">Anime.js animation library</a>.\nUnder the hood, this library uses web technologies like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame\"><code>requestAnimationFrame()</code></a> and <a href=\"https://animejs.com/documentation/web-animation-api/hardware-accelerated-animations/\">hardware acceleration</a> \u2013 stuff I\u2019ve heard of, but never used.\nI assume these browser features are optimised for doing smooth and efficient animations \u2013 for example, they must sync to the screen refresh rate, only drawing frames as necessary, whereas using <code>setInterval()</code> might draw lots of unused frames and waste CPU.</p>\n\n<p>Anime.js has a lot of different options, but the way Swift.org uses it is fairly straightforward.</p>\n\n<p>First it creates an object to track the state of the animation:</p>\n<pre><code><span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">progress</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n</code></pre>\n<p>Then there\u2019s a function that redraws the swoop based on the current progress.\nIt clears the canvas, then redraws the partial path and the mask:</p>\n<pre><code><span class=\"kd\">function</span> <span class=\"nf\">updateSwoop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Clear canvas before next draw</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">clearRect</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">height</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Draw the part of the stroke that we want to display</span>\n  <span class=\"c1\">// at this point in the animation</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">lineDashOffset</span> <span class=\"o\">=</span> <span class=\"nx\">swoop</span><span class=\"p\">.</span><span class=\"nx\">pathLength</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">progress</span><span class=\"p\">);</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nc\">Path2D</span><span class=\"p\">(</span><span class=\"nx\">swoop</span><span class=\"p\">.</span><span class=\"nx\">path</span><span class=\"p\">));</span>\n\n  <span class=\"c1\">// Draw the image, using \"source-in\" to apply a mask</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">globalCompositeOperation</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">source-in</span><span class=\"dl\">'</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nf\">drawImage</span><span class=\"p\">(</span><span class=\"nx\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Reset to default for our next stroke paint</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">globalCompositeOperation</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">source-out</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<p>Finally, it creates <a href=\"https://animejs.com/documentation/timeline\">a\u00a0timeline</a>, and <a href=\"https://animejs.com/documentation/timeline/timeline-methods/add\">adds an animation</a> for each swoop.</p>\n\n<p>When it adds the animation, it passes five things:</p>\n\n<ul>\n  <li>the <code>state</code> object</li>\n  <li>the desired end state (<code>progress: 1</code>)</li>\n  <li>the duration of the animation (1000ms = 1s)</li>\n  <li>an <a href=\"https://animejs.com/documentation/animation/tween-parameters/ease\">easing function</a>; in this case <code>in(1.8)</code> means the animation will start slowly and gradually speed up</li>\n  <li>the <code>updateSwoop</code> function as a callback for every time the animation updates</li>\n</ul>\n<pre><code><span class=\"kd\">const</span> <span class=\"nx\">tl</span> <span class=\"o\">=</span> <span class=\"nx\">anime</span><span class=\"p\">.</span><span class=\"nf\">createTimeline</span><span class=\"p\">()</span>\n\n<span class=\"nx\">tl</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span>\n  <span class=\"nx\">state</span><span class=\"p\">,</span>\n  <span class=\"p\">{</span> <span class=\"na\">progress</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">duration</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"na\">ease</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">in(1.8)</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">onUpdate</span><span class=\"p\">:</span> <span class=\"nx\">updateSwoop</span> <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre>\n<p>You may have wondered why the <code>state</code> is an object, and not a single value like <code>const progress = 0</code>.\nIf we passed a numeric value to <code>tl.add()</code>, JavaScript would pass it by value, and any changes wouldn\u2019t be visible to the <code>updateSwoop()</code> function.\nBy wrapping the <code>progress</code> value in an object, JavaScript will pass by reference instead, so changes made inside <code>tl.add()</code> will be visible when <code>updateSwoop()</code> is called.</p>\n\n<p>Now we can animate our swoop, as if it was a brush stroke.\nThere\u2019s one final piece: how do we start the animation?</p>\n\n<h2 id=\"mutationobserver\">Start the animation with a <code>MutationObserver</code>\n</h2>\n\n<p>If I want to do something when a page loads, I normally watch for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event\"><code>DOMContentLoaded</code> event</a>, for example:</p>\n<pre><code><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">DOMContentLoaded</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">runAnimation</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre>\n<p>But the Swift.org animation has one more thing to teach me, because it does something different.</p>\n\n<p>In the HTML, it has a <code>&lt;div&gt;</code> that wraps the canvas elements where it draws all the animations:</p>\n<pre><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"animation-container\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;canvas</span> <span class=\"na\">id=</span><span class=\"s\">\"purple-swoop\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1248\"</span> <span class=\"na\">height=</span><span class=\"s\">\"1116\"</span><span class=\"nt\">&gt;&lt;/canvas&gt;</span> <span class=\"nt\">&lt;canvas</span> <span class=\"na\">id=</span><span class=\"s\">\"purple-swoop\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1248\"</span> <span class=\"na\">height=</span><span class=\"s\">\"1116\"</span><span class=\"nt\">&gt;&lt;/canvas&gt;</span>\n    <span class=\"nt\">&lt;canvas</span> <span class=\"na\">id=</span><span class=\"s\">\"white-swoop-1\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1248\"</span> <span class=\"na\">height=</span><span class=\"s\">\"1116\"</span><span class=\"nt\">&gt;&lt;/canvas&gt;</span>\n    <span class=\"nt\">&lt;canvas</span> <span class=\"na\">id=</span><span class=\"s\">\"orange-swoop-top\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1248\"</span> <span class=\"na\">height=</span><span class=\"s\">\"1116\"</span><span class=\"nt\">&gt;&lt;/canvas&gt;</span>\n    <span class=\"nt\">&lt;canvas</span> <span class=\"na\">id=</span><span class=\"s\">\"orange-swoop-bottom\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1248\"</span> <span class=\"na\">height=</span><span class=\"s\">\"1116\"</span><span class=\"nt\">&gt;&lt;/canvas&gt;</span>\n    <span class=\"nt\">&lt;canvas</span> <span class=\"na\">id=</span><span class=\"s\">\"white-swoop-2\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1248\"</span> <span class=\"na\">height=</span><span class=\"s\">\"1116\"</span><span class=\"nt\">&gt;&lt;/canvas&gt;</span>\n    <span class=\"nt\">&lt;canvas</span> <span class=\"na\">id=</span><span class=\"s\">\"bird\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1248\"</span> <span class=\"na\">height=</span><span class=\"s\">\"1116\"</span><span class=\"nt\">&gt;&lt;/canvas&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n<p>Then it uses a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/MutationObserver\"><code>MutationObserver</code></a> to watch the entire page for changes, and start the animation once it finds this wrapper <code>&lt;div&gt;</code>:</p>\n<pre><code><span class=\"c1\">// Start animation when container is mounted</span>\n<span class=\"kd\">const</span> <span class=\"nx\">observer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MutationObserver</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">animContainer</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.animation-container</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">animContainer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">observer</span><span class=\"p\">.</span><span class=\"nf\">disconnect</span><span class=\"p\">()</span>\n    <span class=\"nf\">heroAnimation</span><span class=\"p\">(</span><span class=\"nx\">animContainer</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">observer</span><span class=\"p\">.</span><span class=\"nf\">observe</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">childList</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">subtree</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</code></pre>\n<p>It achieves the same effect as watching for <code>DOMContentLoaded</code>, but in a different way.</p>\n\n<p>I don\u2019t think there\u2019s much difference between <code>DOMContentLoaded</code> and <code>MutationObserver</code> in this particular case, but I can see that <code>MutationObserver</code> is more flexible for the general case.\nYou can target a more precise element than \u201cthe entire document\u201d, and you can look for changes beyond just the initial load.</p>\n\n<p>I suspect the <code>MutationObserver</code> approach may also be slightly faster \u2013 I added a bit of console logging, and if you don\u2019t disconnect the observer, it gets called three times when loading the Swift.org homepage.\nIf the animation container exists on the first call, you can start the animation immediately, rather than waiting for the rest of the DOM to load.\nI\u2019m not sure if that\u2019s a perceptible difference though, except for very large and complex web pages.</p>\n\n<p>This step completes the animation.\nWhen the page loads, we can start an animation that draws the brush stroke as a path.\nAs the animation continues, we draw more and more of that path, and the path is used as a mask for a bitmap image, gradually unveiling the purple swoop.</p>\n\n<h2 id=\"reduce_motion\">Skip the animation if you have <code>(prefers-reduced-motion: reduce)</code>\n</h2>\n\n<p>There\u2019s one other aspect of the animation on Swift.org that I want to highlight.\nAt the beginning of the animation sequence, it checks to see if you have the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\">\u201cprefers reduced motion\u201d preference</a>.\nThis is an accessibility setting that allows somebody to minimise non-essential animations.</p>\n<pre><code><span class=\"kd\">const</span> <span class=\"nx\">isReduceMotionEnabled</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nf\">matchMedia</span><span class=\"p\">(</span>\n  <span class=\"dl\">'</span><span class=\"s1\">(prefers-reduced-motion: reduce)</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"p\">).</span><span class=\"nx\">matches</span>\n</code></pre>\n<p>Further down, the code checks for this preference, and if it\u2019s set, it skips the animation and just renders the final image.</p>\n\n<p>I\u2019m already familiar with this preference and I use it on a number of websites. sites, but it\u2019s still cool to see.</p>\n\n<hr />\n\n<h2 id=\"closing_thoughts\">Closing thoughts</h2>\n\n<p>Thanks again to the three people who wrote this animation code: Federico Bucchi, Jesse Borden, and Nicholas Krambousanos.\nThey wrote some <a href=\"https://github.com/swiftlang/swift-org-website/blob/10539c474bea9a084bd90daac387fde6b62bd0c4/assets/javascripts/new-javascripts/hero.js\">very readable JavaScript</a>, so I could understand how it worked.\nThe ability to \u201cview source\u201d and see how a page works is an amazing feature of the web, and finding the commit history as open source is the cherry on the cake.</p>\n\n<p>I really enjoyed writing this post, and getting to understand how this animation works.\nI don\u2019t know that I could create something similar \u2013 in particular, I don\u2019t have the graphics skills to create the bitmap images of brush strokes \u2013 but I\u2019d feel a lot more confident trying than I would before.\nI\u2019ve learned a lot from reading this code, and I hope you\u2019ve learned something as well.</p>\n\n\n    <p>[If the formatting of this post looks odd in your feed reader, <a href=\"https://alexwlchan.net/2025/swift-bird-animation/\">visit the original article</a>]</p>"
            ],
            "link": "https://alexwlchan.net/2025/swift-bird-animation/?utm_source=rss",
            "publishedAt": "2025-06-11",
            "source": "Alex Chan",
            "summary": "The Swift.org website got a redesign, including an animation of a swooping bird, and I read the source code to understand how it works.",
            "title": "Recreating the bird animation from Swift.org"
        },
        {
            "content": [],
            "link": "https://putanumonit.com/2025/06/11/jacob-will-work-for-you/",
            "publishedAt": "2025-06-11",
            "source": "Putanumonit",
            "summary": "I grew as a generalist from a small office to a 10-figure acquisition. Hire me and we'll do it again.",
            "title": "Jacob Will Work For You"
        },
        {
            "content": [],
            "link": "https://robertheaton.com/diceomatic/",
            "publishedAt": "2025-06-11",
            "source": "Robert Heaton",
            "summary": "<p>My five year-old is into football. Really, really, won\u2019t-sit-down, won\u2019t-let-anyone-else-sit-down into football. My wife and I spend every free minute taking half-hearted shots on goal; feigning agony as a daring counterattack puts us 23-0 down; and answering quiz questions about which hospital Harry Kane was born in.</p> <p>To buy us a minute to breathe and shower, I invented a game called <a href=\"https://docs.google.com/document/d/1rLwTG3LiXmAVnodnl0yjB4a6idm_zt21jFutJeNiX14/edit\">\u201cDice Football\u201d</a>. In Dice Football you roll two 6-sided dice, add up the numbers, then consult a table to see what happens next. When the match is over you enter the results in <a href=\"https://docs.google.com/spreadsheets/d/15mSKIDJ-Kh45pbUrwZ06DyPW7EcdG0dglga6R1CKTTM/edit?gid=0#gid=0\">your tournament tracker</a>. Then you start the next match. Hopefully you don\u2019t get bored for at least an hour. Dice Football is a single-player game, which means that no one has to win or lose, and that mummy and daddy get to do something else for a bit.</p> <p><img alt=\"image\" src=\"https://robertheaton.com/images/sumchef/dice-football.png\" /></p> <p><em>(Here\u2019s <a href=\"https://docs.google.com/document/d/1rLwTG3LiXmAVnodnl0yjB4a6idm_zt21jFutJeNiX14/edit\">a printable rules sheet for Dice Football</a>, and one for <a href=\"https://docs.google.com/spreadsheets/d/15mSKIDJ-Kh45pbUrwZ06DyPW7EcdG0dglga6R1CKTTM/edit?gid=0#gid=0\">the tournament tracker</a>.)</em></p> <p>Dice Football was a surprise, obsessive, breakout hit. As long as we kept our son fed with pens and exercise books, we could have all the showers we wanted. Dice Football was also a gateway into",
            "title": "diceomatic: a DSL for making children's dice games"
        },
        {
            "content": [
                "<p>People don&#8217;t like nitpickers. &#8220;He <em>literally </em>did the WELL AKTUALLY!&#8221; If you say Joe Criminal committed ten murders and five rapes, and I object that it was actually only six murders and two rapes, then why am I &#8220;defending&#8221; Joe Criminal?</p><p>Because if it&#8217;s worth your time to lie, it&#8217;s worth my time to correct it.</p><p>If one side lies to make all of their arguments sound 5% stronger, then over long enough it adds up. Unless they want to be left behind, the other side has to make all of their arguments 5% stronger too. Then there&#8217;s a new baseline - why not 10%? Why not 20%? This mechanism might sound theoretical when I describe it this way, but go to any space where corrections are discouraged, and you will see exactly this.</p><p>I hate to rag on wokeness further in the Year Of Our Lord 2025, but they&#8217;re still the best example I&#8217;ve ever seen. You weren&#8217;t supposed to defend racists. And so:</p><p>&#8220;Hey everyone, Joe Target shouted a racial slur and punched a black guy in the face because he hates minorities so much! This proves that we need hate crime legislation immediately!&#8221;</p><p><em>&#8220;But if you read the article, you&#8217;ll see they were both really drunk, the black guy insulted Joe&#8217;s wife, it was an ordinary bar fight, and there&#8217;s no reason to think race was the precipitating factor&#8221;.</em> </p><p>\"So you&#8217;re saying it&#8217;s okay and not racist at all to shout a slur at a black person and punch him in the face?&#8221;</p><p><em>&#8220;I was just saying that it didn&#8217;t seem to immediately be motivated by racism, and should probably be filed under other social problems like drunkenness and violence.&#8221;</em></p><p>\"So are you denying that racism exists and causes harm?&#8221;</p><p>Well, no. But if your only real point is that racism exists and causes harm, you could have said that racism exists and causes harm, and that wouldn&#8217;t have been a lie. Instead you chose to talk about how Joe Target punched the black guy because of racism. Presumably you thought that point made your argument stronger than it would have been if you&#8217;d just said that racism existed - maybe 5% stronger. If that&#8217;s true, then that extra 5% argument strength is illegitimate, and it&#8217;s every honest person&#8217;s duty to take it away from you. If you&#8217;re allowed to have it, then eventually we escalate all the way to the point we actually escalated to, where people have said in all seriousness that Trump might try to put all minorities in camps and murder them.</p><p>(sorry - I&#8217;ve genuinely heard people say he was going to put minorities in camps, but I&#8217;m not sure they specified <em>all</em> minorities, and I don&#8217;t think they ever said they would get murdered there. Would you have let me get away with that exaggeration?)</p><p>I think &#8220;okay, but everyone knows that something vaguely similar is true&#8221; is an especially dangerous case of this. </p><p>Maybe I don&#8217;t agree that the similar thing is true.</p><p>Maybe the similar thing is true, but it&#8217;s got some big problem (eg is impossible in practice, costs too much, would have too many side effects) that the original catchy example doesn&#8217;t.</p><p>Maybe the similar thing isn&#8217;t really similar along the axis that matters most.</p><p>If, instead of saying the true similar thing, you say a different false thing, then that denies me the opportunity to examine the true similar thing in detail, ask you questions about it, or challenge it directly. Which was plausibly your point all along, because <em>there must have been some reason it was worth your time to lie.</em></p><p>Some caveats:</p><ul><li><p>You should obviously remain kind and sensitive in contexts where that&#8217;s relevant. If Joe Criminal was 5% less psychopathic than the rumors say, you can correct some unrelated tough-on-crime advocate about it, but I wouldn&#8217;t bother his victims.</p></li></ul><ul><li><p>I&#8217;m sympathetic to making statements that are not-technically-true for didactic, and artistic reasons, eg readability. &#8220;The sun is a mass of incandescent gas&#8221; is fine, even if it&#8217;s technically some sort of plasma. Or if it&#8217;s not fine, you&#8217;ll need some justification for nitpicking other than the one here.</p></li><li><p>I think concept handles like &#8220;frog-boiling&#8221; are okay - this is a useful thing to be able to refer to, even if AFAIK you can&#8217;t boil frogs like this in real life. But if someone argues that you&#8217;re importing some fake assumption by using the term, consider listening - often a mistake in symbolism mirrors (or covers!) a real mistake in substance.</p></li><li><p>I&#8217;m not saying you&#8217;re required to correct every little trivial falsehood. Nobody has time for that. But I think if you <em>want</em> to correct it, people don&#8217;t get to call you &#8220;cringe&#8221; or describe it as &#8220;well acktually&#8221;. What could be more cringe than telling small lies, then bullying anyone who tries to correct you, in the hopes that future audience will be too cowed to speak up?</p></li></ul>"
            ],
            "link": "https://www.astralcodexten.com/p/if-its-worth-your-time-to-lie-its",
            "publishedAt": "2025-06-11",
            "source": "SlateStarCodex",
            "summary": "<p>People don&#8217;t like nitpickers. &#8220;He <em>literally </em>did the WELL AKTUALLY!&#8221; If you say Joe Criminal committed ten murders and five rapes, and I object that it was actually only six murders and two rapes, then why am I &#8220;defending&#8221; Joe Criminal?</p><p>Because if it&#8217;s worth your time to lie, it&#8217;s worth my time to correct it.</p><p>If one side lies to make all of their arguments sound 5% stronger, then over long enough it adds up. Unless they want to be left behind, the other side has to make all of their arguments 5% stronger too. Then there&#8217;s a new baseline - why not 10%? Why not 20%? This mechanism might sound theoretical when I describe it this way, but go to any space where corrections are discouraged, and you will see exactly this.</p><p>I hate to rag on wokeness further in the Year Of Our Lord 2025, but they&#8217;re still the best example I&#8217;ve ever seen. You weren&#8217;t supposed to defend racists. And so:</p><p>&#8220;Hey everyone, Joe Target shouted a racial slur and punched a black guy in the face because he hates minorities so much! This proves that we need hate crime legislation immediately!&#8221;</p><p><em>&#8220;But if you read the article, you&#8217;ll see they",
            "title": "If It's Worth Your Time To Lie, It's Worth My Time To Correct It"
        },
        {
            "content": [],
            "link": "https://xkcd.com/3101/",
            "publishedAt": "2025-06-11",
            "source": "XKCD",
            "summary": "<img alt=\"If you think curiosity without rigor is bad, you should see rigor without curiosity.\" src=\"https://imgs.xkcd.com/comics/good_science.png\" title=\"If you think curiosity without rigor is bad, you should see rigor without curiosity.\" />",
            "title": "Good Science"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-06-11"
}