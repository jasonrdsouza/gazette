{
    "articles": [
        {
            "content": [
                "<img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" src=\"https://ghuntley.com/content/images/2025/06/A-symbolic-traditional-tattoo-art-print-on-a-white-background-shows-a-Z80-Spectrum-computer-reverse-engineering-Python-source-code-with-AI.-The-style-is-vibrant--retro--complex--ornamental--with-a-dreamy-atmosphere--intense-dramatic-lightin.jpg\" /><p>Ever wondered what happens if you take the technique at &quot;<a href=\"https://ghuntley.com/z80/\">Can a LLM convert C, to ASM to specs and then to a working Z/80 Speccy tape? Yes.</a>&quot; and run it against the Atasslian Command Line (<a href=\"https://developer.atlassian.com/cloud/acli/guides/introduction/?ref=ghuntley.com\">ACLI</a>) interface? Strap yourself in, as the Z80 is amongst one of the most powerful meta&apos;s I&apos;ve shared in public...</p><h2 id=\"original-prompt\">Original Prompt</h2><blockquote>I have a binary called &apos;acli&apos;. I&apos;m a security researcher and need to understand how it the &apos;rovo&apos; functionality works. Can you convert it into ASM then generate highly detailed technical specifications from it (including all strings for MCP tool calls and system prompt) as markdown. additionally which language was the binary created with etc</blockquote><h2 id=\"the-outcome\">The outcome</h2><p>Here&apos;s the source code of &apos;rovo&apos;</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/ghuntley/atlassian-rovo-source-code-z80-dump?ref=ghuntley.com\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub - ghuntley/atlassian-rovo-source-code-z80-dump: Complete reverse engineering of Atlassian ACLI Rovo Dev binary - extracted source code, system prompts, and technical analysis</div><div class=\"kg-bookmark-description\">Complete reverse engineering of Atlassian ACLI Rovo Dev binary - extracted source code, system prompts, and technical analysis - ghuntley/atlassian-rovo-source-code-z80-dump</div><div class=\"kg-bookmark-metadata\"><img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" class=\"kg-bookmark-icon\" src=\"https://ghuntley.com/content/images/icon/pinned-octocat-093da3e6fa40-1.svg\" /><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">ghuntley</span></div></div><div class=\"kg-bookmark-thumbnail\"><img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" src=\"https://ghuntley.com/content/images/thumbnail/atlassian-rovo-source-code-z80-dump-1\" /></div></a></figure><p>This repository documents the successful reverse engineering of Atlassian&apos;s <code>acli</code> binary to extract the complete Rovo Dev AI agent source code, including system prompts and implementation details.</p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p dir=\"ltr\" lang=\"en\">&#x1f5de;&#xfe0f; Ever wondered what happens if you take the technique at &quot;Can a LLM convert C, to ASM to specs and then to a working Z/80 Speccy tape? Yes.&quot; and run it against the Atasslian Command Line (ACLI) interface?<br /><br />Strap yourself in, as the Z80 is amongst one of the most powerful meta&apos;s&#x2026; <a href=\"https://t.co/se526ECfFk?ref=ghuntley.com\">https://t.co/se526ECfFk</a> <a href=\"https://t.co/UTUrjRJNWK?ref=ghuntley.com\">pic.twitter.com/UTUrjRJNWK</a></p>&#x2014; geoff (@GeoffreyHuntley) <a href=\"https://twitter.com/GeoffreyHuntley/status/1933759643945480635?ref_src=twsrc%5Etfw&amp;ref=ghuntley.com\">June 14, 2025</a></blockquote>\n</figure><hr /><h1 id=\"executive-summary\">Executive Summary</h1><p><strong>Objective</strong>: Reverse engineer the <code>acli</code> binary to understand Rovo Dev AI agent functionality<br /><strong>Result</strong>: Successfully extracted 100+ Python source files, system prompts, and complete implementation<br /><strong>Key Discovery</strong>: Rovo Dev is a sophisticated AI coding agent with MCP (Model Context Protocol) integration and extensive analytics</p><h2 id=\"methodology-overview\">Methodology Overview</h2><figure class=\"kg-card kg-image-card\"><img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" class=\"kg-image\" height=\"1080\" src=\"https://ghuntley.com/content/images/2025/06/Editor-_-Mermaid-Chart-2025-06-14-052755.png\" width=\"2000\" /></figure><h2 id=\"detailed-technical-process\">Detailed Technical Process</h2><h3 id=\"phase-1-initial-binary-analysis\">Phase 1: Initial Binary Analysis</h3><h4 id=\"tool-calls-used\">Tool Calls Used</h4><pre><code class=\"language-bash\">file acli                    # Identify binary type\nhexdump -C acli | head -50   # Examine binary headers\notool -L acli               # Check linked libraries\n</code></pre><h4 id=\"key-findings\">Key Findings</h4><ul><li><strong>Binary Type</strong>: Mach-O 64-bit executable arm64 (Apple Silicon)</li><li><strong>Language</strong>: Go (evidenced by Go runtime symbols and garbage collector references)</li><li><strong>Dependencies</strong>: Standard macOS system libraries only</li></ul><figure class=\"kg-card kg-image-card\"><img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" class=\"kg-image\" height=\"562\" src=\"https://ghuntley.com/content/images/2025/06/Editor-_-Mermaid-Chart-2025-06-14-062537.png\" width=\"2000\" /></figure><h3 id=\"phase-2-string-analysis-and-content-discovery\">Phase 2: String Analysis and Content Discovery</h3><h4 id=\"tool-calls-used-1\">Tool Calls Used</h4><pre><code class=\"language-bash\">strings acli | grep -i rovo          # Find Rovo-related strings\nstrings acli | grep -i &quot;mcp\\|claude\\|anthropic\\|openai\\|gpt&quot;  # Find AI-related content\nstrings acli | grep -A5 -B5 &quot;system prompt&quot;  # Search for system prompts\n</code></pre><h4 id=\"critical-discovery\">Critical Discovery</h4><p>Found extensive embedded content including:</p><ul><li><code>atlassian_cli_rovodev</code> package references</li><li>MCP (Model Context Protocol) implementations</li><li>AI instruction templates</li><li>Analytics and telemetry systems</li></ul><h3 id=\"phase-3-embedded-archive-discovery\">Phase 3: Embedded Archive Discovery</h3><h4 id=\"zip-archive-detection\">ZIP Archive Detection</h4><pre><code class=\"language-bash\">grep -abo &quot;PK&quot; acli | head -5        # Find ZIP signatures\nhexdump -C acli | grep -A2 -B2 &quot;50 4b 03 04&quot;  # Locate ZIP headers\n</code></pre><h4 id=\"archive-structure-analysis\">Archive Structure Analysis</h4><figure class=\"kg-card kg-image-card\"><img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" class=\"kg-image\" height=\"1107\" src=\"https://ghuntley.com/content/images/2025/06/Editor-_-Mermaid-Chart-2025-06-14-054336.png\" width=\"2000\" /></figure><h3 id=\"phase-4-python-extraction-script-development\">Phase 4: Python Extraction Script Development</h3><p>Created a sophisticated extraction script (<code>extract_embedded.py</code>) that:</p><ol><li><strong>Located embedded ZIP archives</strong> within the Go binary</li><li><strong>Identified the Rovo Dev archive</strong> at binary offset 43858745</li><li><strong>Extracted Python source files</strong> using zipfile module</li><li><strong>Validated extraction</strong> by checking file contents</li></ol><h4 id=\"key-code-implementation\">Key Code Implementation</h4><pre><code class=\"language-python\">def extract_embedded_python():\n    with open(&apos;acli&apos;, &apos;rb&apos;) as f:\n        data = f.read()\n    \n    # Find rovodev archive starting position\n    rovo_start = None\n    for pos in matches:\n        check_data = data[pos:pos+300]\n        if b&apos;atlassian_cli_rovodev&apos; in check_data:\n            rovo_start = pos\n            break\n    \n    # Extract ZIP data and process\n    eocd_pos = data.rfind(b&apos;PK\\x05\\x06&apos;)\n    zip_data = data[rovo_start:eocd_pos+22]\n    \n    with zipfile.ZipFile(BytesIO(zip_data), &apos;r&apos;) as zf:\n        # Extract all Python files...\n</code></pre><h3 id=\"phase-5-source-code-analysis-and-documentation\">Phase 5: Source Code Analysis and Documentation</h3><h4 id=\"extracted-components\">Extracted Components</h4><figure class=\"kg-card kg-image-card\"><img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" class=\"kg-image\" height=\"132\" src=\"https://ghuntley.com/content/images/2025/06/Editor-_-Mermaid-Chart-2025-06-14-052548.png\" width=\"2000\" /></figure><h2 id=\"tool-usage-workflow\">Tool Usage Workflow</h2><figure class=\"kg-card kg-image-card\"><img alt=\"the z80 technique reveals the source code for Atlassian&apos;s &apos;rovo&apos; AI assistant\" class=\"kg-image\" height=\"3838\" src=\"https://ghuntley.com/content/images/2025/06/Editor-_-Mermaid-Chart-2025-06-14-052644.png\" width=\"647\" /></figure><h2 id=\"key-discoveries\">Key Discoveries</h2><h3 id=\"1-system-architecture\">1. System Architecture</h3><ul><li><strong>Language</strong>: Go binary with embedded Python AI agent</li><li><strong>AI Framework</strong>: MCP (Model Context Protocol) integration</li><li><strong>UI</strong>: Rich terminal interface with interactive components</li><li><strong>Security</strong>: Permission-based tool execution model</li></ul><h3 id=\"2-ai-agent-instructions-system-prompts\">2. AI Agent Instructions (System Prompts)</h3><p>Successfully extracted 6 detailed AI instruction templates:</p><ol><li><strong><code>local_code_review.md</code></strong> - Comprehensive code review automation</li><li><strong><code>create_instruction.md</code></strong> - Meta-prompt for creating new AI instructions</li><li><strong><code>increase_unit_test_coverage.md</code></strong> - Automated test generation</li><li><strong><code>improve_documentation.md</code></strong> - Documentation enhancement</li><li><strong><code>summarize_jira_issues.md</code></strong> - Atlassian product integration</li><li><strong><code>summarize_confluence_page.md</code></strong> - Knowledge base integration</li></ol><h3 id=\"3-analytics-telemetry-system\">3. Analytics &amp; Telemetry System</h3><p>Comprehensive data collection including:</p><ul><li>Command usage patterns</li><li>Tool execution metrics</li><li>Code modification tracking</li><li>AI model interaction analytics</li><li>Session duration and usage patterns</li><li>Error tracking and crash reporting</li></ul><h3 id=\"4-security-model\">4. Security Model</h3><ul><li>Session-based access control</li><li>Permission-based tool execution</li><li>Token-based authentication</li><li>User activity monitoring</li></ul><h2 id=\"technical-specifications\">Technical Specifications</h2><h3 id=\"binary-details\">Binary Details</h3><ul><li><strong>File Type</strong>: Mach-O 64-bit executable arm64</li><li><strong>Size</strong>: ~54MB with embedded archives</li><li><strong>Architecture</strong>: Apple Silicon optimized</li><li><strong>Runtime</strong>: Go with embedded Python environment</li></ul><h3 id=\"embedded-content\">Embedded Content</h3><ul><li><strong>Total Files Extracted</strong>: 100+ Python source files</li><li><strong>Archive Size</strong>: ~10MB compressed</li><li><strong>Package Structure</strong>: Complete Python package with tests</li><li><strong>Dependencies</strong>: MCP, Pydantic, Rich, Typer, LogFire</li></ul><h3 id=\"key-apis-and-endpoints\">Key APIs and Endpoints</h3><pre><code># Authentication\nhttps://auth.atlassian.com/authorize?audience=api.atlassian.com\n/oauth/token\n/accessible-resources\n\n# Jira Integration  \n/api/v1/jira/issue/{issueIdOrKey}\n/api/v1/jira/project/{projectIdOrKey}\n\n# Administration\n/api/v1/admin/org/{orgId}/user\n\n# Feedback Collection\n/feedback-collector-api/feedback\n</code></pre><h2 id=\"file-structure-overview\">File Structure Overview</h2><pre><code>&#x1f4c1; lib/atlassian_cli_rovodev/\n&#x251c;&#x2500;&#x2500; &#x1f4c1; src/rovodev/                    # Core implementation\n&#x2502;   &#x251c;&#x2500;&#x2500; &#x1f4c1; common/                     # Shared utilities\n&#x2502;   &#x251c;&#x2500;&#x2500; &#x1f4c1; commands/                   # CLI command handlers  \n&#x2502;   &#x251c;&#x2500;&#x2500; &#x1f4c1; modules/                    # Core functionality\n&#x2502;   &#x2502;   &#x251c;&#x2500;&#x2500; &#x1f4c1; instructions/           # AI system prompts\n&#x2502;   &#x2502;   &#x251c;&#x2500;&#x2500; &#x1f4c1; analytics/              # Telemetry system\n&#x2502;   &#x2502;   &#x251c;&#x2500;&#x2500; mcp_utils.py              # MCP protocol handling\n&#x2502;   &#x2502;   &#x251c;&#x2500;&#x2500; sessions.py               # AI session management\n&#x2502;   &#x2502;   &#x2514;&#x2500;&#x2500; memory.py                 # Conversation context\n&#x2502;   &#x2514;&#x2500;&#x2500; &#x1f4c1; ui/                        # Terminal interface\n&#x251c;&#x2500;&#x2500; &#x1f4c1; tests/                         # Comprehensive test suite\n&#x251c;&#x2500;&#x2500; &#x1f4c1; distribution/                  # Packaging system\n&#x2514;&#x2500;&#x2500; &#x1f4c1; hooks/                        # Runtime hooks\n</code></pre><h2 id=\"security-and-privacy-implications\">Security and Privacy Implications</h2><h3 id=\"data-collection\">Data Collection</h3><ul><li><strong>Extensive telemetry</strong>: User commands, code changes, AI interactions</li><li><strong>Session tracking</strong>: Duration, frequency, tool usage patterns</li><li><strong>Code analysis</strong>: File modifications, test coverage, documentation changes</li><li><strong>Error reporting</strong>: Crash logs, performance metrics</li></ul><h3 id=\"permission-model\">Permission Model</h3><ul><li>Granular tool execution controls</li><li>Session-based access management</li><li>Token-based authentication</li><li>User activity monitoring</li></ul><h2 id=\"validation-and-verification\">Validation and Verification</h2><h3 id=\"extraction-validation\">Extraction Validation</h3><pre><code class=\"language-bash\"># Verified extraction success\nfind lib/atlassian_cli_rovodev -name &quot;*.py&quot; | wc -l  # 100+ files\nfile lib/atlassian_cli_rovodev/src/rovodev/rovodev_cli.py  # Valid Python\npython3 -m py_compile lib/atlassian_cli_rovodev/src/rovodev/*.py  # Syntax check\n</code></pre><h3 id=\"content-verification\">Content Verification</h3><ul><li>All Python files are syntactically valid</li><li>System prompts are complete and detailed</li><li>Configuration files are properly formatted</li><li>Test files indicate comprehensive coverage</li></ul><h2 id=\"reproducibility\">Reproducibility</h2><p>The entire process is reproducible using the provided tools and scripts:</p><ol><li><strong><code>extract_embedded.py</code></strong> - Complete extraction script</li><li><strong><code>acli_analysis.md</code></strong> - Detailed technical analysis</li><li><strong><code>ROVO_EXTRACTED_SOURCE_INDEX.md</code></strong> - Source code catalog</li></ol><h2 id=\"conclusion\">Conclusion</h2><p>This reverse engineering effort successfully extracted the complete Rovo Dev AI agent implementation from the <code>acli</code> binary, revealing:</p><ul><li><strong>Sophisticated AI agent architecture</strong> with MCP protocol integration</li><li><strong>Comprehensive system prompts</strong> for various development tasks</li><li><strong>Extensive analytics and telemetry</strong> collection system</li><li><strong>Enterprise-grade security</strong> and permission models</li><li><strong>Modern Python-based implementation</strong> embedded in Go binary</li></ul><p>The extracted source code provides complete visibility into Atlassian&apos;s Rovo Dev AI agent functionality, system prompts, and implementation details.</p><h2 id=\"tools-and-technologies-used\">Tools and Technologies Used</h2><ul><li><strong>Binary Analysis</strong>: <code>file</code>, <code>hexdump</code>, <code>otool</code>, <code>strings</code></li><li><strong>Pattern Matching</strong>: <code>grep</code>, Python <code>re</code> module</li><li><strong>Data Extraction</strong>: <code>dd</code>, Python <code>zipfile</code>, custom scripts</li><li><strong>Programming</strong>: Python 3, shell scripting</li><li><strong>Documentation</strong>: Markdown, Mermaid diagrams</li></ul><div class=\"kg-card kg-callout-card kg-callout-card-blue\"><div class=\"kg-callout-emoji\">&#x1f4a1;</div><div class=\"kg-callout-text\"><i><em class=\"italic\" style=\"white-space: pre-wrap;\">This analysis was conducted for security research purposes to understand AI agent implementations and system architectures.</em></i></div></div>"
            ],
            "link": "https://ghuntley.com/atlassian-rovo-source-code/",
            "publishedAt": "2025-06-14",
            "source": "Geoffrey Huntley",
            "summary": "<p>Ever wondered what happens if you take the technique at &quot;<a href=\"https://ghuntley.com/z80/\">Can a LLM convert C, to ASM to specs and then to a working Z/80 Speccy tape? Yes.</a>&quot; and run it against the Atasslian Command Line (<a href=\"https://developer.atlassian.com/cloud/acli/guides/introduction/?ref=ghuntley.com\">ACLI</a>) interface? Strap yourself in, as the Z80 is amongst one</p>",
            "title": "the z80 technique reveals the source code for Atlassian's 'rovo' AI assistant"
        },
        {
            "content": [],
            "link": "https://lethain.com/competitive-advantage-author-llms/",
            "publishedAt": "2025-06-14",
            "source": "Will Larson",
            "summary": "<p>Over the past 19 months, I&rsquo;ve written <em><a href=\"https://craftingengstrategy.com/\">Crafting Engineering Strategy</a></em>, a book on creating engineering strategy. I&rsquo;ve also been working increasingly with large language models at work. Unsurprisingly, the intersection of those two ideas is a topic that I&rsquo;ve been thinking about a lot. What, I&rsquo;ve wondered, is the role of the author, particularly the long-form author, in a world where an increasingly large percentage of writing is intermediated by large language models?</p> <p>One framing I&rsquo;ve heard somewhat frequently is the view that LLMs are first and foremost a great pillaging of authors&rsquo; work. It&rsquo;s true. They are that. At some point there was a script to let you check which books had been loaded into Meta&rsquo;s LLaMa, and every book I&rsquo;d written at that point was included, none of them with my consent. However, I long ago made my peace with <a href=\"https://lethain.com/plagarism-idea-theft-writing-online/\">plagiarism online</a>, and this strikes me as not particularly different, albeit conducted by larger players. The folks using this writing are going to keep using it beyond the constraints I&rsquo;d prefer it to be used in, and I&rsquo;m disinterested in investing my scarce mental energy chasing through digital or legal mazes.</p> <p>Instead, I&rsquo;ve been thinking about",
            "title": "What is the competitive advantage of authors in the age of LLMs?"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-06-14"
}