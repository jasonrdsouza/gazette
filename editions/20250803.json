{
    "articles": [
        {
            "content": [
                "<p>The standard Mac filesystem, <a href=\"https://en.wikipedia.org/wiki/Apple_File_System\"><abbr title=\"Apple File System\">APFS</abbr></a>, has a feature called <em>space-saving clones</em>.\nThis allows you to create multiple copies of a file without using additional disk space \u2013 the filesystem only stores a single copy of the data.</p>\n\n<p>Although cloned files share data, they\u2019re independent \u2013 you can edit one copy without affecting the other (unlike <a href=\"https://en.wikipedia.org/wiki/Symbolic_link\">symlinks</a> or <a href=\"https://en.wikipedia.org/wiki/Hard_link\">hard links</a>).\nAPFS uses a technique called <a href=\"https://en.wikipedia.org/wiki/Copy-on-write\">copy-on-write</a> to store the data efficiently on disk \u2013 the cloned files continue to share any pieces they have in common.</p>\n\n<p>Cloning files is both faster and uses less disk space than copying.\nIf you\u2019re working with large files \u2013 like photos, videos, or datasets \u2013 space-saving clones can be a big win.</p>\n\n<p>Several filesystems support cloning, but in this post, I\u2019m focusing on macOS and APFS.</p>\n\n<p>For a recent project, I wanted to clone files using Python.\nThere\u2019s <a href=\"https://github.com/python/cpython/issues/81338\">an\u00a0open ticket</a> to support file cloning in the Python standard library.\nIn Python\u00a03.14, there\u2019s <a href=\"https://github.com/python/cpython/pull/119058\">a\u00a0new <code>Path.copy()</code> function</a> which adds support for cloning on Linux \u2013 but there\u2019s nothing yet for macOS.</p>\n\n<p>In this post, I\u2019ll show you two ways to clone files in APFS using Python.</p>\n\n<blockquote class=\"table_of_contents\">\n  <h3>Table of contents</h3>\n\n  <ul>\n    \n      <li>\n        <a href=\"https://alexwlchan.net/2025/cloning-with-python/#benefits\">What are the benefits of cloning?</a>\n\n        \n          <ul>\n            \n            <li><a href=\"https://alexwlchan.net/2025/cloning-with-python/#benefits-space\">Cloning files uses less disk space than copying</a></li>\n            \n            <li><a href=\"https://alexwlchan.net/2025/cloning-with-python/#benefits-speed\">Cloning files is faster than copying</a></li>\n            \n          </ul>\n        \n      </li>\n      <li>\n        <a href=\"https://alexwlchan.net/2025/cloning-with-python/#howto\">How do you clone files on macOS?</a>\n\n        \n          <ul>\n            \n            <li><a href=\"https://alexwlchan.net/2025/cloning-with-python/#howto-finder\">Using the \u201cDuplicate\u201d command in Finder</a></li>\n            \n            <li><a href=\"https://alexwlchan.net/2025/cloning-with-python/#howto-command-line\">Using <code>cp -c</code> on the command line</a></li>\n            \n            <li><a href=\"https://alexwlchan.net/2025/cloning-with-python/#howto-c-function\">Using the <code>clonefile()</code> function</a></li>\n            \n          </ul>\n        \n      </li>\n      <li>\n        <a href=\"https://alexwlchan.net/2025/cloning-with-python/#cloning-in-python\">How do you clone files with Python?</a>\n\n        \n          <ul>\n            \n            <li><a href=\"https://alexwlchan.net/2025/cloning-with-python/#python-subprocess\">Shelling out to <code>cp -c</code> using <code>subprocess</code></a></li>\n            \n            <li><a href=\"https://alexwlchan.net/2025/cloning-with-python/#python-ctypes\">Calling the <code>clonefile()</code> function using <code>ctypes</code></a></li>\n            \n          </ul>\n        \n      </li>\n      <li>\n        <a href=\"https://alexwlchan.net/2025/cloning-with-python/#in-practice\">In practice, how am I cloning files in Python?</a>\n\n        \n      </li>\n</ul>\n</blockquote>\n\n\n\n<hr />\n\n<h2 id=\"benefits\">What are the benefits of cloning?</h2>\n\n<p>There are two main benefits to using clones rather than copies.</p>\n\n<h3 id=\"benefits-space\">Cloning files uses less disk space than copying</h3>\n\n<p>Because the filesystem only has to keep one copy of the data, cloning a file doesn\u2019t use more space on disk.\nWe can see this with an experiment.\nLet\u2019s start by creating a random file with 1GB of data, and checking our free disk size:</p>\n\n<pre class=\"language-console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">dd </span><span class=\"k\">if</span><span class=\"o\">=</span>/dev/urandom <span class=\"nv\">of</span><span class=\"o\">=</span>1GB.bin <span class=\"nv\">bs</span><span class=\"o\">=</span>64M <span class=\"nv\">count</span><span class=\"o\">=</span>16\n<span class=\"go\">16+0 records in\n16+0 records out\n1073741824\u00a0bytes transferred in 2.113280 secs (508092550\u00a0bytes/sec)\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">df</span> <span class=\"nt\">-h</span> <span class=\"nt\">-I</span> /\n<span class=\"go\">Filesystem        Size    Used   Avail Capacity  Mounted on\n/dev/disk3s1s1   460Gi    14Gi    43Gi    25%    /\n</span></code></pre>\n<p>My disk currently has 43GB available.</p>\n\n<p>Let\u2019s copy the file, and check the free disk space after it\u2019s done.\nNotice that it decreases to 42GB, because the filesystem is now storing a second copy of this 1GB file:</p>\n\n<pre class=\"language-console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"c\"># Copying</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp </span>1GB.bin copy.bin\n<span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">df</span> <span class=\"nt\">-h</span> <span class=\"nt\">-I</span> /\n<span class=\"go\">Filesystem        Size    Used   Avail Capacity  Mounted on\n/dev/disk3s1s1   460Gi    14Gi    42Gi    25%    /\n</span></code></pre>\n<p>Now let\u2019s clone the file by passing the <code>-c</code> flag to <code>cp</code>.\nNotice that the free disk space stays the same, because the filesystem is just keeping a single copy of the data between the original and the clone:</p>\n\n<pre class=\"language-console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"c\"># Cloning</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp</span> <span class=\"nt\">-c</span> 1GB.bin clone.bin\n<span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">df</span> <span class=\"nt\">-h</span> <span class=\"nt\">-I</span> /\n<span class=\"go\">Filesystem        Size    Used   Avail Capacity  Mounted on\n/dev/disk3s1s1   460Gi    14Gi    42Gi    25%    /\n</span></code></pre>\n<h3 id=\"benefits-speed\">Cloning files is faster than copying</h3>\n\n<p>When you clone a file, the filesystem only has to write a small amount of metadata about the new clone.\nWhen you copy a file,it needs to write all the bytes of the entire file.\nThis means that cloning a file is much faster than copying, which we can see by timing the two approaches:</p>\n\n<pre class=\"language-console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"c\"># Copying</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">time cp </span>1GB.bin copy.bin\n<span class=\"go\">Executed in  260.07 millis\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"c\"># Cloning</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">time cp</span> <span class=\"nt\">-c</span> 1GB.bin clone.bin\n<span class=\"go\">Executed in    6.90 millis\n</span></code></pre>\n<p>This 43\u00d7 difference is with my Mac\u2019s internal SSD.\nIn my experience, the speed difference is even more pronounced on slower disks, like external hard drives.</p>\n\n<h2 id=\"howto\">How do you clone files on macOS?</h2>\n\n<h3 id=\"howto-finder\">Using the \u201cDuplicate\u201d command in Finder</h3>\n\n<p>If you use the Duplicate command in Finder (File &gt; Duplicate or \u2318D), it clones the file.</p>\n\n<h3 id=\"howto-command-line\">Using <code>cp -c</code> on the command line</h3>\n\n<p>If you use the <a href=\"https://alexwlchan.net/man/man1/cp.html\"><code>cp</code> (copy) command</a> with the <code>-c</code> flag, and it\u2019s possible to clone the file, you get a clone rather than a copy.\nIf it\u2019s not possible to clone the file \u2013 for example, if you\u2019re on a non-APFS volume that doesn\u2019t support cloning \u2013 you get a regular copy.</p>\n\n<p>Here\u2019s what that looks like:</p>\n\n<pre class=\"language-console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp</span> <span class=\"nt\">-c</span> src.txt dst.txt\n</code></pre>\n<h3 id=\"howto-c-function\">Using the <code>clonefile()</code> function</h3>\n\n<p>There\u2019s a macOS syscall <a href=\"https://alexwlchan.net/man/man2/clonefile.html\"><code>clonefile()</code></a> which creates space-saving clones.\nIt was introduced alongside APFS.</p>\n\n<p>Syscalls are quite low level, and they\u2019re how programs are meant to interact with the operating system.\nI don\u2019t think I\u2019ve ever made a syscall directly \u2013 I\u2019ve used wrappers like the Python <code>os</code> module, which make syscalls on my behalf, but I\u2019ve never written my own code to call them.</p>\n\n<p>Here\u2019s a rudimentary C program that uses <code>clonefile()</code> to clone a file:</p>\n<pre><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;sys/clonefile.h&gt;</span><span class=\"cp\">\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"s\">\"1GB.bin\"</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"s\">\"clone.bin\"</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* clonefile(2) supports several options related to symlinks and\n     * ownership information, but for this example we'll just use\n     * the default behaviour */</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">clonefile</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"clonefile failed\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">EXIT_FAILURE</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"clonefile succeeded: %s ~&gt; %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<p>You can compile and run this program like so:</p>\n\n<pre class=\"language-console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>gcc clone.c\n<span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>./a.out\n<span class=\"go\">clonefile succeeded: 1GB.bin ~&gt; clone.bin\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>./a.out\n<span class=\"go\">clonefile failed: File exists\n</span></code></pre>\n<p>But I don\u2019t use C in any of my projects \u2013 can I call this function from Python instead?</p>\n\n<h2 id=\"cloning-in-python\">How do you clone files with Python?</h2>\n\n<h3 id=\"python-subprocess\">Shelling out to <code>cp -c</code> using <code>subprocess</code>\n</h3>\n\n<p>The easiest way to clone a file in Python is by shelling out to <code>cp -c</code> with the <a href=\"https://docs.python.org/3/library/subprocess.html\"><code>subprocess</code> module</a>.\nHere\u2019s a short example:</p>\n<pre><code><span class=\"kn\">import</span> <span class=\"n\">subprocess</span>\n\n<span class=\"c1\"># Adding the `-c` flag means the file is cloned rather than copied,\n# if possible.  See the man page for `cp`.\n</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_call</span><span class=\"p\">([</span><span class=\"sh\">\"</span><span class=\"s\">cp</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">-c</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">1GB.bin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">clone.bin</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre>\n<p>I think this snippet is pretty simple, and a new reader could understand what it\u2019s doing.\nIf they\u2019re unfamiliar with file cloning on APFS, they might not immediately understand why this is different from <a href=\"https://docs.python.org/3/library/shutil.html#shutil.copyfile\"><code>shutil.copyfile</code></a>, but they could work it out quickly.</p>\n\n<p>This approach gets all the nice behaviour of the <code>cp</code> command \u2013 for example, if you try to clone on a volume that doesn\u2019t support cloning, it falls back to a regular file copy instead.\nThere\u2019s a bit of overhead from spawning an external process, but the overall impact is negligible (and easily offset by the speed increase of cloning).</p>\n\n<p>The problem with this approach is that error handling gets harder.\nThe <code>cp</code> command fails with exit code 1 for every error, so you need to parse the stderr to distinguish different errors, or implement your own error handling.</p>\n\n<p>In my project, I wrapped this <code>cp</code> call in a function which had some additional checks to spot common types of error, and throw them as more specific exceptions.\nAny remaining errors get thrown as a generic <code>subprocess.CalledProcessError</code>.\nHere\u2019s an example:</p>\n<pre><code><span class=\"kn\">from</span> <span class=\"n\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">import</span> <span class=\"n\">subprocess</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">clonefile</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Clone a file on macOS by using the `cp` command.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Check a couple of common error cases so we can get nice exceptions,\n</span>    <span class=\"c1\"># rather than relying on the `subprocess.CalledProcessError` from `cp`.\n</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">src</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">():</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">FileNotFoundError</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dst</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">():</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">FileNotFoundError</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Adding the `-c` flag means the file is cloned rather than copied,\n</span>    <span class=\"c1\"># if possible.  See the man page for `cp`.\n</span>    <span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_call</span><span class=\"p\">([</span><span class=\"sh\">\"</span><span class=\"s\">cp</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">-c</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">),</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">)])</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">dst</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">()</span>\n</code></pre>\n<p>For me, this code strikes a nice balance between being readable and returning good errors.</p>\n\n<h3 id=\"python-ctypes\">Calling the <code>clonefile()</code> function using <code>ctypes</code>\n</h3>\n\n<p>What if we want detailed error codes, and we don\u2019t want the overhead of spawning an external process?\nAlthough I know it\u2019s possible to make syscalls from Python using <a href=\"https://docs.python.org/3/library/ctypes.html\">the <code>ctypes</code> library</a>, I\u2019ve never actually done it.\nThis is my chance to learn!</p>\n\n<p>Following the documentation for <code>ctypes</code>, these are the steps:</p>\n\n<ol>\n  <li>\n    <p><strong>Import <code>ctypes</code> and <a href=\"https://docs.python.org/3/library/ctypes.html#loading-dynamic-link-libraries\">load a dynamic link library</a>.</strong>\nThis is the first thing we need to do \u2013 in this case, we\u2019re loading the macOS link library that contains the <code>clonefile()</code> function.</p>\n<pre><code><span class=\"kn\">import</span> <span class=\"n\">ctypes</span>\n\n<span class=\"n\">libSystem</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"nc\">CDLL</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">libSystem.B.dylib</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n<p>I worked out that I need to load <code>libSystem.B.dylib</code> by looking at other examples of <code>ctypes</code> code on GitHub.\nI couldn\u2019t find an explanation of it in Apple\u2019s documentation.</p>\n\n    <p>I later discovered that I can use <a href=\"https://alexwlchan.net/man/man1/otool.html\"><code>otool</code></a> to see the shared libraries that a compiled executable is linking to.\nFor example, I can see that <code>cp</code> is linking to the same <code>libSystem.B.dylib</code>:</p>\n\n    <pre class=\"language-console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>otool <span class=\"nt\">-L</span> /bin/cp\n<span class=\"go\">/bin/cp:\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1351.0.0)\n</span></code></pre>\n<p>This <code>CDLL()</code> call only works on macOS, which makes sense \u2013 it\u2019s loading macOS libraries.\nIf I run this code on my Debian web server, I get an error: <em>OSError: libSystem.B.dylib: cannot open shared object file: No such file or directory</em>.</p>\n  </li>\n  <li>\n    <p><strong>Tell <code>ctypes</code> about the function signature.</strong>\nIf we look at the <a href=\"https://alexwlchan.net/man/man2/clonefile.html\">man page for <code>clonefile()</code></a>, we see the signature of the C function:</p>\n<pre><code><span class=\"kt\">int</span> <span class=\"nf\">clonefile</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">flags</span><span class=\"p\">);</span>\n</code></pre>\n<p>We need to tell <code>ctypes</code> to find this function inside <code>libSystem.B.dylib</code>, then describe the arguments and return type of the function:</p>\n<pre><code><span class=\"n\">clonefile</span> <span class=\"o\">=</span> <span class=\"n\">libSystem</span><span class=\"p\">.</span><span class=\"n\">clonefile</span>\n<span class=\"n\">clonefile</span><span class=\"p\">.</span><span class=\"n\">argtypes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_char_p</span><span class=\"p\">,</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_char_p</span><span class=\"p\">,</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_int</span><span class=\"p\">]</span>\n<span class=\"n\">clonefile</span><span class=\"p\">.</span><span class=\"n\">restype</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_int</span>\n</code></pre>\n<p>Although <code>ctypes</code> can call C functions if you don\u2019t describe the signature, it\u2019s a good practice and gives you some safety rails.</p>\n\n    <p>For example, now <code>ctypes</code> knows that the <code>clonefile()</code> function takes three arguments.\nIf I try to call the function with one or two arguments, I get a <code>TypeError</code>.\nIf I didn\u2019t specify the signature, I could call it with any number of arguments, but it might behave in weird or unexpected ways.</p>\n  </li>\n  <li>\n    <p><strong>Define the inputs for the function.</strong>\nThis function needs three arguments.</p>\n\n    <p>In the original C function, <code>src</code> and <code>dst</code> are <code>char*</code> \u2013 pointers to a null-terminated string of <code>char</code> values.\nIn Python, this means the inputs need to be <code>bytes</code> values.\nThen <code>flags</code> is a regular Python <code>int</code>.</p>\n<pre><code><span class=\"c1\"># Source and destination files\n</span><span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">\"</span><span class=\"s\">1GB.bin</span><span class=\"sh\">\"</span>\n<span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">\"</span><span class=\"s\">clone.bin</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># clonefile(2) supports several options related to symlinks and\n# ownership information, but for this example we'll just use\n# the default behaviour\n</span><span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</code></pre>\n</li>\n  <li>\n    <p><strong>Call the function.</strong>\nNow we have the function available in Python, and the inputs in C-compatible types, we can call the function:</p>\n<pre><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n    \n<span class=\"k\">if</span> <span class=\"nf\">clonefile</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">errno</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"nf\">get_errno</span><span class=\"p\">()</span>\n    <span class=\"k\">raise</span> <span class=\"nc\">OSError</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">))</span>\n    \n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">clonefile succeeded: </span><span class=\"si\">{</span><span class=\"n\">src</span><span class=\"si\">}</span><span class=\"s\"> ~&gt; </span><span class=\"si\">{</span><span class=\"n\">dst</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n<p>If the clone succeeds, this program runs successfully.\nBut if the clone fails, we get an unhelpful error: <em>OSError: [Errno 0] Undefined error: 0</em>.</p>\n\n    <p>The point of calling the C function is to get useful error codes, but we need to opt-in to receiving them.\nIn particular, we need to add the <code>use_errno</code> parameter to our <code>CDLL</code> call:</p>\n<pre><code><span class=\"n\">libSystem</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"nc\">CDLL</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">libSystem.B.dylib</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">use_errno</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre>\n<p>Now, when the clone fails, we get different errors depending on the type of failure.\nThe exception includes the numeric error code, and Python will throw named subclasses of <code>OSError</code> like <code>FileNotFoundError</code>, <code>FileExistsError</code>, or <code>PermissionError</code>.\nThis makes it easier to write <code>try \u2026 except</code> blocks for specific failures.</p>\n  </li>\n</ol>\n\n<p>Here\u2019s the complete script, which clones a single file:</p>\n<pre><code><span class=\"kn\">import</span> <span class=\"n\">ctypes</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"c1\"># Load the libSystem library\n</span><span class=\"n\">libSystem</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"nc\">CDLL</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">libSystem.B.dylib</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">use_errno</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Tell ctypes about the function signature\n# int clonefile(const char * src, const char * dst, int flags);\n</span><span class=\"n\">clonefile</span> <span class=\"o\">=</span> <span class=\"n\">libSystem</span><span class=\"p\">.</span><span class=\"n\">clonefile</span>\n<span class=\"n\">clonefile</span><span class=\"p\">.</span><span class=\"n\">argtypes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_char_p</span><span class=\"p\">,</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_char_p</span><span class=\"p\">,</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_int</span><span class=\"p\">]</span>\n<span class=\"n\">clonefile</span><span class=\"p\">.</span><span class=\"n\">restype</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"n\">c_int</span>\n\n<span class=\"c1\"># Source and destination files\n</span><span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">\"</span><span class=\"s\">1GB.bin</span><span class=\"sh\">\"</span>\n<span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">\"</span><span class=\"s\">clone.bin</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># clonefile(2) supports several options related to symlinks and\n# ownership information, but for this example we'll just use\n# the default behaviour\n</span><span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># Actually call the clonefile() function\n</span><span class=\"k\">if</span> <span class=\"nf\">clonefile</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">errno</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"p\">.</span><span class=\"nf\">get_errno</span><span class=\"p\">()</span>\n    <span class=\"k\">raise</span> <span class=\"nc\">OSError</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">))</span>\n    \n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">clonefile succeeded: </span><span class=\"si\">{</span><span class=\"n\">src</span><span class=\"si\">}</span><span class=\"s\"> ~&gt; </span><span class=\"si\">{</span><span class=\"n\">dst</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n<p>I wrote this code for my own learning, and it\u2019s definitely not production-ready.\nIt works in the happy case and helped me understand <code>ctypes</code>, but if you actually wanted to use this, you\u2019d want proper error handling and testing.</p>\n\n<p>In particular, there are cases where you\u2019d want to fall back to <a href=\"https://docs.python.org/3/library/shutil.html#shutil.copyfile\"><code>shutil.copyfile</code></a> or similar if the clone fails \u2013 say if you\u2019re on an older version of macOS, or you\u2019re copying files on a volume which doesn\u2019t support cloning.\nBoth those cases are handled by <code>cp -c</code>, but not the <code>clonefile()</code> syscall.</p>\n\n<h2 id=\"in-practice\">In practice, how am I cloning files in Python?</h2>\n\n<p>In my project, I used <code>cp -c</code> with a wrapper like the one described above.\nIt\u2019s a short amount of code, pretty readable, and returns useful errors for common cases.</p>\n\n<p>Calling <code>clonefile()</code> directly with <code>ctypes</code> might be slightly faster than shelling out to <code>cp -c</code>, but the difference is probably negligible.\nThe downside is that it\u2019s more fragile and harder for other people to understand \u2013 it would have been the only part of the codebase that was using <code>ctypes</code>.</p>\n\n<p>File cloning made a noticeable difference.\nThe project involving copying lots of files on an external USB hard drive, and cloning instead of copying full files made it much faster.\nTasks that used to take over an hour were now completing in less than a minute.\n(The files were copied between folders on the same drive \u2013 cloned files have to be on the same APFS volume.)</p>\n\n<p>I\u2019m excited to see how file cloning works on Linux in Python\u00a03.14 <a href=\"https://github.com/python/cpython/pull/119058\">with <code>Path.copy()</code></a>, and I hope macOS support isn\u2019t far behind.</p>\n\n\n    <p>[If the formatting of this post looks odd in your feed reader, <a href=\"https://alexwlchan.net/2025/cloning-with-python/?ref=rss\">visit the original article</a>]</p>"
            ],
            "link": "https://alexwlchan.net/2025/cloning-with-python/?ref=rss",
            "publishedAt": "2025-08-03",
            "source": "Alex Chan",
            "summary": "<p>The standard Mac filesystem, <a href=\"https://en.wikipedia.org/wiki/Apple_File_System\"><abbr title=\"Apple File System\">APFS</abbr></a>, has a feature called <em>space-saving clones</em>. This allows you to create multiple copies of a file without using additional disk space \u2013 the filesystem only stores a single copy of the data.</p> <p>Although cloned files share data, they\u2019re independent \u2013 you can edit one copy without affecting the other (unlike <a href=\"https://en.wikipedia.org/wiki/Symbolic_link\">symlinks</a> or <a href=\"https://en.wikipedia.org/wiki/Hard_link\">hard links</a>). APFS uses a technique called <a href=\"https://en.wikipedia.org/wiki/Copy-on-write\">copy-on-write</a> to store the data efficiently on disk \u2013 the cloned files continue to share any pieces they have in common.</p> <p>Cloning files is both faster and uses less disk space than copying. If you\u2019re working with large files \u2013 like photos, videos, or datasets \u2013 space-saving clones can be a big win.</p> <p>Several filesystems support cloning, but in this post, I\u2019m focusing on macOS and APFS.</p> <p>For a recent project, I wanted to clone files using Python. There\u2019s <a href=\"https://github.com/python/cpython/issues/81338\">an open ticket</a> to support file cloning in the Python standard library. In Python 3.14, there\u2019s <a href=\"https://github.com/python/cpython/pull/119058\">a new <code>Path.copy()</code> function</a> which adds support for cloning on Linux \u2013 but there\u2019s nothing yet for macOS.</p> <p>In this post, I\u2019ll show you two ways to clone files in APFS using",
            "title": "Create space-saving clones on macOS with Python"
        },
        {
            "content": [],
            "link": "https://olano.dev/blog/foster-wallace",
            "publishedAt": "2025-08-03",
            "source": "Facundo Olano",
            "summary": "Hay algo en el tenis que pide ser escrito y hay algo que me predispone a leerlo, pero hay, sobre todo, algo en David Foster Wallace que lo hizo el mejor para contarnos el tenis, para contarnos el mundo a trav\u00e9s del tenis, para contarnos la vida posmoderna a trav\u00e9s del tenis.",
            "title": "En realidad quer\u00eda hablar de David Foster Wallace"
        },
        {
            "content": [],
            "link": "https://simonwillison.net/2025/Aug/3/privacy-design/#atom-entries",
            "publishedAt": "2025-08-03",
            "source": "Simon Willison",
            "summary": "<p>ChatGPT just removed their \"make this chat discoverable\" sharing feature, after it turned out a material volume of users had inadvertantly made their private chats available via Google search.</p> <p>Dane Stuckey, CISO for OpenAI, <a href=\"https://x.com/cryps1s/status/1951041845938499669\">on Twitter</a>:</p> <blockquote> <p>We just removed a feature from @ChatGPTapp that allowed users to make their conversations discoverable by search engines, such as Google. This was a short-lived experiment to help people discover useful conversations. [...]</p> <p>Ultimately we think this feature introduced too many opportunities for folks to accidentally share things they didn't intend to, so we're removing the option.</p> </blockquote> <p>There's been some media coverage of this issue - here are examples from <a href=\"https://techcrunch.com/2025/07/31/your-public-chatgpt-queries-are-getting-indexed-by-google-and-other-search-engines/\">TechCrunch</a>, <a href=\"https://www.techradar.com/ai-platforms-assistants/chatgpt/openai-pulls-chat-sharing-tool-after-google-search-privacy-scare\">TechRadar</a>, and <a href=\"https://www.pcmag.com/news/be-careful-what-you-tell-chatgpt-your-chats-could-show-up-on-google-search\">PCMag</a>.</p> <p>It turned out users had shared extremely private conversations and made them discoverable by search engines, which meant that various <code>site:chatgpt.com ...</code> searches were turning up all sorts of potentially embarrassing details.</p> <p>Here's what that UI looked like before they removed the option:</p> <p><img alt=\"Screenshot of a chat sharing dialog with title &quot;Public link created&quot; and X close button. Text reads &quot;A public link to your chat has been created. Manage previously shared chats at any time via Settings.&quot; Below is an unchecked checkbox",
            "title": "The ChatGPT sharing dialog demonstrates how difficult it is to design privacy preferences"
        }
    ],
    "lookbackDays": 1,
    "publishDate": "2025-08-03"
}